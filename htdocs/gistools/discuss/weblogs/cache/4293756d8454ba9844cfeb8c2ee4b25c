O:9:"MagpieRSS":20:{s:6:"parser";i:0;s:12:"current_item";a:0:{}s:5:"items";a:10:{i:0;a:13:{s:5:"title";s:48:"Nominations to the 2015 Ubuntu Community Council";s:4:"link";s:45:"http://www.markshuttleworth.com/archives/1488";s:8:"comments";s:54:"http://www.markshuttleworth.com/archives/1488#comments";s:7:"pubdate";s:31:"Wed, 11 Nov 2015 19:23:58 +0000";s:2:"dc";a:1:{s:7:"creator";s:17:"Mark Shuttleworth";}s:8:"category";s:33:"ubuntucommunityelectiongovernance";s:4:"guid";s:40:"https://www.markshuttleworth.com/?p=1488";s:11:"description";s:552:"I am delighted to nominate these long-standing members of the Ubuntu community for your consideration in the upcoming Community Council election. * Phillip Ballew https://launchpad.net/~philipballew * Walter Lapchynski https://launchpad.net/~wxl * Marco Ceppi https://launchpad.net/~marcoceppi * Jose Antonio Rey https://launchpad.net/~jose * Laura Czajkowskii https://launchpad.net/~czajkowski * Svetlana Belkin https://launchpad.net/~belkinsa * Chris Crisafulli https://launchpad.net/~itnet7 * Michael Hall https://launchpad.net/~mhall119 * [&#8230;]";s:7:"content";a:1:{s:7:"encoded";s:2392:"<p>I am delighted to nominate these long-standing members of the Ubuntu community for your consideration in the upcoming Community Council election.</p>
<p>* Phillip Ballew https://launchpad.net/~philipballew<br />
* Walter Lapchynski https://launchpad.net/~wxl<br />
* Marco Ceppi https://launchpad.net/~marcoceppi<br />
* Jose Antonio Rey https://launchpad.net/~jose<br />
* Laura Czajkowskii https://launchpad.net/~czajkowski<br />
* Svetlana Belkin https://launchpad.net/~belkinsa<br />
* Chris Crisafulli https://launchpad.net/~itnet7<br />
* Michael Hall https://launchpad.net/~mhall119<br />
* Scarlett Clark https://launchpad.net/~sgclark<br />
* C de-Avillez https://launchpad.net/~hggdh2<br />
* Daniel Holbach https://launchpad.net/~dholbach</p>
<p>The Community Council is our most thoughtful body, who carry the responsibility of finding common ground between our widely diverse interests. They oversee all membership in the project, recognising those who make substantial and sustained contributions through any number of forums and mechanisms with membership and a voice in the governance of Ubuntu. They delegate in many cases responsibility for governance of pieces of the project to teams who are best qualified to lead in those areas, but they maintain overall responsibility for our discourse and our standards of behaviour.</p>
<p>We have been the great beneficiaries of the work of the outgoing CC, who I would like to thank once again for their tasteful leadership. I was often reminded of the importance of having a team which continues to inspire and lead and build bridges, even under great pressure, and the CC team who conclude their term shortly have set the highest bar for that in my experience. I&#8217;m immensely grateful to them and excited to continue working with whomever the community chooses from this list of nominations.</p>
<p>I would encourage you to meet and chat with all of the candidates and choose those who you think are best able to bring teams together; Ubuntu is a locus of collaboration between groups with intensely different opinions, and it is our ability to find a way to share and collaborate with one another that sets us apart. When it gets particularly tricky, the CC are at their most valuable to the project.</p>
<p>Voting details have gone out to all voting members of Ubuntu, thank you for participating in the election!</p>
";}s:3:"wfw";a:1:{s:10:"commentrss";s:50:"http://www.markshuttleworth.com/archives/1488/feed";}s:5:"slash";a:1:{s:8:"comments";s:1:"0";}s:7:"summary";s:552:"I am delighted to nominate these long-standing members of the Ubuntu community for your consideration in the upcoming Community Council election. * Phillip Ballew https://launchpad.net/~philipballew * Walter Lapchynski https://launchpad.net/~wxl * Marco Ceppi https://launchpad.net/~marcoceppi * Jose Antonio Rey https://launchpad.net/~jose * Laura Czajkowskii https://launchpad.net/~czajkowski * Svetlana Belkin https://launchpad.net/~belkinsa * Chris Crisafulli https://launchpad.net/~itnet7 * Michael Hall https://launchpad.net/~mhall119 * [&#8230;]";s:12:"atom_content";s:2392:"<p>I am delighted to nominate these long-standing members of the Ubuntu community for your consideration in the upcoming Community Council election.</p>
<p>* Phillip Ballew https://launchpad.net/~philipballew<br />
* Walter Lapchynski https://launchpad.net/~wxl<br />
* Marco Ceppi https://launchpad.net/~marcoceppi<br />
* Jose Antonio Rey https://launchpad.net/~jose<br />
* Laura Czajkowskii https://launchpad.net/~czajkowski<br />
* Svetlana Belkin https://launchpad.net/~belkinsa<br />
* Chris Crisafulli https://launchpad.net/~itnet7<br />
* Michael Hall https://launchpad.net/~mhall119<br />
* Scarlett Clark https://launchpad.net/~sgclark<br />
* C de-Avillez https://launchpad.net/~hggdh2<br />
* Daniel Holbach https://launchpad.net/~dholbach</p>
<p>The Community Council is our most thoughtful body, who carry the responsibility of finding common ground between our widely diverse interests. They oversee all membership in the project, recognising those who make substantial and sustained contributions through any number of forums and mechanisms with membership and a voice in the governance of Ubuntu. They delegate in many cases responsibility for governance of pieces of the project to teams who are best qualified to lead in those areas, but they maintain overall responsibility for our discourse and our standards of behaviour.</p>
<p>We have been the great beneficiaries of the work of the outgoing CC, who I would like to thank once again for their tasteful leadership. I was often reminded of the importance of having a team which continues to inspire and lead and build bridges, even under great pressure, and the CC team who conclude their term shortly have set the highest bar for that in my experience. I&#8217;m immensely grateful to them and excited to continue working with whomever the community chooses from this list of nominations.</p>
<p>I would encourage you to meet and chat with all of the candidates and choose those who you think are best able to bring teams together; Ubuntu is a locus of collaboration between groups with intensely different opinions, and it is our ability to find a way to share and collaborate with one another that sets us apart. When it gets particularly tricky, the CC are at their most valuable to the project.</p>
<p>Voting details have gone out to all voting members of Ubuntu, thank you for participating in the election!</p>
";}i:1;a:13:{s:5:"title";s:16:"X marks the spot";s:4:"link";s:45:"http://www.markshuttleworth.com/archives/1479";s:8:"comments";s:54:"http://www.markshuttleworth.com/archives/1479#comments";s:7:"pubdate";s:31:"Wed, 21 Oct 2015 19:53:30 +0000";s:2:"dc";a:1:{s:7:"creator";s:17:"Mark Shuttleworth";}s:8:"category";s:6:"ubuntu";s:4:"guid";s:40:"https://www.markshuttleworth.com/?p=1479";s:11:"description";s:304:"What a great Wily it&#8217;s been, and for those of you who live on the latest release and haven&#8217;t already updated, the bits are baked and looking great. You can jump the queue if you know where to look while we spin up the extra servers needed for IMG and ISO downloads Utopic, Vivid and [&#8230;]";s:7:"content";a:1:{s:7:"encoded";s:5929:"<div style="width: 260px" class="wp-caption alignright"><img class="" src="http://assets.ubuntu.com/sites/ubuntu/1533/u/img/homepage/lxd_takeover.png" alt="LXD is the lightervisor, a pure-container virtualisation system, the world's fastest hypervisor." width="250" height="231" /><p class="wp-caption-text">LXD is the pure-container hypervisor</p></div>
<p style="text-align: left;">What a great Wily it&#8217;s been, and for those of you who live on the latest release and haven&#8217;t already updated, the bits are baked and looking great. You can jump the queue if you know where to look while we spin up the extra servers needed for IMG and ISO downloads <img src="http://www.markshuttleworth.com/wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p style="text-align: left;">Utopic, Vivid and Wily have been three intense releases, packed with innovation, and now we intend to bring all of those threads together for our Long Term Support release due out in April 2016.</p>
<p style="text-align: left;"><b>LXD is the world&#8217;s fastest hypervisor, led by Canonical, a pure-container way to run Linux guests on Linux hosts.</b> If you haven&#8217;t yet played with LXD (a.k.a LXC 2.0-b1) it will blow you away.  It will certainly transform your expectations of virtualisation, from slow-and-hard to amazingly light and fast. Imagine getting a full machine running any Linux you like, as a container on your laptop, in less than a second. For me, personally, it has become a fun way to clean up my build processes, spinning up a container on demand to make sure I always build in a fresh filesystem.</p>
<div style="width: 260px" class="wp-caption alignleft"><img class="" src="https://assets.ubuntu.com/sites/ubuntu/1253/u/img/cloud/tools/snappy/snappy.png" alt="Snappy packages have transactional updates with rollback" width="250" height="177" /><p class="wp-caption-text">Snappy Packaging System</p></div>
<p style="text-align: left;"><strong>Snappy is the world&#8217;s most secure packaging system</strong>, delivering crisp and transaction updates with rollback for both applications and the system, from phone to appliance. We&#8217;re using snappy on high-end switches and flying wonder-machines, on raspberry pi&#8217;s and massive clouds. Ubuntu Core is the all-snappy minimal server, and Ubuntu Personal will be the all-snappy phone / tablet / pc. With a snap you get to publish exactly the software you want to your device, and update it instantly over the air, just like we do the Ubuntu Phone. Snappy packages are automatically confined to ensure that a bug in one app doesn&#8217;t put your data elsewhere at risk. Amazing work, amazing team, amazing community!</p>
<div style="width: 211px" class="wp-caption alignright"><img class="" src="http://maas.ubuntu.com/wp-content/uploads/2013/01/maas-logo.png" alt="MAAS is your physical cloud" width="201" height="71" /><p class="wp-caption-text">Metal as a Service</p></div>
<p style="text-align: left;"><strong>MAAS is your physical cloud</strong>, with bare-metal machines on demand, supporting Ubuntu, CentOS and Windows. Drive your data centre from a single dashboard, bond network interfaces, raid your disks and rock the cloud generation. Led by Canonical, loved by the world leaders of big, and really big, deployments. MAAS gives you high availability DNS, DHCP, PXE and other critical infrastructure, for huge and dynamic data centres. Also pretty fun to run at home.</p>
<p style="text-align: left;"><strong>Juju is&#8230; model-driven application orchestration,</strong> that lets communities define how big topological apps like Hadoop and OpenStack map onto the cloud of your choice. The fastest way to find the fastest way to spin those applications into the cloud you prefer. With traditional configuration managers like Puppet now also saying that model-driven approaches are the way to the future, I&#8217;m very excited to see the kinds of problems that huge enterprises are starting to solve with Juju, and equally excited to see start-ups using Juju to speed their path to adoption. Here&#8217;s the Hadoop, Spark, IPython Notebook coolness I <a href="https://www.youtube.com/watch?v=I-O8daDHquM&amp;feature=youtu.be">deployed live on stage at Apache Hadoopcon</a> this month:</p>
<div id="attachment_1481" style="width: 810px" class="wp-caption aligncenter"><a href="https://www.markshuttleworth.com/wp-content/uploads/2015/10/ff6a/apache-hadoop-spark.png"><img class=" wp-image-1481" src="https://www.markshuttleworth.com/wp-content/uploads/2015/10/ff6a/apache-hadoop-spark.png" alt="Juju model of Apache Hadoop with Spark and IPython Notebook" width="800" height="494" /></a><p class="wp-caption-text">Apache Hadoop, Spark, IPython modelled with Juju</p></div>
<p style="text-align: left;">All of these are coming together beautifully, making Ubuntu the fastest path to magic of all sorts. And that magic will go by the codename&#8230; <strong>xenial xerus</strong>!</p>
<p style="text-align: left;">What fortunate timing that our next LTS should be X, because &#8220;xenial&#8221; means &#8220;friendly relations between hosts and guests&#8221;, and given all the amazing work going into LXD and KVM for Ubuntu OpenStack, and beyond that the interoperability of Ubuntu OpenStack with hypervisors of all sorts, it seems like a perfect fit.</p>
<p style="text-align: left;">And Xerus, the African ground squirrels, are among the most social animals in my home country. They thrive in the desert, they live in small, agile, social groups that get along unusually well with their neighbours (for most mammals, neighbours are a source of bloody competition, for Xerus, hey, collaboration is cool). They are fast, feisty, friendly and known for their enormous&#8230; courage. That sounds just about right. With great&#8230; courage&#8230; comes great opportunity!</p>
";}s:3:"wfw";a:1:{s:10:"commentrss";s:50:"http://www.markshuttleworth.com/archives/1479/feed";}s:5:"slash";a:1:{s:8:"comments";s:1:"4";}s:7:"summary";s:304:"What a great Wily it&#8217;s been, and for those of you who live on the latest release and haven&#8217;t already updated, the bits are baked and looking great. You can jump the queue if you know where to look while we spin up the extra servers needed for IMG and ISO downloads Utopic, Vivid and [&#8230;]";s:12:"atom_content";s:5929:"<div style="width: 260px" class="wp-caption alignright"><img class="" src="http://assets.ubuntu.com/sites/ubuntu/1533/u/img/homepage/lxd_takeover.png" alt="LXD is the lightervisor, a pure-container virtualisation system, the world's fastest hypervisor." width="250" height="231" /><p class="wp-caption-text">LXD is the pure-container hypervisor</p></div>
<p style="text-align: left;">What a great Wily it&#8217;s been, and for those of you who live on the latest release and haven&#8217;t already updated, the bits are baked and looking great. You can jump the queue if you know where to look while we spin up the extra servers needed for IMG and ISO downloads <img src="http://www.markshuttleworth.com/wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p style="text-align: left;">Utopic, Vivid and Wily have been three intense releases, packed with innovation, and now we intend to bring all of those threads together for our Long Term Support release due out in April 2016.</p>
<p style="text-align: left;"><b>LXD is the world&#8217;s fastest hypervisor, led by Canonical, a pure-container way to run Linux guests on Linux hosts.</b> If you haven&#8217;t yet played with LXD (a.k.a LXC 2.0-b1) it will blow you away.  It will certainly transform your expectations of virtualisation, from slow-and-hard to amazingly light and fast. Imagine getting a full machine running any Linux you like, as a container on your laptop, in less than a second. For me, personally, it has become a fun way to clean up my build processes, spinning up a container on demand to make sure I always build in a fresh filesystem.</p>
<div style="width: 260px" class="wp-caption alignleft"><img class="" src="https://assets.ubuntu.com/sites/ubuntu/1253/u/img/cloud/tools/snappy/snappy.png" alt="Snappy packages have transactional updates with rollback" width="250" height="177" /><p class="wp-caption-text">Snappy Packaging System</p></div>
<p style="text-align: left;"><strong>Snappy is the world&#8217;s most secure packaging system</strong>, delivering crisp and transaction updates with rollback for both applications and the system, from phone to appliance. We&#8217;re using snappy on high-end switches and flying wonder-machines, on raspberry pi&#8217;s and massive clouds. Ubuntu Core is the all-snappy minimal server, and Ubuntu Personal will be the all-snappy phone / tablet / pc. With a snap you get to publish exactly the software you want to your device, and update it instantly over the air, just like we do the Ubuntu Phone. Snappy packages are automatically confined to ensure that a bug in one app doesn&#8217;t put your data elsewhere at risk. Amazing work, amazing team, amazing community!</p>
<div style="width: 211px" class="wp-caption alignright"><img class="" src="http://maas.ubuntu.com/wp-content/uploads/2013/01/maas-logo.png" alt="MAAS is your physical cloud" width="201" height="71" /><p class="wp-caption-text">Metal as a Service</p></div>
<p style="text-align: left;"><strong>MAAS is your physical cloud</strong>, with bare-metal machines on demand, supporting Ubuntu, CentOS and Windows. Drive your data centre from a single dashboard, bond network interfaces, raid your disks and rock the cloud generation. Led by Canonical, loved by the world leaders of big, and really big, deployments. MAAS gives you high availability DNS, DHCP, PXE and other critical infrastructure, for huge and dynamic data centres. Also pretty fun to run at home.</p>
<p style="text-align: left;"><strong>Juju is&#8230; model-driven application orchestration,</strong> that lets communities define how big topological apps like Hadoop and OpenStack map onto the cloud of your choice. The fastest way to find the fastest way to spin those applications into the cloud you prefer. With traditional configuration managers like Puppet now also saying that model-driven approaches are the way to the future, I&#8217;m very excited to see the kinds of problems that huge enterprises are starting to solve with Juju, and equally excited to see start-ups using Juju to speed their path to adoption. Here&#8217;s the Hadoop, Spark, IPython Notebook coolness I <a href="https://www.youtube.com/watch?v=I-O8daDHquM&amp;feature=youtu.be">deployed live on stage at Apache Hadoopcon</a> this month:</p>
<div id="attachment_1481" style="width: 810px" class="wp-caption aligncenter"><a href="https://www.markshuttleworth.com/wp-content/uploads/2015/10/ff6a/apache-hadoop-spark.png"><img class=" wp-image-1481" src="https://www.markshuttleworth.com/wp-content/uploads/2015/10/ff6a/apache-hadoop-spark.png" alt="Juju model of Apache Hadoop with Spark and IPython Notebook" width="800" height="494" /></a><p class="wp-caption-text">Apache Hadoop, Spark, IPython modelled with Juju</p></div>
<p style="text-align: left;">All of these are coming together beautifully, making Ubuntu the fastest path to magic of all sorts. And that magic will go by the codename&#8230; <strong>xenial xerus</strong>!</p>
<p style="text-align: left;">What fortunate timing that our next LTS should be X, because &#8220;xenial&#8221; means &#8220;friendly relations between hosts and guests&#8221;, and given all the amazing work going into LXD and KVM for Ubuntu OpenStack, and beyond that the interoperability of Ubuntu OpenStack with hypervisors of all sorts, it seems like a perfect fit.</p>
<p style="text-align: left;">And Xerus, the African ground squirrels, are among the most social animals in my home country. They thrive in the desert, they live in small, agile, social groups that get along unusually well with their neighbours (for most mammals, neighbours are a source of bloody competition, for Xerus, hey, collaboration is cool). They are fast, feisty, friendly and known for their enormous&#8230; courage. That sounds just about right. With great&#8230; courage&#8230; comes great opportunity!</p>
";}i:2;a:13:{s:5:"title";s:52:"Introducing the Fan – simpler container networking";s:4:"link";s:45:"http://www.markshuttleworth.com/archives/1471";s:8:"comments";s:54:"http://www.markshuttleworth.com/archives/1471#comments";s:7:"pubdate";s:31:"Mon, 22 Jun 2015 10:40:53 +0000";s:2:"dc";a:1:{s:7:"creator";s:17:"Mark Shuttleworth";}s:8:"category";s:34:"cloudcontainersdockerfannetworking";s:4:"guid";s:40:"https://www.markshuttleworth.com/?p=1471";s:11:"description";s:322:"Canonical just announced a new, free, and very cool way to provide thousands of IP addresses to each of your VMs on AWS. Check out the fan networking on Ubuntu wiki page to get started, or read Dustin&#8217;s excellent fan walkthrough. Carry on here for a simple description of this happy little dose of awesome. [&#8230;]";s:7:"content";a:1:{s:7:"encoded";s:6353:"<p>Canonical just announced a new, free, and very cool way to provide thousands of IP addresses to each of your VMs on AWS. Check out the <a title="Guide to configuring the Fan network on Ubuntu" href="https://wiki.ubuntu.com/FanNetworking">fan networking on Ubuntu wiki page</a> to get started, or read <a href="http://blog.dustinkirkland.com/2015/06/the-bits-have-hit-fan.html">Dustin&#8217;s excellent fan walkthrough</a>. Carry on here for a simple description of this happy little dose of awesome.</p>
<p>Containers are transforming the way people think about virtual machines (LXD) and apps (Docker). They give us much better performance and much better density for virtualisation in LXD, and with Docker, they enable new ways to move applications between dev, test and production. These two aspects of containers &#8211; the whole machine container and the process container, are perfectly complementary. You can launch Docker process containers inside LXD machine containers very easily. LXD feels like KVM only faster, Docker feels like the core unit of a PAAS.</p>
<p>The density numbers are pretty staggering. It&#8217;s *normal* to run hundreds of containers on a laptop.</p>
<p>And that is what creates one of the real frustrations of the container generation, which is a shortage of easily accessible IP addresses.</p>
<p>It seems weird that in this era of virtual everything that a number is hard to come by. The restrictions are real, however, because AWS restricts artificially the number of IP addresses you can bind to an interface on your VM. You have to buy a bigger VM to get more IP addresses, even if you don&#8217;t need extra compute. Also, IPv6 is nowehre to be seen on the clouds, so addresses are more scarce than they need to be in the first place.</p>
<p>So the key problem is that you want to find a way to get tens or hundreds of IP addresses allocated to each VM.</p>
<p>Most workarounds to date have involved &#8220;overlay networking&#8221;. You make a database in the cloud to track which IP address is attached to which container on each host VM. You then create tunnels between all the hosts so that everything can talk to everything. This works, kinda. It results in a mess of tunnels and much more complex routing than you would otherwise need. It also ruins performance for things like multicast and broadcast, because those are now exploding off through a myriad twisty tunnels, all looking the same.</p>
<p>The Fan is Canonical&#8217;s answer to the container networking challenge.</p>
<p>We recognised that container networking is unusual, and quite unlike true software-defined networking, in that the number of containers you want on each host is probably roughly the same. You want to run a couple hundred containers on each VM. You also don&#8217;t (in the docker case) want to live migrate them around, you just kill them and start them again elsewhere. Essentially, what you need is an address multiplier &#8211; anywhere you have one interface, it would be handy to have 250 of them instead.</p>
<p>So we came up with the &#8220;fan&#8221;. It&#8217;s called that because you can picture it as a fan behind each of your existing IP addresses, with another 250 IP addresses available. Anywhere you have an IP you can make a fan, and every fan gives you 250x the IP addresses. More than that, you can run multiple fans, so each IP address could stand in front of thousands of container IP addresses.</p>
<p>We use standard IPv4 addresses, just like overlays. What we do that&#8217;s new is allocate those addresses mathematically, with an algorithmic projection from your existing subnet / network range to the expanded range. That results in a very flat address structure &#8211; you get exactly the same number of overlay addresses for each IP address on your network, perfect for a dense container setup.</p>
<p>Because we&#8217;re mapping addresses algorithmically, we avoid any need for a database of overlay addresses per host. We can calculate instantly, with no database lookup, the host address for any given container address.</p>
<p>More importantly, we can route to these addresses much more simply, with a single route to the &#8220;fan&#8221; network on each host, instead of the maze of twisty network tunnels you might have seen with other overlays.</p>
<p>You can expand any network range with any other network range. The main idea, though, is that people will expand a class B range in their VPC with a class A range. Who has a class A range lying about? You do! It turns out that there are a couple of class A networks that are allocated and which publish no routes on the Internet.</p>
<p>We also plan to submit an IETF RFC for the fan, for address expansion. It turns out that &#8220;Class E&#8221; networking was reserved but never defined, and we&#8217;d like to think of that as a new &#8220;Expansion&#8221; class. There are several class A network addresses reserved for Class E, which won&#8217;t work on the Internet itself. While you can use the fan with unused class A addresses (and there are several good candidates for use!) it would be much nicer to do this as part of a standard.</p>
<p>The fan is available on Ubuntu on AWS and soon on other clouds, for your testing and container experiments! Feedback is most welcome while we refine the user experience.</p>
<p>Configuration on Ubuntu is super-simple. Here&#8217;s an example:</p>
<p>In /etc/network/fan:</p>
<blockquote><p># fan 241<br />
241.0.0.0/8 172.16.3.0/16 dhcp</p></blockquote>
<p>In /etc/network/interfaces:</p>
<blockquote><p>iface eth0 static<br />
address 172.16.3.4<br />
netmask 255.255.0.0<br />
up fanctl up 241.0.0.0/8 172.16.3.4/16<br />
down fanctl down 241.0.0.0/8 172.16.3.4/16</p></blockquote>
<p>This will map 250 addresses on 241.0.0.0/8 to your 172.16.0.0/16 hosts.</p>
<p>Docker, LXD and Juju integration is just as easy. For docker, edit /etc/default/docker.io, adding:</p>
<blockquote><p>DOCKER_OPTS=&#8221;-d -b fan-10-3-4 &#8211;mtu=1480 &#8211;iptables=false&#8221;</p></blockquote>
<p>You must then restart docker.io:</p>
<blockquote><p>sudo service docker.io restart</p></blockquote>
<p>At this point, a Docker instance started via, e.g.,</p>
<blockquote><p>docker run -it ubuntu:latest</p></blockquote>
<p>will be run within the specified fan overlay network.</p>
<p>Enjoy!</p>
";}s:3:"wfw";a:1:{s:10:"commentrss";s:50:"http://www.markshuttleworth.com/archives/1471/feed";}s:5:"slash";a:1:{s:8:"comments";s:1:"0";}s:7:"summary";s:322:"Canonical just announced a new, free, and very cool way to provide thousands of IP addresses to each of your VMs on AWS. Check out the fan networking on Ubuntu wiki page to get started, or read Dustin&#8217;s excellent fan walkthrough. Carry on here for a simple description of this happy little dose of awesome. [&#8230;]";s:12:"atom_content";s:6353:"<p>Canonical just announced a new, free, and very cool way to provide thousands of IP addresses to each of your VMs on AWS. Check out the <a title="Guide to configuring the Fan network on Ubuntu" href="https://wiki.ubuntu.com/FanNetworking">fan networking on Ubuntu wiki page</a> to get started, or read <a href="http://blog.dustinkirkland.com/2015/06/the-bits-have-hit-fan.html">Dustin&#8217;s excellent fan walkthrough</a>. Carry on here for a simple description of this happy little dose of awesome.</p>
<p>Containers are transforming the way people think about virtual machines (LXD) and apps (Docker). They give us much better performance and much better density for virtualisation in LXD, and with Docker, they enable new ways to move applications between dev, test and production. These two aspects of containers &#8211; the whole machine container and the process container, are perfectly complementary. You can launch Docker process containers inside LXD machine containers very easily. LXD feels like KVM only faster, Docker feels like the core unit of a PAAS.</p>
<p>The density numbers are pretty staggering. It&#8217;s *normal* to run hundreds of containers on a laptop.</p>
<p>And that is what creates one of the real frustrations of the container generation, which is a shortage of easily accessible IP addresses.</p>
<p>It seems weird that in this era of virtual everything that a number is hard to come by. The restrictions are real, however, because AWS restricts artificially the number of IP addresses you can bind to an interface on your VM. You have to buy a bigger VM to get more IP addresses, even if you don&#8217;t need extra compute. Also, IPv6 is nowehre to be seen on the clouds, so addresses are more scarce than they need to be in the first place.</p>
<p>So the key problem is that you want to find a way to get tens or hundreds of IP addresses allocated to each VM.</p>
<p>Most workarounds to date have involved &#8220;overlay networking&#8221;. You make a database in the cloud to track which IP address is attached to which container on each host VM. You then create tunnels between all the hosts so that everything can talk to everything. This works, kinda. It results in a mess of tunnels and much more complex routing than you would otherwise need. It also ruins performance for things like multicast and broadcast, because those are now exploding off through a myriad twisty tunnels, all looking the same.</p>
<p>The Fan is Canonical&#8217;s answer to the container networking challenge.</p>
<p>We recognised that container networking is unusual, and quite unlike true software-defined networking, in that the number of containers you want on each host is probably roughly the same. You want to run a couple hundred containers on each VM. You also don&#8217;t (in the docker case) want to live migrate them around, you just kill them and start them again elsewhere. Essentially, what you need is an address multiplier &#8211; anywhere you have one interface, it would be handy to have 250 of them instead.</p>
<p>So we came up with the &#8220;fan&#8221;. It&#8217;s called that because you can picture it as a fan behind each of your existing IP addresses, with another 250 IP addresses available. Anywhere you have an IP you can make a fan, and every fan gives you 250x the IP addresses. More than that, you can run multiple fans, so each IP address could stand in front of thousands of container IP addresses.</p>
<p>We use standard IPv4 addresses, just like overlays. What we do that&#8217;s new is allocate those addresses mathematically, with an algorithmic projection from your existing subnet / network range to the expanded range. That results in a very flat address structure &#8211; you get exactly the same number of overlay addresses for each IP address on your network, perfect for a dense container setup.</p>
<p>Because we&#8217;re mapping addresses algorithmically, we avoid any need for a database of overlay addresses per host. We can calculate instantly, with no database lookup, the host address for any given container address.</p>
<p>More importantly, we can route to these addresses much more simply, with a single route to the &#8220;fan&#8221; network on each host, instead of the maze of twisty network tunnels you might have seen with other overlays.</p>
<p>You can expand any network range with any other network range. The main idea, though, is that people will expand a class B range in their VPC with a class A range. Who has a class A range lying about? You do! It turns out that there are a couple of class A networks that are allocated and which publish no routes on the Internet.</p>
<p>We also plan to submit an IETF RFC for the fan, for address expansion. It turns out that &#8220;Class E&#8221; networking was reserved but never defined, and we&#8217;d like to think of that as a new &#8220;Expansion&#8221; class. There are several class A network addresses reserved for Class E, which won&#8217;t work on the Internet itself. While you can use the fan with unused class A addresses (and there are several good candidates for use!) it would be much nicer to do this as part of a standard.</p>
<p>The fan is available on Ubuntu on AWS and soon on other clouds, for your testing and container experiments! Feedback is most welcome while we refine the user experience.</p>
<p>Configuration on Ubuntu is super-simple. Here&#8217;s an example:</p>
<p>In /etc/network/fan:</p>
<blockquote><p># fan 241<br />
241.0.0.0/8 172.16.3.0/16 dhcp</p></blockquote>
<p>In /etc/network/interfaces:</p>
<blockquote><p>iface eth0 static<br />
address 172.16.3.4<br />
netmask 255.255.0.0<br />
up fanctl up 241.0.0.0/8 172.16.3.4/16<br />
down fanctl down 241.0.0.0/8 172.16.3.4/16</p></blockquote>
<p>This will map 250 addresses on 241.0.0.0/8 to your 172.16.0.0/16 hosts.</p>
<p>Docker, LXD and Juju integration is just as easy. For docker, edit /etc/default/docker.io, adding:</p>
<blockquote><p>DOCKER_OPTS=&#8221;-d -b fan-10-3-4 &#8211;mtu=1480 &#8211;iptables=false&#8221;</p></blockquote>
<p>You must then restart docker.io:</p>
<blockquote><p>sudo service docker.io restart</p></blockquote>
<p>At this point, a Docker instance started via, e.g.,</p>
<blockquote><p>docker run -it ubuntu:latest</p></blockquote>
<p>will be run within the specified fan overlay network.</p>
<p>Enjoy!</p>
";}i:3;a:13:{s:5:"title";s:34:"Announcing the “wily werewolf”";s:4:"link";s:45:"http://www.markshuttleworth.com/archives/1468";s:8:"comments";s:54:"http://www.markshuttleworth.com/archives/1468#comments";s:7:"pubdate";s:31:"Mon, 04 May 2015 14:48:00 +0000";s:2:"dc";a:1:{s:7:"creator";s:17:"Mark Shuttleworth";}s:8:"category";s:15:"ubuntucodenamew";s:4:"guid";s:40:"https://www.markshuttleworth.com/?p=1468";s:11:"description";s:346:"Watchful observers will have wondered why &#8220;W&#8221; is yet unnamed! Without wallowing in the wizzo details, let&#8217;s just say it&#8217;s been a wild and worthy week, and as it happens I had the well-timed opportunity of a widely watched keynote today and thought, perhaps wonkily, that it would be fun to announce it there. But [&#8230;]";s:7:"content";a:1:{s:7:"encoded";s:897:"<p>Watchful observers will have wondered why &#8220;W&#8221; is yet unnamed! Without wallowing in the wizzo details, let&#8217;s just say it&#8217;s been a wild and worthy week, and as it happens I had the well-timed opportunity of a widely watched keynote today and thought, perhaps wonkily, that it would be fun to announce it there.</p>
<p>But first, thank you to all who have made such witty suggestions in webby forums. Alas, the &#8220;wacky wabbit&#8221; and &#8220;watery walrus&#8221;, while weird enough and wisely whimsical, won&#8217;t win the race. The &#8220;warty wombat&#8221;, while wistfully wonderful, will break all sorts of systems with its wepetition. And the &#8220;witchy whippet&#8221;, in all its wiry weeness, didn&#8217;t make the cut.</p>
<p>Instead, my waggish friends, the winsome W on which we wish will be&#8230; the &#8220;wily werewolf&#8221;.</p>
<p>Enjoy!</p>
";}s:3:"wfw";a:1:{s:10:"commentrss";s:50:"http://www.markshuttleworth.com/archives/1468/feed";}s:5:"slash";a:1:{s:8:"comments";s:1:"1";}s:7:"summary";s:346:"Watchful observers will have wondered why &#8220;W&#8221; is yet unnamed! Without wallowing in the wizzo details, let&#8217;s just say it&#8217;s been a wild and worthy week, and as it happens I had the well-timed opportunity of a widely watched keynote today and thought, perhaps wonkily, that it would be fun to announce it there. But [&#8230;]";s:12:"atom_content";s:897:"<p>Watchful observers will have wondered why &#8220;W&#8221; is yet unnamed! Without wallowing in the wizzo details, let&#8217;s just say it&#8217;s been a wild and worthy week, and as it happens I had the well-timed opportunity of a widely watched keynote today and thought, perhaps wonkily, that it would be fun to announce it there.</p>
<p>But first, thank you to all who have made such witty suggestions in webby forums. Alas, the &#8220;wacky wabbit&#8221; and &#8220;watery walrus&#8221;, while weird enough and wisely whimsical, won&#8217;t win the race. The &#8220;warty wombat&#8221;, while wistfully wonderful, will break all sorts of systems with its wepetition. And the &#8220;witchy whippet&#8221;, in all its wiry weeness, didn&#8217;t make the cut.</p>
<p>Instead, my waggish friends, the winsome W on which we wish will be&#8230; the &#8220;wily werewolf&#8221;.</p>
<p>Enjoy!</p>
";}i:4;a:13:{s:5:"title";s:11:"W is for…";s:4:"link";s:45:"http://www.markshuttleworth.com/archives/1466";s:8:"comments";s:54:"http://www.markshuttleworth.com/archives/1466#comments";s:7:"pubdate";s:31:"Mon, 04 May 2015 06:39:13 +0000";s:2:"dc";a:1:{s:7:"creator";s:17:"Mark Shuttleworth";}s:8:"category";s:6:"ubuntu";s:4:"guid";s:40:"https://www.markshuttleworth.com/?p=1466";s:11:"description";s:100:"&#8230; waiting till the Ubuntu Summit online opening keynote today, at 1400 UTC. See you there 😉";s:7:"content";a:1:{s:7:"encoded";s:233:"<p>&#8230; waiting till the Ubuntu Summit online opening keynote today, at 1400 UTC. See you there <img src="http://s.w.org/images/core/emoji/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
";}s:3:"wfw";a:1:{s:10:"commentrss";s:50:"http://www.markshuttleworth.com/archives/1466/feed";}s:5:"slash";a:1:{s:8:"comments";s:1:"3";}s:7:"summary";s:100:"&#8230; waiting till the Ubuntu Summit online opening keynote today, at 1400 UTC. See you there 😉";s:12:"atom_content";s:233:"<p>&#8230; waiting till the Ubuntu Summit online opening keynote today, at 1400 UTC. See you there <img src="http://s.w.org/images/core/emoji/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
";}i:5;a:13:{s:5:"title";s:57:"Smart things powered by snappy Ubuntu Core on ARM and x86";s:4:"link";s:45:"http://www.markshuttleworth.com/archives/1445";s:8:"comments";s:54:"http://www.markshuttleworth.com/archives/1445#comments";s:7:"pubdate";s:31:"Tue, 20 Jan 2015 14:00:34 +0000";s:2:"dc";a:1:{s:7:"creator";s:4:"mark";}s:8:"category";s:90:"free softwareubuntuarmconnected devicesdeveloper boardsiotsmart thingssnappyubuntu corex86";s:4:"guid";s:39:"http://www.markshuttleworth.com/?p=1445";s:11:"description";s:364:"Smart things powered by Ubuntu Core have automated, transactional security updates and access to a huge range of software for app developers. We hope it will be useful for the next generation of incredible machines and are delighted to be launching it with the support of a wide range of software and hardware specialists that are leading the "internet of things".";s:7:"content";a:1:{s:7:"encoded";s:3937:"<p>&#8220;Smart, connected things&#8221; are redefining our home, work and play, with brilliant innovation built on standard processors that have shrunk in power and price to the point where it makes sense to turn almost every &#8220;thing&#8221; into a smart thing. I&#8217;m inspired by the inventors and innovators who are creating incredible machines &#8211; from robots that might clean or move things around the house, to drones that follow us at play, to smarter homes which use energy more efficiently or more insightful security systems. Prooving the power of open source to unleash innovation, most of this stuff runs on Linux &#8211; but it&#8217;s a hugely fragmented and insecure kind of Linux. Every device has custom &#8220;firmware&#8221; that lumps together the OS and drivers and devices-specific software, and that firmware is almost never updated. So let&#8217;s fix that!</p>
<p>Ubuntu is right at the heart of the &#8220;internet thing&#8221; revolution, and so we are in a good position to raise the bar for security and consistency across the whole ecosystem. Ubuntu is already pervasive on devices &#8211; you&#8217;ve probably seen lots of &#8220;Ubuntu in the wild&#8221; stories, from self-driving cars to space programs and robots and the occasional airport display. I&#8217;m excited that we can help underpin the next wave of innovation while also thoughtful about the responsibility that entails. So today we&#8217;re launching snappy Ubuntu Core on a wide range of boards, chips and chipsets, because the <a title="Ubuntu Core with snappy updates" href="https://developer.ubuntu.com/en/snappy/">snappy system and Ubuntu Core</a> are perfect for distributed, connected devices that need security updates for the OS and applications but also need to be completely reliable and self-healing. Snappy is much better than package dependencies for robust, distributed devices.</p>
<p><iframe src="//www.youtube.com/embed/SugRYxEtEKQ" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"></iframe></p>
<p>Transactional updates. App store. A huge range of hardware. Branding for device manufacturers.</p>
<p>In this release of Ubuntu Core we&#8217;ve added a <a title="Ubuntu Core on smart devices" href="http://www.ubuntu.com/things">hardware abstraction layer where platform-specific kernels live</a>. We&#8217;re working commercially with the major silicon providers to guarantee free updates to every device built on their chips and boards. We&#8217;ve added a web device manager (&#8220;webdm&#8221;) that handles first-boot and app store access through the web consistently on every device. And we&#8217;ve preserved perfect compatibility with the snappy images of Ubuntu Core available on every major cloud today. So you can start your kickstarter project with a VM on your favourite cloud and pick your processor when you&#8217;re ready to finalise the device.</p>
<p>If you are an inventor or a developer of apps that might run on devices, then Ubuntu Core is for you. We&#8217;re launching it with a wide range of partners on a huge range of devices. From the pervasive Beaglebone Black to the $35 Odroid-C1 (1Ghz processor, 1 GB RAM), all the way up to the biggest Xeon servers, snappy Ubuntu Core gives you a crisp, ultra-reliable base platform, with all the goodness of Ubuntu at your fingertips and total control over the way you deliver your app to your users and devices. With an app store (well, a &#8220;snapp&#8221; store) built in and access to the amazing work of thousands of communities collaborating on Github and other forums, with code for robotics and autopilots and a million other things instantly accessible, I can&#8217;t wait to see what people build.</p>
<p>I for one welcome the ability to install AI on my next camera-toting drone, and am glad to be able to do it in a way that will get patched automatically with fixes for future heartbleeds!</p>
";}s:3:"wfw";a:1:{s:10:"commentrss";s:50:"http://www.markshuttleworth.com/archives/1445/feed";}s:5:"slash";a:1:{s:8:"comments";s:1:"0";}s:7:"summary";s:364:"Smart things powered by Ubuntu Core have automated, transactional security updates and access to a huge range of software for app developers. We hope it will be useful for the next generation of incredible machines and are delighted to be launching it with the support of a wide range of software and hardware specialists that are leading the "internet of things".";s:12:"atom_content";s:3937:"<p>&#8220;Smart, connected things&#8221; are redefining our home, work and play, with brilliant innovation built on standard processors that have shrunk in power and price to the point where it makes sense to turn almost every &#8220;thing&#8221; into a smart thing. I&#8217;m inspired by the inventors and innovators who are creating incredible machines &#8211; from robots that might clean or move things around the house, to drones that follow us at play, to smarter homes which use energy more efficiently or more insightful security systems. Prooving the power of open source to unleash innovation, most of this stuff runs on Linux &#8211; but it&#8217;s a hugely fragmented and insecure kind of Linux. Every device has custom &#8220;firmware&#8221; that lumps together the OS and drivers and devices-specific software, and that firmware is almost never updated. So let&#8217;s fix that!</p>
<p>Ubuntu is right at the heart of the &#8220;internet thing&#8221; revolution, and so we are in a good position to raise the bar for security and consistency across the whole ecosystem. Ubuntu is already pervasive on devices &#8211; you&#8217;ve probably seen lots of &#8220;Ubuntu in the wild&#8221; stories, from self-driving cars to space programs and robots and the occasional airport display. I&#8217;m excited that we can help underpin the next wave of innovation while also thoughtful about the responsibility that entails. So today we&#8217;re launching snappy Ubuntu Core on a wide range of boards, chips and chipsets, because the <a title="Ubuntu Core with snappy updates" href="https://developer.ubuntu.com/en/snappy/">snappy system and Ubuntu Core</a> are perfect for distributed, connected devices that need security updates for the OS and applications but also need to be completely reliable and self-healing. Snappy is much better than package dependencies for robust, distributed devices.</p>
<p><iframe src="//www.youtube.com/embed/SugRYxEtEKQ" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"></iframe></p>
<p>Transactional updates. App store. A huge range of hardware. Branding for device manufacturers.</p>
<p>In this release of Ubuntu Core we&#8217;ve added a <a title="Ubuntu Core on smart devices" href="http://www.ubuntu.com/things">hardware abstraction layer where platform-specific kernels live</a>. We&#8217;re working commercially with the major silicon providers to guarantee free updates to every device built on their chips and boards. We&#8217;ve added a web device manager (&#8220;webdm&#8221;) that handles first-boot and app store access through the web consistently on every device. And we&#8217;ve preserved perfect compatibility with the snappy images of Ubuntu Core available on every major cloud today. So you can start your kickstarter project with a VM on your favourite cloud and pick your processor when you&#8217;re ready to finalise the device.</p>
<p>If you are an inventor or a developer of apps that might run on devices, then Ubuntu Core is for you. We&#8217;re launching it with a wide range of partners on a huge range of devices. From the pervasive Beaglebone Black to the $35 Odroid-C1 (1Ghz processor, 1 GB RAM), all the way up to the biggest Xeon servers, snappy Ubuntu Core gives you a crisp, ultra-reliable base platform, with all the goodness of Ubuntu at your fingertips and total control over the way you deliver your app to your users and devices. With an app store (well, a &#8220;snapp&#8221; store) built in and access to the amazing work of thousands of communities collaborating on Github and other forums, with code for robotics and autopilots and a million other things instantly accessible, I can&#8217;t wait to see what people build.</p>
<p>I for one welcome the ability to install AI on my next camera-toting drone, and am glad to be able to do it in a way that will get patched automatically with fixes for future heartbleeds!</p>
";}i:6;a:13:{s:5:"title";s:58:"Announcing Ubuntu Core, with snappy transactional updates!";s:4:"link";s:45:"http://www.markshuttleworth.com/archives/1434";s:8:"comments";s:54:"http://www.markshuttleworth.com/archives/1434#comments";s:7:"pubdate";s:31:"Tue, 09 Dec 2014 16:00:29 +0000";s:2:"dc";a:1:{s:7:"creator";s:4:"mark";}s:8:"category";s:66:"ubuntuimage based managementsnappytransactional updatesubuntu core";s:4:"guid";s:39:"http://www.markshuttleworth.com/?p=1434";s:11:"description";s:421:"Ubuntu Core brings the bulletproof update mechanism and application isolation security from the Ubuntu phone to the cloud. It creates the smallest, most secure rendition of Ubuntu ever! And it's really amazing as a platform for container-based deployment with tools like Docker. If you want the very latest goodness together with the traditional security of Ubuntu, in a lean package, Ubuntu Core is the platform for you.";s:7:"content";a:1:{s:7:"encoded";s:9928:"<p>What if your cloud instances could be updated with the same certainty and precision as your mobile phone &#8211; with carrier grade assurance that an update applies perfectly or is not applied at all? What if your apps could be isolated from one another completely, so there&#8217;s no possibility that installing one app could break another, and stronger assurance that a compromise of one app won&#8217;t compromise the data from another? When we set out to build the Ubuntu Phone we took on the challenge of raising the bar for reliability and security in the mobile market. And today that same technology is coming to the cloud, in the form of <a title="Ubuntu Core uses the &quot;snappy&quot; package system for transactional updates of the system and apps" href="https://ubuntu.com/snappy">a new &#8220;snappy&#8221; image called Ubuntu Core</a>, which is in beta today on Azure and as a KVM image you can run on any Linux machine.</p>
<p><iframe src="//www.youtube.com/embed/BlcTDz9ogug" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"></iframe></p>
<p>This is in a sense the biggest break with tradition in 10 years of Ubuntu, because snappy Ubuntu Core doesn&#8217;t use debs or apt-get. We call it &#8220;snappy&#8221; because that&#8217;s the new bullet-proof mechanism for app delivery and system updates; it&#8217;s completely different to the traditional package-based Ubuntu server and desktop. The snappy system keeps each part of Ubuntu in a separate, read-only file, and does the same for each application. That way, developers can deliver everything they need to be confident their app will work exactly as they intend, and we can take steps to keep the various apps isolated from one another, and ensure that updates are always perfect. Of course, that means that apt-get won&#8217;t work, but that&#8217;s OK since developers can reuse debs to make their snappy apps, and the core system is exactly the same as any other Ubuntu system &#8211; server or desktop.</p>
<p>Whenever we make a fix to packages in Ubuntu, we&#8217;ll publish the same fix to Ubuntu Core, and systems can get that fix transactionally. In fact, updates to Ubuntu Core are even smaller than package updates because we only need to send the precise difference between the old and new versions, not the whole package. Of course, Ubuntu Core is in addition to all the current members of the Ubuntu family &#8211; desktop, server, and cloud images that use apt-get and debs, and all the many *buntu remixes which bring their particular shine to our community. You still get all the Ubuntu you like, and there&#8217;s a new snappy Core image on all the clouds for the sort of deployment where precision, specialism and security are the top priority.</p>
<p>This is the biggest new thing in Ubuntu since we committed to deliver a mobile phone platform, and it&#8217;s very delicious that it&#8217;s borne of exactly the same amazing technology that we&#8217;ve been perfecting for these last three years. I love it when two completely different efforts find underlying commonalities, and it&#8217;s wonderful to me that the work we&#8217;ve done for the phone, where carriers and consumers are the audience, might turn out to be so useful in the cloud, which is all about back-end infrastructure.</p>
<p>Why is this so interesting?</p>
<p>Transactional updates have lots of useful properties: if they are done well, you can know EXACTLY what&#8217;s running on a particular system, and you can coordinate updates with very high precision across thousands of instances in the cloud. You can run systems as canaries, getting updates ahead of other identical systems to see if they cause unexpected problems. You can roll updates back, because each version is a complete, independent image. That&#8217;s very nice indeed.</p>
<p>There have been interesting developments in the transaction systems field over the past few years. ChromeOS is updated transactionally, when you turn it on, it makes sure it&#8217;s running the latest version of the OS. CoreOS brought aspects of Chrome OS and Gentoo to the cloud, Red Hat has a beta of Atomic as a transactional version of RHEL, and of course Docker is a way of delivering apps transactionally too (it combines app and system files very neatly). Ubuntu Core raises the bar for certainty, extensibility and security in the transactional systems game. What I love about Ubuntu Core is the way it embraces transactional updates not just for the base system but for applications on top of the system as well. The system is just one layer that can be updated transactionally, and so are each of the apps on the system. You get an extensible platform that retains the lovely properties of transactionality but lets you choose exactly the capabilities you want for yourself, rather than having someone else force you to use a particular tool.</p>
<p>For example, in CoreOS, things like Fleet are built-in, you can&#8217;t opt out. In Ubuntu Core, we aim for a much smaller Core, and then enable you to install Docker or any other container system as a framework, with snappy. We&#8217;re working with all the different container vendors, and app systems, and container coordination systems, to help them make snappy versions of their tools. That way, you get the transactional semantics you want with the freedom to use whichever tools suit you. And the whole thing is smaller and more secure because we baked fewer assumptions into the core.</p>
<p>The snappy system is also designed to provide security guarantees across diverse environments. Because there is a single repository of frameworks and packages, and each of them has a digital fingerprint that cannot be faked, two people on opposite ends of the world can compare their systems and know that they are running exactly the same versions of the system and apps. Atomic might allow you to roll back, but it&#8217;s virtually impossible to customise the system for your own preferences rather than Red Hat&#8217;s, and still know you are running the same secure bits as anybody else.</p>
<p>Developers of snappy apps get much more freedom to bundle the exact versions of libraries that they want to use with their apps. It&#8217;s much easier to make a snappy package than a traditional Ubuntu package &#8211; just bundle up everything you want in one place, and ship it. We use strong application isolation to keep data confidential between apps. If you install a bad app, it only has access to the data you create with that app, not to data from other applications. This is a key piece of security that comes from our efforts to bring Ubuntu to the mobile market, where malware is a real problem today. And as a result, we can enable developers to go much faster &#8211; they can publish their app on whatever schedule suits them, regardless of the Ubuntu release cadence. Want the very latest app? Snappy makes that easiest.</p>
<p>This is also why I think snappy will result in much simpler systems management. Instead of having literally thousands of packages on your Ubuntu server, with tons of dependencies, a snappy system just has a single package for each actual app or framework that&#8217;s installed. I bet the average system on the cloud ends up with about three packages installed, total! Try this sort of output:</p>
<pre style="padding-left: 30px;">$ snappy info
release: ubuntu-core/devel
frameworks: docker, panamax
apps: owncloud</pre>
<p>That&#8217;s much easier to manage and reason about at scale. We recently saw how complicated things can get in the old packaging system, when Owncloud upstream wanted to remove the original packages of Owncloud from an old Ubuntu release. With snappy Ubuntu, Owncloud can publish exactly what they want you to use as a snappy package, and can update that for you directly, in a safe transactional manner with full support for rolling back. I think upstream developers are going to love being in complete control of their app on snappy Ubuntu Core.</p>
<pre style="padding-left: 30px;">$ sudo snappy install hello-world</pre>
<p>Welcome to a snappy new world!</p>
<p>Things here are really nice and simple:</p>
<pre style="padding-left: 30px;">$ snappy info
$ snappy build .
$ snappy install foo
$ snappy update foo
$ snappy rollback foo
$ snappy remove foo
$ snappy update-versions
$ snappy versions</pre>
<p>Just for fun, download the image and have a play. I&#8217;m delighted that Ubuntu Core is today&#8217;s Qemu Advent Calendar image too! Or launch it on Azure, coming soon to all the clouds.</p>
<p>It&#8217;s important for Ubuntu to continue to find new ways to bring free software to a wider audience. The way people think about software is changing, and I think Ubuntu Core becomes a very useful tool for people doing stuff at huge scale in the cloud. If you want crisp, purposeful, tightly locked down systems that are secure by design, Ubuntu Core and snappy packages are the right tool for the job. Running docker farms? Running transcode farms? I think you&#8217;ll like this very much!</p>
<p>We have the world&#8217;s biggest free software community because we find ways to recognise all kinds of contributions and to support people helping one another to bring their ideas to fruition. One of the goals of snappy was to reduce the overhead and bureaucracy of packaging software to make it incredibly easy for anybody to publish code they care about to other Ubuntu users. We have built a great community of developers using this toolchain for the phone, I think it&#8217;s going to be even better on the cloud where Ubuntu is already so popular. There is a lot to do in making the most of existing debs in the snappy environment, and I&#8217;m excited that there is a load of amazing software on github that can now flow more easily to Ubuntu users on any cloud.</p>
<p>Welcome to the family, Ubuntu Core!</p>
";}s:3:"wfw";a:1:{s:10:"commentrss";s:50:"http://www.markshuttleworth.com/archives/1434/feed";}s:5:"slash";a:1:{s:8:"comments";s:1:"6";}s:7:"summary";s:421:"Ubuntu Core brings the bulletproof update mechanism and application isolation security from the Ubuntu phone to the cloud. It creates the smallest, most secure rendition of Ubuntu ever! And it's really amazing as a platform for container-based deployment with tools like Docker. If you want the very latest goodness together with the traditional security of Ubuntu, in a lean package, Ubuntu Core is the platform for you.";s:12:"atom_content";s:9928:"<p>What if your cloud instances could be updated with the same certainty and precision as your mobile phone &#8211; with carrier grade assurance that an update applies perfectly or is not applied at all? What if your apps could be isolated from one another completely, so there&#8217;s no possibility that installing one app could break another, and stronger assurance that a compromise of one app won&#8217;t compromise the data from another? When we set out to build the Ubuntu Phone we took on the challenge of raising the bar for reliability and security in the mobile market. And today that same technology is coming to the cloud, in the form of <a title="Ubuntu Core uses the &quot;snappy&quot; package system for transactional updates of the system and apps" href="https://ubuntu.com/snappy">a new &#8220;snappy&#8221; image called Ubuntu Core</a>, which is in beta today on Azure and as a KVM image you can run on any Linux machine.</p>
<p><iframe src="//www.youtube.com/embed/BlcTDz9ogug" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"></iframe></p>
<p>This is in a sense the biggest break with tradition in 10 years of Ubuntu, because snappy Ubuntu Core doesn&#8217;t use debs or apt-get. We call it &#8220;snappy&#8221; because that&#8217;s the new bullet-proof mechanism for app delivery and system updates; it&#8217;s completely different to the traditional package-based Ubuntu server and desktop. The snappy system keeps each part of Ubuntu in a separate, read-only file, and does the same for each application. That way, developers can deliver everything they need to be confident their app will work exactly as they intend, and we can take steps to keep the various apps isolated from one another, and ensure that updates are always perfect. Of course, that means that apt-get won&#8217;t work, but that&#8217;s OK since developers can reuse debs to make their snappy apps, and the core system is exactly the same as any other Ubuntu system &#8211; server or desktop.</p>
<p>Whenever we make a fix to packages in Ubuntu, we&#8217;ll publish the same fix to Ubuntu Core, and systems can get that fix transactionally. In fact, updates to Ubuntu Core are even smaller than package updates because we only need to send the precise difference between the old and new versions, not the whole package. Of course, Ubuntu Core is in addition to all the current members of the Ubuntu family &#8211; desktop, server, and cloud images that use apt-get and debs, and all the many *buntu remixes which bring their particular shine to our community. You still get all the Ubuntu you like, and there&#8217;s a new snappy Core image on all the clouds for the sort of deployment where precision, specialism and security are the top priority.</p>
<p>This is the biggest new thing in Ubuntu since we committed to deliver a mobile phone platform, and it&#8217;s very delicious that it&#8217;s borne of exactly the same amazing technology that we&#8217;ve been perfecting for these last three years. I love it when two completely different efforts find underlying commonalities, and it&#8217;s wonderful to me that the work we&#8217;ve done for the phone, where carriers and consumers are the audience, might turn out to be so useful in the cloud, which is all about back-end infrastructure.</p>
<p>Why is this so interesting?</p>
<p>Transactional updates have lots of useful properties: if they are done well, you can know EXACTLY what&#8217;s running on a particular system, and you can coordinate updates with very high precision across thousands of instances in the cloud. You can run systems as canaries, getting updates ahead of other identical systems to see if they cause unexpected problems. You can roll updates back, because each version is a complete, independent image. That&#8217;s very nice indeed.</p>
<p>There have been interesting developments in the transaction systems field over the past few years. ChromeOS is updated transactionally, when you turn it on, it makes sure it&#8217;s running the latest version of the OS. CoreOS brought aspects of Chrome OS and Gentoo to the cloud, Red Hat has a beta of Atomic as a transactional version of RHEL, and of course Docker is a way of delivering apps transactionally too (it combines app and system files very neatly). Ubuntu Core raises the bar for certainty, extensibility and security in the transactional systems game. What I love about Ubuntu Core is the way it embraces transactional updates not just for the base system but for applications on top of the system as well. The system is just one layer that can be updated transactionally, and so are each of the apps on the system. You get an extensible platform that retains the lovely properties of transactionality but lets you choose exactly the capabilities you want for yourself, rather than having someone else force you to use a particular tool.</p>
<p>For example, in CoreOS, things like Fleet are built-in, you can&#8217;t opt out. In Ubuntu Core, we aim for a much smaller Core, and then enable you to install Docker or any other container system as a framework, with snappy. We&#8217;re working with all the different container vendors, and app systems, and container coordination systems, to help them make snappy versions of their tools. That way, you get the transactional semantics you want with the freedom to use whichever tools suit you. And the whole thing is smaller and more secure because we baked fewer assumptions into the core.</p>
<p>The snappy system is also designed to provide security guarantees across diverse environments. Because there is a single repository of frameworks and packages, and each of them has a digital fingerprint that cannot be faked, two people on opposite ends of the world can compare their systems and know that they are running exactly the same versions of the system and apps. Atomic might allow you to roll back, but it&#8217;s virtually impossible to customise the system for your own preferences rather than Red Hat&#8217;s, and still know you are running the same secure bits as anybody else.</p>
<p>Developers of snappy apps get much more freedom to bundle the exact versions of libraries that they want to use with their apps. It&#8217;s much easier to make a snappy package than a traditional Ubuntu package &#8211; just bundle up everything you want in one place, and ship it. We use strong application isolation to keep data confidential between apps. If you install a bad app, it only has access to the data you create with that app, not to data from other applications. This is a key piece of security that comes from our efforts to bring Ubuntu to the mobile market, where malware is a real problem today. And as a result, we can enable developers to go much faster &#8211; they can publish their app on whatever schedule suits them, regardless of the Ubuntu release cadence. Want the very latest app? Snappy makes that easiest.</p>
<p>This is also why I think snappy will result in much simpler systems management. Instead of having literally thousands of packages on your Ubuntu server, with tons of dependencies, a snappy system just has a single package for each actual app or framework that&#8217;s installed. I bet the average system on the cloud ends up with about three packages installed, total! Try this sort of output:</p>
<pre style="padding-left: 30px;">$ snappy info
release: ubuntu-core/devel
frameworks: docker, panamax
apps: owncloud</pre>
<p>That&#8217;s much easier to manage and reason about at scale. We recently saw how complicated things can get in the old packaging system, when Owncloud upstream wanted to remove the original packages of Owncloud from an old Ubuntu release. With snappy Ubuntu, Owncloud can publish exactly what they want you to use as a snappy package, and can update that for you directly, in a safe transactional manner with full support for rolling back. I think upstream developers are going to love being in complete control of their app on snappy Ubuntu Core.</p>
<pre style="padding-left: 30px;">$ sudo snappy install hello-world</pre>
<p>Welcome to a snappy new world!</p>
<p>Things here are really nice and simple:</p>
<pre style="padding-left: 30px;">$ snappy info
$ snappy build .
$ snappy install foo
$ snappy update foo
$ snappy rollback foo
$ snappy remove foo
$ snappy update-versions
$ snappy versions</pre>
<p>Just for fun, download the image and have a play. I&#8217;m delighted that Ubuntu Core is today&#8217;s Qemu Advent Calendar image too! Or launch it on Azure, coming soon to all the clouds.</p>
<p>It&#8217;s important for Ubuntu to continue to find new ways to bring free software to a wider audience. The way people think about software is changing, and I think Ubuntu Core becomes a very useful tool for people doing stuff at huge scale in the cloud. If you want crisp, purposeful, tightly locked down systems that are secure by design, Ubuntu Core and snappy packages are the right tool for the job. Running docker farms? Running transcode farms? I think you&#8217;ll like this very much!</p>
<p>We have the world&#8217;s biggest free software community because we find ways to recognise all kinds of contributions and to support people helping one another to bring their ideas to fruition. One of the goals of snappy was to reduce the overhead and bureaucracy of packaging software to make it incredibly easy for anybody to publish code they care about to other Ubuntu users. We have built a great community of developers using this toolchain for the phone, I think it&#8217;s going to be even better on the cloud where Ubuntu is already so popular. There is a lot to do in making the most of existing debs in the snappy environment, and I&#8217;m excited that there is a load of amazing software on github that can now flow more easily to Ubuntu users on any cloud.</p>
<p>Welcome to the family, Ubuntu Core!</p>
";}i:7;a:13:{s:5:"title";s:26:"OpenStack on a diet, redux";s:4:"link";s:45:"http://www.markshuttleworth.com/archives/1428";s:8:"comments";s:54:"http://www.markshuttleworth.com/archives/1428#comments";s:7:"pubdate";s:31:"Sat, 08 Nov 2014 15:39:49 +0000";s:2:"dc";a:1:{s:7:"creator";s:4:"mark";}s:8:"category";s:37:"cloudfree softwarecoreopenstackvalues";s:4:"guid";s:39:"http://www.markshuttleworth.com/?p=1428";s:11:"description";s:183:"OpenStack is big and hairy, but if we look at it through the filter of some key principles, it could be a lot more purposeful, a lot easier to comprehend and of a much higher quality.";s:7:"content";a:1:{s:7:"encoded";s:6031:"<p>Subhu <a href="http://www.subbu.org/blog/2014/11/openstack-on-diet">writes</a> that OpenStack&#8217;s blossoming project list comes at a cost to quality. I&#8217;d like to follow up with an even leaner approach based on <a title="A values-based approach to OpenStack &quot;core&quot;" href="https://docs.google.com/document/d/1rTlTPust0OAbo4Q4uR8mfVDXM8m_yeh2oR9mU5z-pmQ/edit?usp=sharing">an outline</a> drafted during the OpenStack Core discussions after ODS Hong Kong, a year ago.</p>
<p>The key ideas in that draft are:</p>
<p><em>Only call services &#8220;core&#8221; if the user can detect them.</em></p>
<p>How the cloud is deployed or operated makes no difference to a user. We want app developers to</p>
<p><em>Define both &#8220;core&#8221; and &#8220;common&#8221; services, but require only &#8220;core&#8221; services for a cloud that calls itself OpenStack compatible.</em></p>
<p>Separation of core and common lets us recognise common practice today, while also acknowledging that many ideas we&#8217;ve had in the past year or three are just 1.0 iterations, we don&#8217;t know which of them will stick any more than one could predict which services on any major public cloud will thrive and which will vanish over time. Signalling that something is &#8220;core&#8221; means it is something we commit to keeping around a long time. Signalling something is &#8220;common&#8221; means it&#8217;s widespread practice for it to be available in an OpenStack environment, but not a requirement.</p>
<p><em>Require that &#8220;common&#8221; services can be self-deployed.</em></p>
<p>Just as you can install a library or a binary in your home directory, you can run services for yourself in a cloud. Services do not have to be provided by the cloud infrastructure provider, they can usually be run by a user themselves, under their own account, as a series of VMs providing network services. Making it a requirement that users can self-provide a service before designating it common means that users can build on it; if a particular cloud doesn&#8217;t offer it, their users can self-provide it. All this means is that the common service itself builds on core services, though it might also depend on other common services which could be self-deployed in advance of it.</p>
<p><em>Require that &#8220;common&#8221; services have a public integration test suite that can be run by any user of a cloud to evaluate conformance of a particular implementation of the service.</em></p>
<p>For example, a user might point the test suite at HP Cloud to verify that the common service there actually conforms to the service test standard. Alternatively, the user who self-provides a common service in a cloud which does not provide it can verify that their self-deployed common service is functioning correctly. This also serves to expand the test suite for the core: we can self-deploy common services and run their test suites to exercise the core more thoroughly than Tempest could.</p>
<p><em>Keep the whole set as small as possible.</em></p>
<p>We know that small is beautiful; small is cleaner, leaner, more comprehensible, more secure, easier to test, likely to be more efficiently implemented, easier to attract developer participation. In general, if something can be cut from the core specification it should. &#8220;Common&#8221; should reflect common practice and can be arbitrarily large, and also arbitrarily changed.</p>
<p>In the light of those ideas, I would designate the following items from Subhu&#8217;s list as <strong>core OpenStack services</strong>:</p>
<ul>
<li>Keystone (without identity, nothing)</li>
<li>Nova (the basis for any other service is the ability to run processes somewhere)
<ul>
<li>Glance (hard to use Nova without it)</li>
</ul>
</li>
<li>Neutron (where those services run)
<ul>
<li>Designate (DNS is a core aspect of the network)</li>
</ul>
</li>
<li>Cinder (where they persist data)</li>
</ul>
<p>I would consider these to be <strong>common OpenStack services</strong>:</p>
<ul>
<li>SWIFT (widely deployed, can be self-provisioned with Cinder block backends)</li>
<li>Ceph RADOS-GW object storage (widely deployed as an implementation choice, common because it could be self-provided on Cinder block)</li>
<li>Horizon (widely deployed, but we want to encourage innovation in the dashboard)</li>
</ul>
<p>And these I would consider neither core nor common, though some of them are clearly on track there:</p>
<ul>
<li>Barbican (not widely implemented)</li>
<li>Ceilometer (internal implementation detail, can&#8217;t be common because it requires access to other parts)</li>
<li>Juju (not widely implemented)</li>
<li>Kite (not widely implemented)</li>
<li>HEAT (on track to become common if it can be self-deployed, besides, I eat controversy for breakfast)</li>
<li>MAAS (who cares how the cloud was built?)</li>
<li>Manila (not widely implemented, possibly core once solid, otherwise common once, err, common)</li>
<li>Sahara (not widely implemented, weird that we would want to hardcode one way of doing this in the project)</li>
<li>Triple-O (user doesn&#8217;t care how the cloud was deployed)</li>
<li>Trove (not widely implemented, might make it to &#8220;common&#8221; if widely deployed)</li>
<li>Tuskar (see <em>Ironic</em>)</li>
<li>Zaqar (not widely implemented)</li>
</ul>
<p>In the current DefCore discussions, the &#8220;layer&#8221; idea has been introduced. My concern is simple: how many layers make sense? End users don&#8217;t want to have to figure out what lots of layers mean. If we had &#8220;OpenStack HPC&#8221; and &#8220;OpenStack Scientific&#8221; and &#8220;OpenStack Genomics&#8221; layers, that would just be confusing. Let&#8217;s keep it simple &#8211; use &#8220;common&#8221; as a layer, but be explicit that it will change to reflect common practice (of course, anything in common is self-reinforcing in that new players will defer to norms and implement common services, thereby entrenching common unless new ideas make services obsolete).</p>
";}s:3:"wfw";a:1:{s:10:"commentrss";s:50:"http://www.markshuttleworth.com/archives/1428/feed";}s:5:"slash";a:1:{s:8:"comments";s:1:"0";}s:7:"summary";s:183:"OpenStack is big and hairy, but if we look at it through the filter of some key principles, it could be a lot more purposeful, a lot easier to comprehend and of a much higher quality.";s:12:"atom_content";s:6031:"<p>Subhu <a href="http://www.subbu.org/blog/2014/11/openstack-on-diet">writes</a> that OpenStack&#8217;s blossoming project list comes at a cost to quality. I&#8217;d like to follow up with an even leaner approach based on <a title="A values-based approach to OpenStack &quot;core&quot;" href="https://docs.google.com/document/d/1rTlTPust0OAbo4Q4uR8mfVDXM8m_yeh2oR9mU5z-pmQ/edit?usp=sharing">an outline</a> drafted during the OpenStack Core discussions after ODS Hong Kong, a year ago.</p>
<p>The key ideas in that draft are:</p>
<p><em>Only call services &#8220;core&#8221; if the user can detect them.</em></p>
<p>How the cloud is deployed or operated makes no difference to a user. We want app developers to</p>
<p><em>Define both &#8220;core&#8221; and &#8220;common&#8221; services, but require only &#8220;core&#8221; services for a cloud that calls itself OpenStack compatible.</em></p>
<p>Separation of core and common lets us recognise common practice today, while also acknowledging that many ideas we&#8217;ve had in the past year or three are just 1.0 iterations, we don&#8217;t know which of them will stick any more than one could predict which services on any major public cloud will thrive and which will vanish over time. Signalling that something is &#8220;core&#8221; means it is something we commit to keeping around a long time. Signalling something is &#8220;common&#8221; means it&#8217;s widespread practice for it to be available in an OpenStack environment, but not a requirement.</p>
<p><em>Require that &#8220;common&#8221; services can be self-deployed.</em></p>
<p>Just as you can install a library or a binary in your home directory, you can run services for yourself in a cloud. Services do not have to be provided by the cloud infrastructure provider, they can usually be run by a user themselves, under their own account, as a series of VMs providing network services. Making it a requirement that users can self-provide a service before designating it common means that users can build on it; if a particular cloud doesn&#8217;t offer it, their users can self-provide it. All this means is that the common service itself builds on core services, though it might also depend on other common services which could be self-deployed in advance of it.</p>
<p><em>Require that &#8220;common&#8221; services have a public integration test suite that can be run by any user of a cloud to evaluate conformance of a particular implementation of the service.</em></p>
<p>For example, a user might point the test suite at HP Cloud to verify that the common service there actually conforms to the service test standard. Alternatively, the user who self-provides a common service in a cloud which does not provide it can verify that their self-deployed common service is functioning correctly. This also serves to expand the test suite for the core: we can self-deploy common services and run their test suites to exercise the core more thoroughly than Tempest could.</p>
<p><em>Keep the whole set as small as possible.</em></p>
<p>We know that small is beautiful; small is cleaner, leaner, more comprehensible, more secure, easier to test, likely to be more efficiently implemented, easier to attract developer participation. In general, if something can be cut from the core specification it should. &#8220;Common&#8221; should reflect common practice and can be arbitrarily large, and also arbitrarily changed.</p>
<p>In the light of those ideas, I would designate the following items from Subhu&#8217;s list as <strong>core OpenStack services</strong>:</p>
<ul>
<li>Keystone (without identity, nothing)</li>
<li>Nova (the basis for any other service is the ability to run processes somewhere)
<ul>
<li>Glance (hard to use Nova without it)</li>
</ul>
</li>
<li>Neutron (where those services run)
<ul>
<li>Designate (DNS is a core aspect of the network)</li>
</ul>
</li>
<li>Cinder (where they persist data)</li>
</ul>
<p>I would consider these to be <strong>common OpenStack services</strong>:</p>
<ul>
<li>SWIFT (widely deployed, can be self-provisioned with Cinder block backends)</li>
<li>Ceph RADOS-GW object storage (widely deployed as an implementation choice, common because it could be self-provided on Cinder block)</li>
<li>Horizon (widely deployed, but we want to encourage innovation in the dashboard)</li>
</ul>
<p>And these I would consider neither core nor common, though some of them are clearly on track there:</p>
<ul>
<li>Barbican (not widely implemented)</li>
<li>Ceilometer (internal implementation detail, can&#8217;t be common because it requires access to other parts)</li>
<li>Juju (not widely implemented)</li>
<li>Kite (not widely implemented)</li>
<li>HEAT (on track to become common if it can be self-deployed, besides, I eat controversy for breakfast)</li>
<li>MAAS (who cares how the cloud was built?)</li>
<li>Manila (not widely implemented, possibly core once solid, otherwise common once, err, common)</li>
<li>Sahara (not widely implemented, weird that we would want to hardcode one way of doing this in the project)</li>
<li>Triple-O (user doesn&#8217;t care how the cloud was deployed)</li>
<li>Trove (not widely implemented, might make it to &#8220;common&#8221; if widely deployed)</li>
<li>Tuskar (see <em>Ironic</em>)</li>
<li>Zaqar (not widely implemented)</li>
</ul>
<p>In the current DefCore discussions, the &#8220;layer&#8221; idea has been introduced. My concern is simple: how many layers make sense? End users don&#8217;t want to have to figure out what lots of layers mean. If we had &#8220;OpenStack HPC&#8221; and &#8220;OpenStack Scientific&#8221; and &#8220;OpenStack Genomics&#8221; layers, that would just be confusing. Let&#8217;s keep it simple &#8211; use &#8220;common&#8221; as a layer, but be explicit that it will change to reflect common practice (of course, anything in common is self-reinforcing in that new players will defer to norms and implement common services, thereby entrenching common unless new ideas make services obsolete).</p>
";}i:8;a:13:{s:5:"title";s:14:"V is for Vivid";s:4:"link";s:45:"http://www.markshuttleworth.com/archives/1425";s:8:"comments";s:54:"http://www.markshuttleworth.com/archives/1425#comments";s:7:"pubdate";s:31:"Mon, 20 Oct 2014 13:22:24 +0000";s:2:"dc";a:1:{s:7:"creator";s:4:"mark";}s:8:"category";s:108:"ubuntu15.04codenameconnected devicesinternet of thingsinternet thingsiotsmart devicesvervetvividvivid vervet";s:4:"guid";s:39:"http://www.markshuttleworth.com/?p=1425";s:11:"description";s:272:"Our mascot for Ubuntu 15.04 is the Vivid Vervet; so named because of its goal of creating a vibrant, smart platform for Internet things, unleashing the free software community's imagination on the next wave of computing with a base that's familiar, secure and trustworthy.";s:7:"content";a:1:{s:7:"encoded";s:2773:"<p>Release week! Already! I wouldn&#8217;t call Trusty &#8216;vintage&#8217; just yet, but Utopic is poised to leap into the torrent stream. We&#8217;ve all managed to land our final touches to *buntu and are excited to bring the next wave of newness to users around the world. Glad to see the unicorn theme went down well, judging from the various desktops I see on G+.</p>
<p>And so it&#8217;s time to open the vatic floodgates and invite your thoughts and contributions to our soon-to-be-opened iteration next. Our ventrous quest to put GNU as you love it on phones is bearing fruit, with final touches to the first image in a new era of convergence in computing. From tiny devices to personal computers of all shapes and sizes to the ventose vistas of cloud computing, our goal is to make a platform that is useful, versal and widely used.</p>
<p>Who would have thought &#8211; a phone! Each year in Ubuntu brings something new. It is a privilege to celebrate our tenth anniversary milestone with such vernal efforts. New ecosystems are born all the time, and it&#8217;s vital that we refresh and renew our thinking and our product in vibrant ways. That we have the chance to do so is testament to the role Linux at large is playing in modern computing, and the breadth of vision in our virtual team.</p>
<p>To our fledgling phone developer community, for all your votive contributions and vocal participation, thank you! Let&#8217;s not be vaunty: we have a lot to do yet, but my oh my what we&#8217;ve made together feels fantastic. You are the vigorous vanguard, the verecund visionaries and our venerable mates in this adventure. Thank you again.</p>
<p>This verbose tract is a venial vanity, a chance to vector verbal vibes, a map of verdant hills to be climbed in months ahead. Amongst those peaks I expect we&#8217;ll find new ways to bring secure, free and fabulous opportunities for both developers and users. This is a time when every electronic thing can be an Internet thing, and that&#8217;s a chance for us to bring our platform, with its security and its long term support, to a vast and important field. In a world where almost any device can be smart, and also subverted, our shared efforts to make trusted and trustworthy systems might find fertile ground. So our goal this next cycle is to show the way past a simple Internet of things, to a world of Internet things-you-can-trust.</p>
<p>In my favourite places, the smartest thing around is a particular kind of monkey. Vexatious at times, volant and vogie at others, a vervet gets in anywhere and delights in teasing cats and dogs alike. As the upstart monkey in this business I can think of no better mascot. And so let&#8217;s launch our vicenary cycle, our verist varlet, the Vivid Vervet!</p>
";}s:3:"wfw";a:1:{s:10:"commentrss";s:50:"http://www.markshuttleworth.com/archives/1425/feed";}s:5:"slash";a:1:{s:8:"comments";s:1:"0";}s:7:"summary";s:272:"Our mascot for Ubuntu 15.04 is the Vivid Vervet; so named because of its goal of creating a vibrant, smart platform for Internet things, unleashing the free software community's imagination on the next wave of computing with a base that's familiar, secure and trustworthy.";s:12:"atom_content";s:2773:"<p>Release week! Already! I wouldn&#8217;t call Trusty &#8216;vintage&#8217; just yet, but Utopic is poised to leap into the torrent stream. We&#8217;ve all managed to land our final touches to *buntu and are excited to bring the next wave of newness to users around the world. Glad to see the unicorn theme went down well, judging from the various desktops I see on G+.</p>
<p>And so it&#8217;s time to open the vatic floodgates and invite your thoughts and contributions to our soon-to-be-opened iteration next. Our ventrous quest to put GNU as you love it on phones is bearing fruit, with final touches to the first image in a new era of convergence in computing. From tiny devices to personal computers of all shapes and sizes to the ventose vistas of cloud computing, our goal is to make a platform that is useful, versal and widely used.</p>
<p>Who would have thought &#8211; a phone! Each year in Ubuntu brings something new. It is a privilege to celebrate our tenth anniversary milestone with such vernal efforts. New ecosystems are born all the time, and it&#8217;s vital that we refresh and renew our thinking and our product in vibrant ways. That we have the chance to do so is testament to the role Linux at large is playing in modern computing, and the breadth of vision in our virtual team.</p>
<p>To our fledgling phone developer community, for all your votive contributions and vocal participation, thank you! Let&#8217;s not be vaunty: we have a lot to do yet, but my oh my what we&#8217;ve made together feels fantastic. You are the vigorous vanguard, the verecund visionaries and our venerable mates in this adventure. Thank you again.</p>
<p>This verbose tract is a venial vanity, a chance to vector verbal vibes, a map of verdant hills to be climbed in months ahead. Amongst those peaks I expect we&#8217;ll find new ways to bring secure, free and fabulous opportunities for both developers and users. This is a time when every electronic thing can be an Internet thing, and that&#8217;s a chance for us to bring our platform, with its security and its long term support, to a vast and important field. In a world where almost any device can be smart, and also subverted, our shared efforts to make trusted and trustworthy systems might find fertile ground. So our goal this next cycle is to show the way past a simple Internet of things, to a world of Internet things-you-can-trust.</p>
<p>In my favourite places, the smartest thing around is a particular kind of monkey. Vexatious at times, volant and vogie at others, a vervet gets in anywhere and delights in teasing cats and dogs alike. As the upstart monkey in this business I can think of no better mascot. And so let&#8217;s launch our vicenary cycle, our verist varlet, the Vivid Vervet!</p>
";}i:9;a:13:{s:5:"title";s:133:"Exchange controls in SA provide no economic guarantees of stability, but drive up the cost of cross-border relationships for everyone";s:4:"link";s:45:"http://www.markshuttleworth.com/archives/1409";s:8:"comments";s:54:"http://www.markshuttleworth.com/archives/1409#comments";s:7:"pubdate";s:31:"Wed, 01 Oct 2014 13:48:52 +0000";s:2:"dc";a:1:{s:7:"creator";s:4:"mark";}s:8:"category";s:49:"thoughtsconstitutionexchange controlssouth africa";s:4:"guid";s:39:"http://www.markshuttleworth.com/?p=1409";s:11:"description";s:516:"Judgement in my favour by the Supreme Court of Appeal on 1 October 2014 gives us the basis of a case in the Constitutional Court, which will challenge exchange control regulations and their implementation on constitutional grounds, with the goal of ensuring that South Africans can pursue their work and personal interests on a level global playing field for the first time. I'd like to thank the legal team who framed this case so eloquently - it was their case on principle, I was privileged to act as a plaintiff.";s:7:"content";a:1:{s:7:"encoded";s:4997:"<p><em>The South African Supreme Court of Appeal today <a title="Judgement in Shuttleworth vs SARB, Minister of Finance and President of SA " href="http://www.justice.gov.za/sca/judgments/sca_2014/sca2014-157ms.pdf">found in my favour</a> in a case about exchange controls. I will put the returned funds of <em>R250m plus interest</em> into a trust, to underwrite constitutional court cases on behalf of those who&#8217;s circumstances deny them the ability to be heard where the counterparty is the State. Here is a statement in full:</em></p>
<p>Exchange controls may appear to be targeted at a very small number of South Africans but their consequences are significant for all of us: especially those who are building relationships across Southern Africa such as migrant workers and small businesses seeking to participate in the growth of our continent. It is more expensive to work across South African borders than almost anywhere else on Earth, purely because the framework of exchange controls creates a cartel of banks authorized to act as the agents of the Reserve Bank in currency matters.</p>
<p>We all pay a very high price for that cartel, and derive no real benefit in currency stability or security for that cost.</p>
<p>Banks profit from exchange controls, but our economy is stifled, and the most vulnerable suffer most of all. Everything you buy is more expensive, South Africans are less globally competitive, and cross-border labourers, already vulnerable, pay the highest price of all &#8211; a shame we should work to address. The <a href="http://www.imf.org/external/pubs/ft/fandd/2007/06/gupta.htm">IMF found</a> that &#8220;A study in South Africa found that the comparative cost of an international transfer of 250 rand was the lowest when it went through a friend or a taxi driver and the highest when it went through a bank.&#8221; The World Bank found that &#8220;<a href="http://mg.co.za/article/2012-01-13-remittance-fees-punish-poor-africans">remittance fees punish poor Africans</a>&#8220;. South Africa scores worst of all, and according to the Payments Association of South Africa and the Reserve Bank, this is &#8220;..mostly related to the regulations that South African financial institutions needed to comply with, such as the Financial Intelligence Centre Act (Fica) and exchange-control regulations.&#8221;</p>
<p>Today&#8217;s ruling by the Supreme Court of Appeal found administrative and procedural fault with the Reserve Bank&#8217;s actions in regards to me, and returned the fees levied, for which I am grateful. This case, however, was not filed solely in pursuit of relief for me personally. We are now considering the continuation of the case in the Constitutional Court, to challenge exchange control on constitutional grounds and ensure that the benefits of today’s ruling accrue to all South Africans.</p>
<p>This is a time in our history when it will be increasingly important to defend constitutional rights. Historically, these are largely questions related to the balance of power between the state and the individual. For all the eloquence of our Constitution, it will be of little benefit to us all if it cannot be made binding on our government. It is expensive to litigate at the constitutional level, which means that such cases are imbalanced &#8211; the State has the resources to make its argument, but the individual often does not.</p>
<p>For that reason, I will commit the funds returned to me to today by the SCA to a trust run by veteran and retired constitutional scholars, judges and lawyers, that will selectively fund cases on behalf of those unable to do so themselves, where the counterparty is the state. The mandate of this trust will extend beyond South African borders, to address constitutional rights for African citizens at large, on the grounds that our future in South Africa is in every way part of that great continent.</p>
<p>This case is largely thanks to the team of constitutional lawyers who framed their arguments long before meeting me; I have been happy to play the role of model plaintiff and to underwrite the work, but it is their determination to correct this glaring flaw in South African government policy which inspired me to support them.</p>
<p>For that reason I will ask them to lead the establishment of this new trust and would like to thank them for their commitment to the principles on which our democracy is founded.</p>
<p>This case also has a very strong personal element for me, because it is exchange controls which make it impossible for me to pursue the work I am most interested in from within South Africa and which thus forced me to emigrate years ago. I pursue this case in the hope that the next generation of South Africans who want to build small but global operations will be able to do so without leaving the country. In our modern, connected world, and our modern connected country, that is the right outcome for all South Africans. <em><br />
</em></p>
<p>Mark</p>
";}s:3:"wfw";a:1:{s:10:"commentrss";s:50:"http://www.markshuttleworth.com/archives/1409/feed";}s:5:"slash";a:1:{s:8:"comments";s:1:"9";}s:7:"summary";s:516:"Judgement in my favour by the Supreme Court of Appeal on 1 October 2014 gives us the basis of a case in the Constitutional Court, which will challenge exchange control regulations and their implementation on constitutional grounds, with the goal of ensuring that South Africans can pursue their work and personal interests on a level global playing field for the first time. I'd like to thank the legal team who framed this case so eloquently - it was their case on principle, I was privileged to act as a plaintiff.";s:12:"atom_content";s:4997:"<p><em>The South African Supreme Court of Appeal today <a title="Judgement in Shuttleworth vs SARB, Minister of Finance and President of SA " href="http://www.justice.gov.za/sca/judgments/sca_2014/sca2014-157ms.pdf">found in my favour</a> in a case about exchange controls. I will put the returned funds of <em>R250m plus interest</em> into a trust, to underwrite constitutional court cases on behalf of those who&#8217;s circumstances deny them the ability to be heard where the counterparty is the State. Here is a statement in full:</em></p>
<p>Exchange controls may appear to be targeted at a very small number of South Africans but their consequences are significant for all of us: especially those who are building relationships across Southern Africa such as migrant workers and small businesses seeking to participate in the growth of our continent. It is more expensive to work across South African borders than almost anywhere else on Earth, purely because the framework of exchange controls creates a cartel of banks authorized to act as the agents of the Reserve Bank in currency matters.</p>
<p>We all pay a very high price for that cartel, and derive no real benefit in currency stability or security for that cost.</p>
<p>Banks profit from exchange controls, but our economy is stifled, and the most vulnerable suffer most of all. Everything you buy is more expensive, South Africans are less globally competitive, and cross-border labourers, already vulnerable, pay the highest price of all &#8211; a shame we should work to address. The <a href="http://www.imf.org/external/pubs/ft/fandd/2007/06/gupta.htm">IMF found</a> that &#8220;A study in South Africa found that the comparative cost of an international transfer of 250 rand was the lowest when it went through a friend or a taxi driver and the highest when it went through a bank.&#8221; The World Bank found that &#8220;<a href="http://mg.co.za/article/2012-01-13-remittance-fees-punish-poor-africans">remittance fees punish poor Africans</a>&#8220;. South Africa scores worst of all, and according to the Payments Association of South Africa and the Reserve Bank, this is &#8220;..mostly related to the regulations that South African financial institutions needed to comply with, such as the Financial Intelligence Centre Act (Fica) and exchange-control regulations.&#8221;</p>
<p>Today&#8217;s ruling by the Supreme Court of Appeal found administrative and procedural fault with the Reserve Bank&#8217;s actions in regards to me, and returned the fees levied, for which I am grateful. This case, however, was not filed solely in pursuit of relief for me personally. We are now considering the continuation of the case in the Constitutional Court, to challenge exchange control on constitutional grounds and ensure that the benefits of today’s ruling accrue to all South Africans.</p>
<p>This is a time in our history when it will be increasingly important to defend constitutional rights. Historically, these are largely questions related to the balance of power between the state and the individual. For all the eloquence of our Constitution, it will be of little benefit to us all if it cannot be made binding on our government. It is expensive to litigate at the constitutional level, which means that such cases are imbalanced &#8211; the State has the resources to make its argument, but the individual often does not.</p>
<p>For that reason, I will commit the funds returned to me to today by the SCA to a trust run by veteran and retired constitutional scholars, judges and lawyers, that will selectively fund cases on behalf of those unable to do so themselves, where the counterparty is the state. The mandate of this trust will extend beyond South African borders, to address constitutional rights for African citizens at large, on the grounds that our future in South Africa is in every way part of that great continent.</p>
<p>This case is largely thanks to the team of constitutional lawyers who framed their arguments long before meeting me; I have been happy to play the role of model plaintiff and to underwrite the work, but it is their determination to correct this glaring flaw in South African government policy which inspired me to support them.</p>
<p>For that reason I will ask them to lead the establishment of this new trust and would like to thank them for their commitment to the principles on which our democracy is founded.</p>
<p>This case also has a very strong personal element for me, because it is exchange controls which make it impossible for me to pursue the work I am most interested in from within South Africa and which thus forced me to emigrate years ago. I pursue this case in the hope that the next generation of South Africans who want to build small but global operations will be able to do so without leaving the country. In our modern, connected world, and our modern connected country, that is the right outcome for all South Africans. <em><br />
</em></p>
<p>Mark</p>
";}}s:7:"channel";a:8:{s:5:"title";s:17:"Mark Shuttleworth";s:4:"link";s:31:"http://www.markshuttleworth.com";s:11:"description";s:22:"Planetary perspectives";s:13:"lastbuilddate";s:31:"Wed, 11 Nov 2015 19:23:58 +0000";s:8:"language";s:5:"en-US";s:2:"sy";a:2:{s:12:"updateperiod";s:6:"hourly";s:15:"updatefrequency";s:1:"1";}s:9:"generator";s:29:"http://wordpress.org/?v=4.3.1";s:7:"tagline";s:22:"Planetary perspectives";}s:9:"textinput";a:0:{}s:5:"image";a:0:{}s:9:"feed_type";s:3:"RSS";s:12:"feed_version";s:3:"2.0";s:5:"stack";a:0:{}s:9:"inchannel";b:0;s:6:"initem";b:0;s:9:"incontent";b:0;s:11:"intextinput";b:0;s:7:"inimage";b:0;s:13:"current_field";s:0:"";s:17:"current_namespace";b:0;s:5:"ERROR";s:0:"";s:19:"_CONTENT_CONSTRUCTS";a:6:{i:0;s:7:"content";i:1;s:7:"summary";i:2;s:4:"info";i:3;s:5:"title";i:4;s:7:"tagline";i:5;s:9:"copyright";}s:13:"last_modified";s:31:"Wed, 11 Nov 2015 19:23:58 GMT
";s:4:"etag";s:41:""6bc1e142ee9e18a923eb4e4c406103b4-gzip"
";}