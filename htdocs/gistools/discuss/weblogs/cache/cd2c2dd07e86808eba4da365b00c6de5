O:9:"MagpieRSS":20:{s:6:"parser";i:0;s:12:"current_item";a:0:{}s:5:"items";a:25:{i:0;a:6:{s:5:"about";s:123:"https://www.dreamhost.com/blog/2015/11/13/is-data-science-a-womans-world-a-qa-with-erin-boyle-data-scientist-at-stitch-fix/";s:5:"title";s:101:"DreamHost: Is Data Science a Woman’s World? A Q&amp;A with Erin Boyle, Data Scientist at Stitch Fix";s:4:"link";s:123:"https://www.dreamhost.com/blog/2015/11/13/is-data-science-a-womans-world-a-qa-with-erin-boyle-data-scientist-at-stitch-fix/";s:7:"content";a:1:{s:7:"encoded";s:8625:"<p><span>Data science can already predict the outcome of presidential elections or serve up better online advertising. But today, some experts are saying that it could also help equalize gender representation in the tech industry. Forty percent of degrees in statistics go to women, compared to only 18% of degrees in computer science, according to the </span><a href="https://www.washingtonpost.com/local/women-flocking-to-statistics-the-new-hot-high-tech-field-of-data-science/2014/12/19/f3e2e486-62ed-11e4-9fdc-d43b053ecb4d_story.html" target="_blank"><i><span>Washington Post</span></i></a><span>. So the </span><a href="https://www.dreamhost.com/blog/2015/10/22/so-you-want-to-be-part-of-the-data-science-revolution/" target="_blank"><span>explosion of data science careers</span></a><span> could be a great thing for women &#8212; who are generally underrepresented in STEM industries.</span></p>
<p><span>As a female data scientist at clothing company </span><a href="https://www.stitchfix.com/" target="_blank"><span>Stitch Fix</span></a><span>, Erin Boyle is at the forefront of this exciting shift. We caught up with her to ask about her career transition from academia (she has a PhD in physical chemistry from the University of Wisconsin) and her thoughts about the future of women in data science.</span></p>
<div id="attachment_12356" class="wp-caption aligncenter"><img class="size-full wp-image-12356" src="https://www.dreamhost.com/blog/wp-content/uploads/2015/11/erinboyle.jpg" alt="Data Scientist" width="337" height="337" /><p class="wp-caption-text">Source: LinkedIn</p></div>
<h4><b>How did you get into coding? What kind of training did you get?</b></h4>
<p><span>My PhD thesis focused on developing new techniques in laser spectroscopy. Most of that is experimental work. You interact lasers with a sample, and then light comes out. Based on the characteristics of that light, you can use something called the Time-Dependent Schrodinger Equation to model what’s happening in the sample at a quantum mechanical level, and learn how the molecules move and are structured. I used Python to do that modeling. </span></p>
<p><span>I got very little training. I took some online courses through Coursera, including a very highly regarded </span><a href="https://www.coursera.org/learn/machine-learning" target="_blank"><span>machine learning course</span></a><span> from Stanford professor Andrew Ng and a </span><a href="https://www.coursera.org/course/datasci" target="_blank"><span>data science course </span></a><span>from University of Washington professor Bill Howe. But the rest I learned by doing.</span></p>
<h4><b>I had no idea Python could be used to model quantum mechanics</b><span>.</span></h4>
<p><span>Python can do anything! One reason it’s become so popular it’s a very flexible language &#8212; you can apply it to a lot of different problems. You can use it for science or web programming or machine learning.</span></p>
<h4><b>How did you go from modeling quantum mechanics to working at a clothing company?</b></h4>
<p><span>I made a big change after grad school ended. I knew I wanted to leave academia, so I did a data science fellowship called </span><a href="http://insightdatascience.com/" target="_blank"><span>Insight</span></a><span>. There are a number of data science boot camps out there, but Insight is one of the oldest and most respected. It’s targeted specifically at people with PhDs, and it’s assumed you already have a fair amount of quantitative ability. However, it’s not just hard science people &#8212; there was an architect, a redwood tree researcher, and a few linguists in my group. (It’s notably also consistently half women.)</span></p>
<p><span>It’s a seven-week program where they help you do your own data science project and then demo it to companies around the Bay Area. Before I did Insight, I had spent four months looking for a job there, and couldn&#8217;t even get an interview. So it definitely helped out to go through them.</span></p>
<h4><b>How do you apply your coding skills in your current job?</b></h4>
<p><span>Stitch Fix actually has one of the largest data science teams in the world. There are 50 of us, which puts the ratio of data scientists to other full-time employees far higher than tech companies like Google and Facebook</span><b>.</b></p>
<p><span>The way Stitch Fix works is that they send each client a box with five clothing items. The client keeps the ones they like and return the rest, and shipping is free both ways. So their business model is based on the assumption that they can predict what people want well enough that they can still make money even while absorbing the shipping costs. They need to predict what stuff will fit a client and her style, and they need to get better with every box.</span></p>
<p><span>That’s how we started using data scientists, but then they realized that we are good at other stuff. For instance, I work on algorithms for inventory. My team looks at what features make a piece of clothing do better or worse for certain seasons or certain categories of customers.</span></p>
<p><span>What we’re doing now is really cool. I just found out that for the first time, my subteam is going to get to design a few shirts using data. Right now we’re just starting to mine the data and deciding how we want to apply it.</span></p>
<p><span>We could just make a shirt that’s an everywoman shirt that everyone likes. But we might do something different where we analyze the space of all our inventory currently and find gaps, like a type of clothing that isn’t made right now. Or we could look at the clients we have and figure out which are most underserved and figure out what features are most appreciated by those clients.</span></p>
<h4><b>What challenges face women in the tech industry? What can we do to make things easier for them?</b></h4>
<p><span>One of them is we remain incredibly outnumbered. The fraction of data scientists that are women in the Valley is something like 10-15%. Stitch Fix is closer to 20%, which is better, but it’s clear there’s still work to be done.</span></p>
<p><span>Studies show that gender bias affects women not just working in tech, but also in academia. The same work will be received less well when it’s given by a female author. If a man and a woman present together, people will assume that the man did the work even if the woman is the one is talking.</span></p>
<p><span>In both grad school and now, I have definitely felt being a woman in a man’s world. My research team in grad school was 11 men and me, and my team at Stitch Fix is 9 or 10 men and me. On the bright side, I think more people are aware of that now, and are fighting the issue. The No. 1 thing that tech companies need to be doing is training their employees on implicit bias. Men </span><i><span>and</span></i><span> women need training, since studies show women are just as sexist against other women as men are. We need to keep promoting the idea of discussing implicit bias even when it’s uncomfortable. Talking about it is the only thing that’s going to make it better.</span></p>
<p><span>I also can’t talk about being a woman in tech without pointing out that it’s worse as far as racial representation. Black and Hispanic people form an even smaller slice of the tech industry than women do, and it’s even less talked about.</span></p>
<h4><b>What would you recommend to a woman (or anyone else) interested in starting to learn how to code?</b></h4>
<p><span>Do a project. Decide a simple thing you want to prove to yourself. Read about how you download and store the data, and read about good ways to do statistics on it. Check out Coursera courses and data science blogs, and try a </span><a href="https://www.kaggle.com/" target="_blank"><span>Kaggle project</span></a><span>. </span><a href="http://stackoverflow.com/" target="_blank"><span>Stack Overflow</span></a><span> is a well-known resource for people who want to learn to code. There are various sister Stack websites for statistics and for Linux, etc.</span></p>
<p><span>Also, regarding the lack of representation of women in tech: go into the field anyway. It’s awesome! Most people are on your side. Even if they mess up occasionally, they really want to do the right thing. It’s worth it to try and talk about </span><b>the issues</b><span>, even if it’s sometimes uncomfortable.</span></p>
<p>&nbsp;</p>
<p><i><span>With contribution from </span></i><a href="http://read.hipporeads.com/"><i><span>Hippo Reads</span></i></a><i><span>.</span></i></p>";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-13T21:45:23+00:00";}s:12:"atom_content";s:8625:"<p><span>Data science can already predict the outcome of presidential elections or serve up better online advertising. But today, some experts are saying that it could also help equalize gender representation in the tech industry. Forty percent of degrees in statistics go to women, compared to only 18% of degrees in computer science, according to the </span><a href="https://www.washingtonpost.com/local/women-flocking-to-statistics-the-new-hot-high-tech-field-of-data-science/2014/12/19/f3e2e486-62ed-11e4-9fdc-d43b053ecb4d_story.html" target="_blank"><i><span>Washington Post</span></i></a><span>. So the </span><a href="https://www.dreamhost.com/blog/2015/10/22/so-you-want-to-be-part-of-the-data-science-revolution/" target="_blank"><span>explosion of data science careers</span></a><span> could be a great thing for women &#8212; who are generally underrepresented in STEM industries.</span></p>
<p><span>As a female data scientist at clothing company </span><a href="https://www.stitchfix.com/" target="_blank"><span>Stitch Fix</span></a><span>, Erin Boyle is at the forefront of this exciting shift. We caught up with her to ask about her career transition from academia (she has a PhD in physical chemistry from the University of Wisconsin) and her thoughts about the future of women in data science.</span></p>
<div id="attachment_12356" class="wp-caption aligncenter"><img class="size-full wp-image-12356" src="https://www.dreamhost.com/blog/wp-content/uploads/2015/11/erinboyle.jpg" alt="Data Scientist" width="337" height="337" /><p class="wp-caption-text">Source: LinkedIn</p></div>
<h4><b>How did you get into coding? What kind of training did you get?</b></h4>
<p><span>My PhD thesis focused on developing new techniques in laser spectroscopy. Most of that is experimental work. You interact lasers with a sample, and then light comes out. Based on the characteristics of that light, you can use something called the Time-Dependent Schrodinger Equation to model what’s happening in the sample at a quantum mechanical level, and learn how the molecules move and are structured. I used Python to do that modeling. </span></p>
<p><span>I got very little training. I took some online courses through Coursera, including a very highly regarded </span><a href="https://www.coursera.org/learn/machine-learning" target="_blank"><span>machine learning course</span></a><span> from Stanford professor Andrew Ng and a </span><a href="https://www.coursera.org/course/datasci" target="_blank"><span>data science course </span></a><span>from University of Washington professor Bill Howe. But the rest I learned by doing.</span></p>
<h4><b>I had no idea Python could be used to model quantum mechanics</b><span>.</span></h4>
<p><span>Python can do anything! One reason it’s become so popular it’s a very flexible language &#8212; you can apply it to a lot of different problems. You can use it for science or web programming or machine learning.</span></p>
<h4><b>How did you go from modeling quantum mechanics to working at a clothing company?</b></h4>
<p><span>I made a big change after grad school ended. I knew I wanted to leave academia, so I did a data science fellowship called </span><a href="http://insightdatascience.com/" target="_blank"><span>Insight</span></a><span>. There are a number of data science boot camps out there, but Insight is one of the oldest and most respected. It’s targeted specifically at people with PhDs, and it’s assumed you already have a fair amount of quantitative ability. However, it’s not just hard science people &#8212; there was an architect, a redwood tree researcher, and a few linguists in my group. (It’s notably also consistently half women.)</span></p>
<p><span>It’s a seven-week program where they help you do your own data science project and then demo it to companies around the Bay Area. Before I did Insight, I had spent four months looking for a job there, and couldn&#8217;t even get an interview. So it definitely helped out to go through them.</span></p>
<h4><b>How do you apply your coding skills in your current job?</b></h4>
<p><span>Stitch Fix actually has one of the largest data science teams in the world. There are 50 of us, which puts the ratio of data scientists to other full-time employees far higher than tech companies like Google and Facebook</span><b>.</b></p>
<p><span>The way Stitch Fix works is that they send each client a box with five clothing items. The client keeps the ones they like and return the rest, and shipping is free both ways. So their business model is based on the assumption that they can predict what people want well enough that they can still make money even while absorbing the shipping costs. They need to predict what stuff will fit a client and her style, and they need to get better with every box.</span></p>
<p><span>That’s how we started using data scientists, but then they realized that we are good at other stuff. For instance, I work on algorithms for inventory. My team looks at what features make a piece of clothing do better or worse for certain seasons or certain categories of customers.</span></p>
<p><span>What we’re doing now is really cool. I just found out that for the first time, my subteam is going to get to design a few shirts using data. Right now we’re just starting to mine the data and deciding how we want to apply it.</span></p>
<p><span>We could just make a shirt that’s an everywoman shirt that everyone likes. But we might do something different where we analyze the space of all our inventory currently and find gaps, like a type of clothing that isn’t made right now. Or we could look at the clients we have and figure out which are most underserved and figure out what features are most appreciated by those clients.</span></p>
<h4><b>What challenges face women in the tech industry? What can we do to make things easier for them?</b></h4>
<p><span>One of them is we remain incredibly outnumbered. The fraction of data scientists that are women in the Valley is something like 10-15%. Stitch Fix is closer to 20%, which is better, but it’s clear there’s still work to be done.</span></p>
<p><span>Studies show that gender bias affects women not just working in tech, but also in academia. The same work will be received less well when it’s given by a female author. If a man and a woman present together, people will assume that the man did the work even if the woman is the one is talking.</span></p>
<p><span>In both grad school and now, I have definitely felt being a woman in a man’s world. My research team in grad school was 11 men and me, and my team at Stitch Fix is 9 or 10 men and me. On the bright side, I think more people are aware of that now, and are fighting the issue. The No. 1 thing that tech companies need to be doing is training their employees on implicit bias. Men </span><i><span>and</span></i><span> women need training, since studies show women are just as sexist against other women as men are. We need to keep promoting the idea of discussing implicit bias even when it’s uncomfortable. Talking about it is the only thing that’s going to make it better.</span></p>
<p><span>I also can’t talk about being a woman in tech without pointing out that it’s worse as far as racial representation. Black and Hispanic people form an even smaller slice of the tech industry than women do, and it’s even less talked about.</span></p>
<h4><b>What would you recommend to a woman (or anyone else) interested in starting to learn how to code?</b></h4>
<p><span>Do a project. Decide a simple thing you want to prove to yourself. Read about how you download and store the data, and read about good ways to do statistics on it. Check out Coursera courses and data science blogs, and try a </span><a href="https://www.kaggle.com/" target="_blank"><span>Kaggle project</span></a><span>. </span><a href="http://stackoverflow.com/" target="_blank"><span>Stack Overflow</span></a><span> is a well-known resource for people who want to learn to code. There are various sister Stack websites for statistics and for Linux, etc.</span></p>
<p><span>Also, regarding the lack of representation of women in tech: go into the field anyway. It’s awesome! Most people are on your side. Even if they mess up occasionally, they really want to do the right thing. It’s worth it to try and talk about </span><b>the issues</b><span>, even if it’s sometimes uncomfortable.</span></p>
<p>&nbsp;</p>
<p><i><span>With contribution from </span></i><a href="http://read.hipporeads.com/"><i><span>Hippo Reads</span></i></a><i><span>.</span></i></p>";}i:1;a:6:{s:5:"about";s:35:"http://blog.pythonanywhere.com/121/";s:5:"title";s:104:"Python Anywhere: A beginner's guide to building a simple database-backed Flask website on PythonAnywhere";s:4:"link";s:35:"http://blog.pythonanywhere.com/121/";s:7:"content";a:1:{s:7:"encoded";s:63455:".jab-post img {
    border: 2px solid #eeeeee;
    padding: 5px;
}


<p>It's really easy to get started with Flask on PythonAnywhere, but if it's the first database-backed website you've ever built, it can feel a little daunting.  Here are some step-by-step instructions.  We'll build a really simple website -- just a page where anyone can leave a comment, with the comments stored in a database so that they last forever.  We'll also password-protect it so that it doesn't fill up with spam.  Here's what it will look like:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-final-result.png" /></p>
<p>We assume that you've got a little bit of basic Python and HTML knowledge -- for example, that you've done an online course in both of them.  Everything else we'll explain as we go along.  Let's get started!</p>
<h2>First steps</h2>
<p>Firstly, <a href="https://www.pythonanywhere.com/pricing/">create a PythonAnywhere account</a> if you haven't already.  A free "Beginner" account is enough for this tutorial.</p>
<p>Once you've signed up, you'll be taken to the "Consoles" tab:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-signed-in.png" /></p>
<p>You can dismiss the green welcome section at the top (use the "X" in its top right) -- everything there is accessible later from the "Help" link if you want to see it.</p>
<p>Now, click on the "Web" tab, and you'll be taken to a page where you can create a website:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-web-tab-empty.png" /></p>
<p>Click on the "Add a new web app" button to the left.  This will pop up a "Wizard" which allows you to configure your site.  If you have a free account, it will look like this:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-create-web-app-subdomain.png" /></p>
<p>If you decided to go for a paid account (thanks :-), then it will be a bit different:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-create-web-app-custom-domain.png" /></p>
<p>What we're doing on this page is specifying the host name in the URL that people will enter to see your website.  Free accounts can have one website, and it must be at <em>yourusername</em><code>.pythonanywhere.com</code>.  Paid accounts have the option of using their own custom host names in their URLs.</p>
<p>Once a website has been created, it's on that particular host name forever.  There are easy ways to create new websites that use the same code as an existing one, so if you create a website at <em>yourusername</em><code>.pythonanywhere.com</code> and then later want to move it to <code>www.yourowndomain.com</code> then that's pretty simple.</p>
<p>For now, we'll stick to the free option.  If you have a free account, just click the "Next" button, and if you have a paid one, click the checkbox next to the <em>yourusername</em><code>.pythonanywhere.com</code>, then click "Next".  This will take you on to the next page in the wizard.</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-create-web-app-choose-framework.png" /></p>
<p>This page is where we select the web framework we want to use.  This tutorial is for Flask, so click that one to go on to the next page.</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-create-web-app-choose-python-version.png" /></p>
<p>PythonAnywhere has various versions of Python installed, and each version has its associated version of Flask.  You can use different Flask versions to the ones we supply by default, but it's a little more tricky (you need to use a thing called a <em>virtualenv</em>), so for this tutorial we'll create a site using Python 3.4, with the default Flask version.  Click the option, and you'll be taken to the next page:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-create-web-app-choose-location.png" /></p>
<p>This page is asking you where you want to put your code.  Code on PythonAnywhere is stored in your home directory, <code>/home/</code><em>yourusername</em>, and in its subdirectories.  Now, Flask is a particularly lighweight framework, and you can write a simple Flask app in a single file.  PythonAnywhere is asking you where it should create a directory and put a single file with a really really simple website.  The default should be fine; it will create a subdirectory of your home directory called <code>mysite</code> and then will put the Flask code into a file called <code>flask_app.py</code> inside that directory.</p>
<p><em>(It will overwrite any other file with the same name, so if you're <em>not</em> using a new PythonAnywhere account, make sure that the file that it's got in the "Path" input box isn't one of your existing files.)</em></p>
<p>Once you're sure you're OK with the filename, click "Next".  There will be a brief pause while PythonAnywhere sets up the website, and then you'll be taken to the configuration page for the site:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-web-app-page-initial-site.png" /></p>
<p>You can see that the host name for the site is on the left-hand side, along with the "Add a new web app" button.  If you had multiple websites in your PythonAnywhere account, they would appear there too. But the one that's currently selected is the one you just created, and if you scroll down a bit you can see all of its settings.  We'll ignore most of these for the moment.</p>
<p>Before we do any coding, let's check out the site that PythonAnywhere has generated for us by default.  Right-click the host name, just after the words "Configuration for", and select the "Open in new tab" option; this will (of course) open your site in a new tab, which is useful when you're developing -- you can keep the site open in one tab and the code and other stuff in another, so it's easier to check out the effects of the changes you make.</p>
<p>Here's what it should look like.</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-initial-site-content.png" /></p>
<p>OK, it's pretty simple, but it's a start.  Let's take a look at the code!  Go back to the tab showing the website configuration (keeping the one showing your site open), and click on the directory titled "Source code" under the "Code" section:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-source-code-link.png" /></p>
<p>You'll be taken to a different page, showing the contents of the subdirectory of your home directory where your website's code lives:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-initial-source-dir.png" /></p>
<p>Click on the <code>flask_app.py</code> file, and you'll see the (really really simple) code that defines your Flask app.  It looks like this:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-initial-source-code.png" /></p>
<p>It's worth working through this line-by-line:</p>
<pre><code>from flask import Flask
</code></pre>
<p>As you'd expect, this loads the Flask framework so that you can use it.</p>
<pre><code>app = Flask(__name__)
</code></pre>
<p>This creates a Flask application to run your code.</p>
<pre><code>@app.route('/')
</code></pre>
<p>This decorator specifies that the following method defines what happens when someone goes to the location "/" on your site -- eg. if they go to <code>http://</code><em>yourusername</em><code>.pythonanywhere.com/</code>.  If you wanted to define what happens when they go to <code>http://</code><em>yourusername</em><code>.pythonanywhere.com/foo</code> then you'd use <code>@app.route('/foo')</code> instead.</p>
<pre><code>def hello_world():
    return 'Hello from Flask!'
</code></pre>
<p>This simple function just says that when someone goes to the location, they get back the (unformatted) text "Hello from Flask".</p>
<p>Try changing it -- for example, to "This is my new shiny Flask app".  Once you've made the change, click the "Save" button at the top to save the file to PythonAnywhere:</p>
<p><img src="http://blog.pythonanywhere.com/static/images/flask-tutorial-save-button.png" /></p>
<p>...then the reload button (to the far right, looking like two curved arrows making a circle), which stops your website and then starts it again with the fresh code.</p>
<p><img src="http://blog.pythonanywhere.com/static/images/flask-tutorial-reld-button.png" /></p>
<p>A "spinner" will appear next to the button to tell you that PythonAnywhere is working.  Once it has disappeared, go to the tab showing the website again, hit the page refresh button, and you'll see that it has changed as you'd expect.</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-first-site-modification.png" /></p>
<h2>Keeping our code under control</h2>
<p>OK, so we've seen the code, and we've changed it.  Now, professional developers don't change code without it being under some kind of source code control, so let's get that set up before we change anything else.</p>
<p><em>(Coding without source-code control is basically trying to program with one hand tied behind your back.  It's possible, but you're making stuff unnecessarily hard for yourself.  With a source-code control system like git, you can "commit" your code at any point to make a place that you can easily get back to.  So, before you embark on major changes, you can make sure that if you mess up, you can get back to where you were before you started: you'll be able to roll back to the last working version.  You can also do stuff like maintaining multiple parallel versions of your code -- say, in-development and live -- and, later on, you can easily collaborate with others.  git is actually quite simple to use for the basic stuff, though it can get daunting, if not terrifying, once you get into the more advanced features.  This tutorial will give the simple git commands you need to use for the basic checkpoint-rollback stuff, which is probably the most important bit.)</em></p>
<p>Back in the tab where you were editing the source code file, go back to the page showing the directory listing (by clicking the browser's "Back" button, or clicking the second-last item, <code>mysite</code>, in the "breadcrumb" listing separated by "&gt;" characters just above the editor).  In the directory listing page, click the "Open bash console here" link near the top right.</p>
<p><img src="http://blog.pythonanywhere.com/static/images/flask-tutorial-bash-console-here.png" /></p>
<p>This will start an in-browser command line where you can enter bash commands -- like git ones.</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-bash-console.png" /></p>
<p>Type in the <code>ls</code> command to list the contents of the directory:</p>
<p><img src="http://blog.pythonanywhere.com/static/images/flask-tutorial-bash-console-directory-listing.png" /></p>
<p>Right, let's get that under source code control.  Firstly, run the following two commands to configure git (replacing the stuff in the quotes appropriately):</p>
<pre><code>git config --global user.name "Your Name"
git config --global user.email "you@example.com"
</code></pre>
<p>You won't need to run that again on PythonAnywhere.  The next step is to create a source-code control "repository" in this directory, which is another simple command:</p>
<pre><code>git init
</code></pre>
<p>It should print out something like "Initialized empty Git repository in /home/yourusername/mysite/.git/"</p>
<p>Now, git is going to track all changes to files in this directory, but there's some stuff we want it to ignore -- temporary files created by Python and that kind of thing.  You do this by creating a file called ".gitignore".  Let's create one with some appropriate stuff for a Flask project in it; first, type this command:</p>
<pre><code>cat &gt; .gitignore
</code></pre>
<p>Anything you type into the console from now on will be added to the .gitignore file, so enter the following items, each on its own line:</p>
<pre><code>*.pyc
__pycache__
</code></pre>
<p>Once you've entered the last one, and hit return, then type Control-D.  This will go back to the bash "$" prompt.</p>
<p>Now we can ask git which files it can see.  Type</p>
<pre><code>git status
</code></pre>
<p>You'll see something like this:</p>
<pre><code>On branch master

Initial commit

Untracked files:
  (use "git add &lt;file&gt;..." to include in what will be committed)

        .gitignore
        flask_app.py

nothing added to commit but untracked files present (use "git add" to track)
</code></pre>
<p>So, it's saying that it doesn't see any changes to files that it is tracking -- which makes sense, because it hasn't been told to track any files yet.  But it can see two files that it isn't tracking yet -- our source file, and the <code>.gitignore</code> file we just created.  We want it to track those files, so we type:</p>
<pre><code>git add .gitignore flask_app.py
</code></pre>
<p>...to add them both.  Run <code>git status</code> again to see what it thinks of that, and you'll see something like this:</p>
<pre><code>On branch master

Initial commit

Changes to be committed:
  (use "git rm --cached &lt;file&gt;..." to unstage)

        new file:   .gitignore
        new file:   flask_app.py
</code></pre>
<p>So, now it knows about the files.  We want to make a commit now -- that is, we want to store the current state of the files in the repository so that we can get back to this state easily in the future.  Run this command to make a commit with an appropriate comment (the bit in the quotes):</p>
<pre><code>git commit -m"First commit of a really simple web app, with a .gitignore file"
</code></pre>
<p>It will print out something like this:</p>
<pre><code>[master (root-commit) 962d9c7] First commit of a really simple web app, with a .gitignore file
 2 files changed, 13 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 flask_app.py
</code></pre>
<p>Now we can see what the status is after that by running <code>git status</code> again:</p>
<pre><code>On branch master
nothing to commit, working directory clean
</code></pre>
<p>This means that as far as git is concerned, everything is in order.</p>
<p>Let's make some changes so that we can show how to roll them back; go back to the code editing window, by clicking "Back" to get to the directory listing, then clicking on the source file again.  Let's add a new "view" -- that is, a new URL that your web app will respond to.  Right now, it will only handle requests to <code>http://</code><em>yourusername</em><code>.pythonanywhere.com/</code> -- it will respond with a "not found" error if, for example, you go to <code>http://</code><em>yourusername</em><code>.pythonanywhere.com/wibble</code>.  (Check that in the tab where you're viewing your website.)</p>
<p>So let's add some code to handle the "/wibble" version.  Just put this at the bottom of the source code file:</p>
<pre><code>@app.route('/wibble')
def wibble():
    return 'This is my pointless new page'
</code></pre>
<p>Click the "Save" button again, then the reload button, and check out your site on the tab you kept open earlier.  Now, both <code>http://</code><em>yourusername</em><code>.pythonanywhere.com/</code> and <code>http://</code><em>yourusername</em><code>.pythonanywhere.com/wibble</code> will work, and will return different text.</p>
<p>So that was our first change, but it was pretty pointless.  Let's use git to undo it.  Click on the PythonAnywhere logo at the top right of the editor page, and you'll be taken to the main PythonAnywhere "Consoles" list.  You'll see that under "Your consoles" there's a thing called something like "Bash console 1904962".</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-consoles-list.png" /></p>
<p>When we opened the bash window earlier, it created a persistent console that will carry on running on PythonAnywhere, even when you're not viewing it.  (It may be reset due to server maintenance on our side, but in general it will keep running for a long time.)  So if you click on it, it will take you back to where you were before:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-bash-console-second-visit.png" /></p>
<p>Let's see what git thinks is going on, by running <code>git status</code> again.  You'll get something like this:</p>
<pre><code>On branch master

Changes not staged for commit:
  (use "git add &lt;file&gt;..." to update what will be committed)
  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)

        modified:   flask_app.py

no changes added to commit (use "git add" and/or "git commit -a")
</code></pre>
<p>So it can see that we changed the <code>flask_app.py</code> file.  That's the change we want to undo.  Usefully, it even tells us what to do to roll back a particular file.  Run this:</p>
<pre><code>git checkout -- flask_app.py
</code></pre>
<p>Run <code>git status</code> again, and you'll see that it no longer sees that file as changed:</p>
<pre><code>On branch master
nothing to commit, working directory clean
</code></pre>
<p>Let's confirm that our change really was un-done.  Click the PythonAnywhere logo again, then click on the "Files" tab next to the "Consoles" one.  That will take you to a directory listing for your home directory.  From there, click on the directory containing the code for your website (<code>mysite</code> if you stuck with the default) and you'll get a directory listing for that, which should contain the <code>flask_app.py</code> file.  Click on that, and you'll be taken to the editor again, and you'll see that the pointless change has been backed out for us.</p>
<p>Hopefully that was at least instructive in showing how you can easily back out changes if you make a mess of your program while developing :-)</p>
<p>Right, now let's start working on our app.</p>
<h2>A first cut with dummy data</h2>
<p>A web app in Flask, like most frameworks, consists of two kinds of file: source code, which is written in Python, and templates, which are written in an extended version of HTML.  Basically, the source code says what the web app should do, and the templates say how it should be displayed.</p>
<p>Our website is just going to be a bunch of comments, one after another, with a text box at the bottom so that people can add new ones.  So we'll start off by writing a template that displays some dummy data, and a view in the Python code that renders (that is, displays) the template.</p>
<p>The template first.  Click on the back button to get to your web app's source code directory listing page.  Templates, by convention, go in a subdirectory of your source code directory, inventively called <code>templates</code>.  So we can create that by typing "templates" into the "Enter new directory name" input near the top of the page, then clicking the "New" button next to it.  That will take us to the directory listing for the new directory, which of course is empty.  We'll create our template file in there; type "main_page.html" into the "Enter new file name" input, and click the "New" button next to it.  This will take you to the editor, which will of course be empty.</p>
<p>Type the following HTML into the editor:</p>
<pre><code>&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;My scratchboard page&lt;/title&gt;
    &lt;/head&gt;

    &lt;body&gt;

        &lt;div&gt;
            This is the first dummy comment.
        &lt;/div&gt;

        &lt;div&gt;
            This is the the second dummy comment.  It's no more interesting
            than the first.
        &lt;/div&gt;

        &lt;div&gt;
            This is the third dummy comment.  It's actually quite exciting!
        &lt;/div&gt;

        &lt;div&gt;
            &lt;form action="." method="POST"&gt;
                &lt;textarea name="contents" placeholder="Enter a comment"&gt;&lt;/textarea&gt;
                &lt;input type="submit" value="Post comment"&gt;
            &lt;/form&gt;
        &lt;/div&gt;

    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>Save it, and go back to the source code directory (you can use the breadcrumbs at the top of the page -- remember, they're the things separated by "&gt;"s) and edit your source code file.  We need to change it so that it renders that template.  To do that, replace the existing view, which looks like this:</p>
<pre><code>@app.route('/')
def hello_world():
    return 'This is my new shiny Flask app'
</code></pre>
<p>...with one that looks like this:</p>
<pre><code>@app.route("/")
def index():
    return render_template("main_page.html")
</code></pre>
<p>You also need to change the line at the top that says</p>
<pre><code>from flask import Flask
</code></pre>
<p>to import the <code>render_template</code> function too, like this:</p>
<pre><code>from flask import Flask, render_template
</code></pre>
<p>Also, just to help in case you've made a typo in the code somewhere, add this line just after the line that says <code>app = Flask(__name__)</code></p>
<pre><code>app.config["DEBUG"] = True
</code></pre>
<p>Now, save the file, reload the website, and refresh it in your other tab.  It'll look like this:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-app-with-dummy-content.png" /></p>
<p>That's pretty ugly, but it has our stuff from the template -- it all worked :-)</p>
<p>Let's take another checkpoint using git.  This time, to save us from having to click around all the time, we'll open up our bash console in a new browser tab.  Go back to your source code editor tab, right-click the PythonAnywhere logo, and select the option to open the link in a new tab.  In the new tab, click on the "Bash console" link under "Your consoles".  You should now have three tabs open -- the one where you're editing your source code, the one with the bash console, and the one viewing your site.</p>
<p>In the bash console, type <code>git status</code>.  It will say something like this:</p>
<pre><code>On branch master

Changes not staged for commit:
  (use "git add &lt;file&gt;..." to update what will be committed)
  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)

        modified:   flask_app.py

Untracked files:
  (use "git add &lt;file&gt;..." to include in what will be committed)

        templates/

no changes added to commit (use "git add" and/or "git commit -a")
</code></pre>
<p>This means that it can see that we've changed <code>flask_app.py</code>, and also that we've added a directory called <code>templates</code>.  It doesn't say anything about what's inside the <code>templates</code> directory.</p>
<p>We want to add both of these in one commit; taken together, the addition of a template and the code to render it make a single consistent change to our app, so it makes sense to bundle the two together.  So, add the new directory</p>
<pre><code>git add templates/
</code></pre>
<p>...and add the file</p>
<pre><code>git add flask_app.py
</code></pre>
<p>Run <code>git status</code> to see what the situation now is:</p>
<pre><code>On branch master
Changes to be committed:
  (use "git reset HEAD &lt;file&gt;..." to unstage)

        modified:   flask_app.py
        new file:   templates/main_page.html
</code></pre>
<p>Now it's telling us about the contents of the <code>templates</code> directory.  (If we'd put more files into it, then the <code>git add templates/</code> would have added all of them.)</p>
<p>So now we commit those changes to the repository in one, by running this command:</p>
<pre><code>git commit -m"A first cut at the template"
</code></pre>
<p>It will print out something like this:</p>
<pre><code>[master 4e8b505] A first cut at the template
 2 files changed, 34 insertions(+), 4 deletions(-)
 create mode 100644 templates/main_page.html
</code></pre>
<p>Now, it's useful to know what's happened in a repository in the past; so far we've done two commits.  What do they look like?  Run the command <code>git log</code> -- it will print out the revision history, something like this:</p>
<pre><code>commit 4e8b50560bb4ec32a273e3ad68faf1a8cb87fafa
Author: A PythonAnywhere dev &lt;support@pythonanywhere.com&gt;
Date:   Fri Oct 30 17:39:34 2015 +0000

    A first cut at the template

commit 962d9c7115a7169bcd6204b6c08911447cfd2e13
Author: A PythonAnywhere dev &lt;support@pythonanywhere.com&gt;
Date:   Fri Oct 30 16:24:54 2015 +0000

    First commit of a really simple web app, with a .gitignore file
</code></pre>
<p>You can see that there are two commits shown, with the most recent one at the top.  Those complicated hexadecimal numbers just after the word "commit" are unique identifiers for the specific checkpoints you've made to your code.  More advanced usage of git often involves using those identifiers to undo specific changes, or to pass sets of changes to other developers.  But we won't go into that here...</p>
<h2>A less ugly site</h2>
<p>So our change is committed.  Let's make the site look a bit prettier.  Go back to your source code tab.  Now we want to edit the template.  We could do that here, but let's open yet another tab so that we can switch between editing the different files easily.  Right-click on the source code directory in the breadcrumb trail, and open it in a new tab.  In the new tab, go to the <code>templates</code> subdirectory, then click on your <code>main_page.html</code> template file.</p>
<p>Now you have four tabs:</p>
<ul>
<li>The source code, <code>flask_app.py</code></li>
<li>The template, <code>main_page.html</code></li>
<li>The bash console for git</li>
<li>The web site itself.</li>
</ul>
<p>To make the site prettier, we'll use the popular <a href="http://getbootstrap.com/">Bootstrap</a> framework.  Inside the <code>&lt;head&gt;</code> section of your HTML, <em>before</em> the title, add this:</p>
<pre><code>&lt;meta charset="utf-8"&gt;
&lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
&lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;

&lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" integrity="sha512-dTfge/zgoMYpP7QbHy4gWMEGsbsdZeCXz7irItjcC3sPUFtf0kuFbDz/ixG7ArTxmDjLXDmezHubeNikyKGVyQ==" crossorigin="anonymous"&gt;
</code></pre>
<p>Save the file, then go to the tab that's showing your site, and hit the page refresh button there.  You'll see that the font has become a bit nicer, but it's still not super-pretty.</p>
<p><em>(Eagle-eyed readers will have spotted that this time we didn't have to click the "Reload" button in the editor.  For arcane technical reasons, you have to reload the web site every time you change Python code, but not when you change templates.)</em></p>
<p>Let's improve things a bit more.  In the template editor tab, add this at the start of the "Body" section:</p>
<pre><code>&lt;nav class="navbar navbar-inverse"&gt;
  &lt;div class="container"&gt;
    &lt;div class="navbar-header"&gt;
      &lt;button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar"&gt;
        &lt;span class="sr-only"&gt;Toggle navigation&lt;/span&gt;
        &lt;span class="icon-bar"&gt;&lt;/span&gt;
        &lt;span class="icon-bar"&gt;&lt;/span&gt;
        &lt;span class="icon-bar"&gt;&lt;/span&gt;
      &lt;/button&gt;
      &lt;a class="navbar-brand" href="#"&gt;My scratchpad&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/nav&gt;


&lt;div class="container"&gt;
</code></pre>
<p>...then, at the end of the body, just before the <code>&lt;/body&gt;</code> tag, add this:</p>
<pre><code>&lt;/div&gt;&lt;!-- /.container --&gt;
</code></pre>
<p>Next, for each of the</p>
<pre><code>&lt;div&gt;
</code></pre>
<p>lines containing our dummy comments, add <code>class="row"</code> before the close <code>&gt;</code>, like this:</p>
<pre><code>&lt;div class="row"&gt;
</code></pre>
<p>Also add the same to the <code>&lt;div&gt;</code> that contains the <code>&lt;form&gt;</code>.</p>
<p>For the <code>&lt;textarea&gt;</code> tag, add <code>class="form-control"</code>.</p>
<p>Go to the tab showing your page, and refresh -- it should look like this:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-app-with-dummy-content-styled.png" /></p>
<p>If it looks weird and ugly (or, at least, weirder and more ugly than that screenshot), check your HTML template and see if there are any obvious errors.  It's really worth spending some time trying to fix the errors yourself, as that's the best way to learn how things work, but if you really find yourself struggling, here's a complete copy of what should be in the template file so that you can copy and paste it into the editor:</p>
<pre><code>&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset="utf-8"&gt;
        &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
        &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;

        &lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" integrity="sha512-dTfge/zgoMYpP7QbHy4gWMEGsbsdZeCXz7irItjcC3sPUFtf0kuFbDz/ixG7ArTxmDjLXDmezHubeNikyKGVyQ==" crossorigin="anonymous"&gt;

        &lt;title&gt;My scratchboard page&lt;/title&gt;
    &lt;/head&gt;

    &lt;body&gt;
        &lt;nav class="navbar navbar-inverse"&gt;
          &lt;div class="container"&gt;
            &lt;div class="navbar-header"&gt;
              &lt;button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar"&gt;
                &lt;span class="sr-only"&gt;Toggle navigation&lt;/span&gt;
                &lt;span class="icon-bar"&gt;&lt;/span&gt;
                &lt;span class="icon-bar"&gt;&lt;/span&gt;
                &lt;span class="icon-bar"&gt;&lt;/span&gt;
              &lt;/button&gt;
              &lt;a class="navbar-brand" href="#"&gt;My scratchpad&lt;/a&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/nav&gt;

        &lt;div class="container"&gt;

            &lt;div class="row"&gt;
                This is the first dummy comment.
            &lt;/div&gt;

            &lt;div class="row"&gt;
                This is the the second dummy comment.  It's no more interesting
                than the first.
            &lt;/div&gt;

            &lt;div class="row"&gt;
                This is the third dummy comment.  It's actually quite exciting!
            &lt;/div&gt;

            &lt;div class="row"&gt;
                &lt;form action="." method="POST"&gt;
                    &lt;textarea class="form-control" name="contents" placeholder="Enter a comment"&gt;&lt;/textarea&gt;
                    &lt;input type="submit" value="Post comment"&gt;
                &lt;/form&gt;
            &lt;/div&gt;

        &lt;/div&gt;

    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>OK, so we have a reasonably pretty page.  Let's get that committed into our git repository!  Go to your Bash console tab, and run <code>git status</code>:</p>
<pre><code>On branch master
Changes not staged for commit:
  (use "git add &lt;file&gt;..." to update what will be committed)
  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)

        modified:   templates/main_page.html

no changes added to commit (use "git add" and/or "git commit -a")
</code></pre>
<p>It can see that we've just got changes to our template, so we add that file to the list of things to commit...</p>
<pre><code>git add templates/main_page.html
</code></pre>
<p>...then we commit it.</p>
<pre><code>git commit -m"Made the site prettier."
</code></pre>
<p>Run <code>git status</code> again to see that everything's properly committed, and <code>git log</code> to see that the new commit has been added to the start of the list.</p>
<h2>Sending and receiving data</h2>
<p>Let's go back to the tab showing our site.  Right now, if we type something into the text area for entering new comments, and click on the "Post comment" page, we'll get a weird error -- which makes perfect sense, as we haven't written any code to store anything.  Try it!  You'll get an error like this:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-method-not-allowed.png" /></p>
<p>What this error means is that we tried to send data to the page, but it's not configured to receive data, only to send it.  When a browser accesses a page, it sends a message which contains an item saying what "method" it wants to use to access it.  By convention, this is "GET" to view data, or "POST" to send data -- that's why the <code>&lt;form&gt;</code> tag in our template says <code>method="POST"</code>.  (Like everything in programming, it's actually a bit more complicated than that, but that's a good start :-)</p>
<p>Right now, our view only handles "GET" methods, because that's what Flask views do by default.  Let's fix that; it's really simple.  Go to the tab showing your Python code, and replace</p>
<pre><code>@app.route("/")
</code></pre>
<p>...with this:</p>
<pre><code>@app.route("/", methods=["GET", "POST"])
</code></pre>
<p>Save the file, hit the reload button in the editor, then go to the tab showing your page; click back to get away from the error page if it's still showing, then try to post a comment again.</p>
<p>Now you won't get an error, but it will just take you back to the page you were viewing before, and completely forget your comment.  Definitely a step forward, but not a very big one.</p>
<p>Let's start storing the comments that people send us.  We'll do it an easy way first, without using a database, then we'll add the database in later.</p>
<p>The easy way to store comments is just to do it in a variable inside the Python code.  This is not great for the long run, because every time we reload the website, it will stop the program serving the site and then start it again, so all of the comments will be lost.  Also, if you're on a paid plan, you might have multiple processes running your code to handle your site (free plans have only one process for the whole site because they're free, paid plans can have lots so that they can handle more simultaneous viewers) and each process will have different sets of comments.  So we can't use the variable-based version for the long run, but as a step forward it's definitely worthwhile :-)</p>
<p>First, let's define the variable.  In the source code tab, add this in between the code that switches debug mode on, and the <code>@app.route</code> decorator:</p>
<pre><code>comments = []
</code></pre>
<p>Next, change the contents of the <code>index</code> function so that it looks like this:</p>
<pre><code>@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "GET":
        return render_template("main_page.html", comments=comments)

    comments.append(request.form["contents"])
    return redirect(url_for('index'))
</code></pre>
<p>Line-by-line, this means:</p>
<pre><code>@app.route("/", methods=["GET", "POST"])
</code></pre>
<p>Specifies that the following function defines the view for the "/" URL, and that it accepts both "GET" and "POST" requests.</p>
<pre><code>def index():
</code></pre>
<p>The name of the view function, of course</p>
<pre><code>    if request.method == "GET":
        return render_template("main_page.html", comments=comments)
</code></pre>
<p>If the request we're currently processing is a "GET" one, the viewer just wants to see the page, so we render the template.  We've added an extra parameter to the call to <code>render_template</code> -- the <code>comments=comments</code> bit.  This means that the list of comments that we've defined as a variable further up will be available inside our template; we'll update that to use the list in a moment.</p>
<p>If the request isn't a "GET" (and so, we know it's a "POST" -- someone's clicked the "Post comment" button) then the next bit is executed:</p>
<pre><code>    comments.append(request.form["contents"])
</code></pre>
<p>This extracts the stuff that was typed into the textarea in the page from the browser's request; we know it's in a thing called <code>contents</code> because that was the name we gave the textarea in the template:</p>
<pre><code>&lt;textarea class="form-control" name="contents" placeholder="Enter a comment"&gt;&lt;/textarea&gt;
</code></pre>
<p>Once we've extracted the comment contents from the request, we add it to the list.  Finally, once that's been stored, we send a message back to the browser saying "Please request this page again, this time using a 'GET' method", so that the user can see the results of their post:</p>
<pre><code>    return redirect(url_for('index'))
</code></pre>
<p>We just need to make one more change in our code: we've used a bunch of new Flask functions and so we need to import them.  Change</p>
<pre><code>from flask import Flask, render_template
</code></pre>
<p>to this:</p>
<pre><code>from flask import Flask, redirect, render_template, request, url_for
</code></pre>
<p>Save the file, then hit the reload button in the editor.  Go to the tab showing your site, and have a play... unfortunately it still won't do anything, even when you post a comment!  This is because although we've added code to accept incoming comments, we're not doing anything in the template to display them.   So let's fix that.</p>
<p>Go to the tab where you're editing your template, and get rid of the three dummy comments:</p>
<pre><code>&lt;div class="row"&gt;
    This is the first dummy comment.
&lt;/div&gt;

&lt;div class="row"&gt;
    This is the the second dummy comment.  It's no more interesting
    than the first.
&lt;/div&gt;

&lt;div class="row"&gt;
    This is the third dummy comment.  It's actually quite exciting!
&lt;/div&gt;
</code></pre>
<p>In their place, we'll put a loop in the Flask template language that will iterate over all of the comments that we passed in to it in the <code>render_template</code> code in our Python code, and put in a <code>&lt;div&gt;</code> for each of them:</p>
<pre><code>{% for comment in comments %}
    &lt;div class="row"&gt;
        {{ comment }}
    &lt;/div&gt;
{% endfor %}
</code></pre>
<p>This should be pretty clear.  Commands in the Flask template language, like <code>for</code> and <code>endfor</code> go inside <code>{%</code>..<code>%}</code>, and then you can also use <code>{{</code>..<code>}}</code> and a variable to insert the value of the variable at the current point.</p>
<p>Now, save the file, and go to the tab showing your site.  Hit the page refresh button -- you'll see that the dummy comments have gone, and if you posted some comments while you were trying it out before you updated the template, you'll see those have been added instead!  Try adding a new new comments; they'll appear as soon as you post them.</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-app-with-in-memory-comments.png" /></p>
<p>If things don't work, try to debug it.  Check for typos in your code, and see if there are any errors displayed.  If the worst comes to the worst and you really can't work out what you mis-typed, here's the code that you should have:</p>
<p>Python:</p>
<pre><code>from flask import Flask, redirect, render_template, request, url_for

app = Flask(__name__)
app.config["DEBUG"] = True

comments = []

@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "GET":
        return render_template("main_page.html", comments=comments)

    comments.append(request.form["contents"])
    return redirect(url_for('index'))
</code></pre>
<p>Template:</p>
<pre><code>&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset="utf-8"&gt;
        &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
        &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;

        &lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" integrity="sha512-dTfge/zgoMYpP7QbHy4gWMEGsbsdZeCXz7irItjcC3sPUFtf0kuFbDz/ixG7ArTxmDjLXDmezHubeNikyKGVyQ==" crossorigin="anonymous"&gt;

        &lt;title&gt;My scratchboard page&lt;/title&gt;
    &lt;/head&gt;

    &lt;body&gt;
        &lt;nav class="navbar navbar-inverse"&gt;
          &lt;div class="container"&gt;
            &lt;div class="navbar-header"&gt;
              &lt;button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar"&gt;
                &lt;span class="sr-only"&gt;Toggle navigation&lt;/span&gt;
                &lt;span class="icon-bar"&gt;&lt;/span&gt;
                &lt;span class="icon-bar"&gt;&lt;/span&gt;
                &lt;span class="icon-bar"&gt;&lt;/span&gt;
              &lt;/button&gt;
              &lt;a class="navbar-brand" href="#"&gt;My scratchpad&lt;/a&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/nav&gt;

        &lt;div class="container"&gt;

            {% for comment in comments %}
                &lt;div class="row"&gt;
                    {{ comment }}
                &lt;/div&gt;
            {% endfor %}

            &lt;div class="row"&gt;
                &lt;form action="." method="POST"&gt;
                    &lt;textarea class="form-control" name="contents" placeholder="Enter a comment"&gt;&lt;/textarea&gt;
                    &lt;input type="submit" value="Post comment"&gt;
                &lt;/form&gt;
            &lt;/div&gt;

        &lt;/div&gt;

    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>So, if everything's working OK, it's probably time to commit the changes.  Over to the Bash console tab, and run <code>git status</code> yet again:</p>
<pre><code>On branch master
Changes not staged for commit:
  (use "git add &lt;file&gt;..." to update what will be committed)
  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)

        modified:   flask_app.py
        modified:   templates/main_page.html

no changes added to commit (use "git add" and/or "git commit -a")
</code></pre>
<p>This time, just for a change, let's add our files to the list of files to commit, and commit them in one go.  This doesn't work if you've created a new file, but as we've only modified existing ones, it's an option.  We just add an <code>a</code> before the <code>m</code> in the <code>git commit</code> command to say "add files":</p>
<pre><code>git commit -am"Replaced dummy comments with some in-memory storage"
</code></pre>
<p>Once again, run <code>git status</code> to confirm that everything's now properly synchronized up, and <code>git log</code> to see your new commit in the history for the repository.</p>
<h2>Password protection</h2>
<p>So, we have a page where random people on the Internet can add comments.  We all know what the Internet is like, and this is going to fill up with ads for fake Rolexes and dodgy pharmaceuticals pretty rapidly if we leave it open to the world.  So let's add some password protection.  PythonAnywhere provides this for us.</p>
<p>To activate it, go to any of your tabs, right-click the PythonAnywhere to open the consoles page in a new browser tab, then click on the "Web" tab.  Make sure your website is selected on the left-hand side, then scroll to the bottom of the page.  Just above the big red "delete" button there's a section titled "Password protection".  Enter a username and a password here, and switch the toggle above those fields to "Enabled".  Scroll up to the top of the page again, and click the big green "Reload" button.</p>
<p>Now head over to the tab where you're viewing your website, and refresh the page.  This time you should be prompted for a password.  You only need to enter it this one time for this browser session, so it won't get in our way later on -- but it will keep the spammers at bay...  Once this is all done, you can close the browser tab where you set the password.</p>
<h2>Bring on the database</h2>
<p>Now it's time to add a database in to the mix!  You've probably already noticed the problem that adding one will solve; when you reloaded your website as part of enabling the password protection, all of your comments disappeared.  So right now we have a site that will lose all of its data every time you reload it -- which means, of course, every time you change the code.   Not ideal.</p>
<p>We could store the comments in a simple file -- and that would work fine for a basic site like this, but would become increasingly hard to maintain as we added new stuff in the future.  Databases were designed to keep structured data in an easy-to-maintain, easy-to manage fashion, and that's why we're going to use one.</p>
<p>There are many database programs used for web apps; some examples are:</p>
<ul>
<li>SQLite, a simple lightweight database that keeps everything in a specially-formatted file on your disk.  Not super-high-performance, but popular because it's so simple.</li>
<li>MySQL, which runs as a separate server process to which programs running on other machines can connect, storing data on the disks of the machine where it's running.  Fairly simple, pretty powerful.  Probably the most popular option.</li>
<li>PostgreSQL (for historical reasons, normally just called Postgres), which runs as a server, like MySQL, and is better with larger datasets.  Growing in popularity, but needs a bit more server power to run.</li>
<li>MongoDB, which allows you to store your data in a less-structured way than SQL databases like the previous three.  Also server-based.  New, slightly oddball -- the hipster option.</li>
</ul>
<p>SQLite is pretty slow on PythonAnywhere, and doesn't scale well for larger sites anyway.  Postgres is a paid feature on PythonAnywhere because of its larger server power requirements, and we don't have built-in support for MongoDB.  So we're going to use MySQL.</p>
<p>One convenient thing about modern database programming, however, is that to a certain degree you don't need to worry about which database you're actually using.  There are database interface libraries called Object-Relational Mappers (ORMs), which make it possible (most of the time) to use the same code regardless of the underlying database.  We're going to use one called SQLAlchemy, which works well with Flask.</p>
<p>Right, enough background.  Let's create a MySQL database!  In your tab where you're editing the Python source code, right-click on the PythonAnywhere logo and open the page in a new tab.  On the "Consoles" page that appears, click on the "Databases" tab to the far right.  You'll wind up here:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-databases-tab-empty.png" /></p>
<p>At the top, under "Connecting", you'll see the details you'll need to connect to the MySQL server associated with your account.  Next is a list of MySQL databases, which, as you haven't created any, is of course empty.  And at the bottom there's a space to enter a MySQL password.  The password is needed to connect to the MySQL server so that other people can't connect to your one, and initially it's unset.  Enter a new password here; make it something different to the one you use to log in to PythonAnywhere, because this database password will have to exist in your Python code (so that it can connect to your server), so it's more secure to use a different one.  Make a note of the password you've chosen, and once you've entered it twice in the appropriate fields, click the "Set MySQL password" button.  You'll come back to the "Databases" tab, but now some extra options will have appeared:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-databases-tab-after-set-password.png" /></p>
<p>So now we have a database called <em>yourusername</em><code>$default</code>, and an option to create a database.  In general, it's good practice to have a separate database for each website you're working on to keep everything nicely separated.  Go to the "Create database" section in the middle of the page, and create one, giving it the name "comments":</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-databases-tab-create-database.png" /></p>
<p>Once you've clicked the "Create" button, you'll see it's been added to the list that previously showed the <em>yourusername</em><code>$default</code> one:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-databases-tab-created-database-list.png" /></p>
<p>You can see that the database name is slightly different to the simple <code>comments</code> that you specified -- it's got your username and a dollar before it.  (If your username is longer than 16 characters, it will be the username truncated to 16 characters.)  This is simply to make sure that the name doesn't clash with any other users' databases that happen to be on the same server.</p>
<p>OK, so now we have a database.  Let's add some code to connect to it!  Leave the databases page open, and switch back to the tab where you have your Python code.  Just after the lines that say:</p>
<pre><code>app = Flask(__name__)
app.config["DEBUG"] = True
</code></pre>
<p>...add the following code to configure the database connection:</p>
<pre><code>SQLALCHEMY_DATABASE_URI = "mysql+mysqlconnector://{username}:{password}@{hostname}/{databasename}".format(
    username="&lt;the username from the 'Databases' tab&gt;",
    password="&lt;the password you set on the 'Databases' tab&gt;",
    hostname="&lt;the database host address from the 'Databases' tab&gt;",
    databasename="&lt;the database name you chose, probably yourusername$comments&gt;",
)
app.config["SQLALCHEMY_DATABASE_URI"] = SQLALCHEMY_DATABASE_URI
app.config["SQLALCHEMY_POOL_RECYCLE"] = 299
</code></pre>
<p>You need to change the values we set for <code>username</code>, <code>hostname</code> and <code>databasename</code> to the values from the "Databases" tab, and change the <code>password</code> to the one you set there earlier.  (All of these are without the <code>&lt;&gt;</code> angle brackets, of course -- those are just there in the code above to highlight things you need to change.)</p>
<p>The first of these commands sets a variable to the specifically-formatted string SQLAlchemy needs to connect to your database.  The second stashes that away in Flask's application configuration settings.</p>
<p>The third sets an importand database connection configuration parameter, which you don't need to know the details of (though the following sidebar explains it in case you're interested :-)</p>
<p><em>Sidebar: connection timeouts.  Opening a connection from your website code to a MySQL server takes a small amount of time.  If you opened one for every hit on your website, it would be slightly slower.  If your site was really busy, the aggregate of all of the small amounts of time opening connections could add up to quite a slowdown.  To avoid this, SQLAlchemy operates a "connection pool".  It keeps a set of connections to the database, and re-uses them.  When you want a connection, it gives you one from the pool, creating a new one if the pool is empty, and when you're done with it, the connection is returned to the pool for future reuse.  However, in order to stop people from hogging database connections, MySQL servers close unused connections after a particular amount of time.  On PythonAnywhere, this timeout is set to 300 seconds.  If your site is busy and your connections are always busy, this doesn't matter.  But if it's not, a connection in the pool might be closed by the server because it wasn't being used.  The <code>SQLALCHEMY_POOL_RECYCLE</code> variable is set to 299 to tell SQLAlchemy that it should throw away connections that haven't been used for 299 seconds, so that it doesn't give them to you and cause your code to crash because it's trying to use a connection that has already been closed by the server.</em></p>
<p>So that's the code that configures our database connection; now we need some code to actually connect to it!  Put this just after the code you just added:</p>
<pre><code>db = SQLAlchemy(app)
</code></pre>
<p>This simply creates a SQLAlchemy object using the connections we put into the Flask app's config.  We need to add an extra import statement to the start of our code to make this work, just after the other import that imports stuff from Flask:</p>
<pre><code>from flask.ext.sqlalchemy import SQLAlchemy
</code></pre>
<p>Right, we've added some code to connect to the database.  Let's sanity-check it and make sure we haven't made any silly typos; hit the button to reload your website, and refresh the page in the other tab where you're viewing it.  If all is OK, you should get a site that behaves just like it did before.  If there's a problem, Flask should tell you what it is.</p>
<p>Once you've got everything working, go to the console where you've been doing git stuff, and use <code>git commit</code> to save a checkpoint.</p>
<p>Next, we need to add a <em>model</em>.  A model is a Python class that specifies the stuff that you want to store in the database; SQLAlchemy handles all of the complexities of loading stuff from and storing stuff in MySQL; the price is that you have to specify in detail exactly what you want.  Here's the class definition for our model, which you should put in just above the line that says <code>comments = []</code>:</p>
<pre><code>class Comment(db.Model):

    __tablename__ = "comments"

    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.String(4096))
</code></pre>
<p>An SQL database can seen as something similar to a spreadsheet; you have a number of <em>tables</em>, just like a spreadsheet has a number of sheets inside it.  Each table can be thought of as a place to store a specific kind of thing; on the Python side, each one would be represented by a separate class.  We have only one kind of thing to store, so we are going to have just one table, called "comments".  Each table is formed of rows and columns.  Each row corresponds to an entry in the database -- in our simple example, each comment would be a row.  On the Python side, this basically means one row per object stored.  The columns are the attributes of the class, and are pretty much fixed; for our database, we're specifying two columns: an integer <code>id</code>, which we'll keep for housekeeping purposes later on, and a string <code>content</code>, which holds, of course, the contents of the comment.  If we wanted to add more stuff to comments in the future -- say, the author's name -- we'd need to add extra columns for those things.  (Changing the MySQL database structure to add more columns can be tricky; the process is called <em>migrating</em> the database.  I'll link to useful stuff about that at the end of this tutorial.)</p>
<p>Now that we've defined our model, we need to get SQLAlchemy to create the database tables.  This is a one-off operation -- once we've created the database's structure, it's done.  Head over to the bash console we've been using so far for git stuff, and run <code>ipython3.4</code> to start a Python interpreter.</p>
<p>Once it's running, you need to import the database manager from your code:</p>
<pre><code>from flask_app import db
</code></pre>
<p>Now, we want to create the tables.  This is really easy:</p>
<pre><code>db.create_all()
</code></pre>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-sqlalchemy-create-all.png" /></p>
<p>Once you've done that, the table has been created in the database.  Let's confirm that.  Go to the tab you kept open that's showing the "Databases" PythonAnywhere tab, and click on your database name (<em>yourusername</em><code>$comments</code>).  This will start a new console, running the MySQL command line.  Once it has loaded (it will show a <code>mysql&gt;</code> prompt), run the command:</p>
<pre><code>show tables;
</code></pre>
<p>(Don't forget the semicolon at the end!)</p>
<p>This should show you that you have a table called <code>comments</code>.  To inspect it and make sure that it has the stuff you'd expect, run the command:</p>
<pre><code>describe comments;
</code></pre>
<p>You'll see that we have two columns, one called <code>id</code>, and one called <code>content</code> -- just as you'd expect from the class definition in our Python code!</p>
<p>Let's do another checkpoint.  Go back to the tab where you previously did the git stuff, and more recently used the Python interpreter to create the tables.  Exit the Python interpreter, using Control-D or <code>exit()</code>.   Now let's try out a new git command:</p>
<pre><code>git diff
</code></pre>
<p>You'll see that git prints out all of the changes to your code in green, with a bit of code around it in white for context:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-git-diff.png" /></p>
<p>That's often useful when you've not done a commit for a while and need a reminder of what you've changed.  For now, just do a <code>git add</code> and a <code>git commit</code> to save your changes.</p>
<p>So now we have code in our Flask app to connect to the database, a Python definition of what we want to store in the database, and tables created in the database on the MySQL server to store the data.  Let's add the code to actually use all of that!</p>
<p>Firstly, we can get rid of the line where we create the old in-memory storage for the comments, the one like this:</p>
<pre><code>comments = []
</code></pre>
<p>Once that's deleted, we can change the code that uses it in the <code>index</code> view.  Firstly, let's write code to load all of the comments from the database and pass them to the template rather than use the in-memory variable.  Replace this line:</p>
<pre><code>    return render_template("main_page.html", comments=comments)
</code></pre>
<p>...with this:</p>
<pre><code>    return render_template("main_page.html", comments=Comment.query.all())
</code></pre>
<p>The <code>query</code> attribute is something that SQLAlchemy added to your <code>Comment</code> class allowing you to make queries to the database, and its <code>all</code> method, like you'd expect, just gets all comments.</p>
<p>Now, we need to change the template.  Previously, our in-memory list of comments was just a list of strings.  Now that we've changed it to query the database, the template is getting a list (or something that will act like a list) of <code>Comment</code> objects.  We want to get their <code>content</code> attribute, and the change is pretty much like you'd expect.  In the editor for the template, change the bit inside the <code>for</code> loop where we insert the comment:</p>
<pre><code>                {{ comment }}
</code></pre>
<p>...to this:</p>
<pre><code>                {{ comment.content }}
</code></pre>
<p>Now we've implented the code to display comments, but we still need to write code to add them.  Back in the editor for the Python code, replace this:</p>
<pre><code>comments.append(request.form["contents"])
</code></pre>
<p>...with this:</p>
<pre><code>comment = Comment(content=request.form["contents"])
db.session.add(comment)
db.session.commit()
</code></pre>
<p>The first line creates the Python object that represents the comment, but doesn't store it in the database.  The second sends the command to the database to store it, but leaves a <em>transaction</em> open.  Transactions allow you to batch up a bunch of changes into one, for efficiency and also so that if an error occurs you can easily abort and have none of them happen; basically it's a way of batching things up into a set of small changes that, taken together, make one logically coherent larger change.  As we're only making one change -- adding one comment -- then we can <em>commit</em> immediately, which closes the transaction and stores everything.  (You can probably see a similarity between this "prepare things and when you've got a bunch of things ready, commit to store it all" and the <code>git add</code> followed by <code>git commit</code> commands we've been using for git.  That's no coincidence!  It's a common pattern across lots of areas of programming.)</p>
<p>OK, so we have code to load comments from the database and code to store them in the database.  We're done!  Save the file, and hit the button at the top of the editor to reload the website, and go over to the tab where you have it open.  Refresh the page; it should be the normal page with no comments yet.   Type one in, and click the "Post comment" button.  It will appear.</p>
<p>Now, the acid test to prove that it's being stored in the database and can survive a website reload: go to the editor window again, and click the button to reload your web app.  Wait until it's done, then go back to the website.  Refresh the page.... and your comment will still be there!</p>
<p>Ta-dah!</p>
<p>Let's make one final sanity check; we can inspect the database directly and see what's in there.  Go back to the MySQL command window that you opened earlier, and run this command:</p>
<pre><code>select * from comments;
</code></pre>
<p>In lovely 1970s-style ASCII-art table graphics, you'll get the contents of your database -- one shiny new row (or more if you've entered multiple comments):</p>
<pre><code>+----+-------------------------------------------+
| id | content                                   |
+----+-------------------------------------------+
|  1 | This is my first comment for the database |
+----+-------------------------------------------+
1 row in set (0.00 sec)
</code></pre>
<p>So now we have a website that will allow people to enter random comments, and will remember them even if the website is reloaded.  Everything has been coded in Flask, and the data is stored in MySQL using SQLAlchemy.  One last thing before we can call this done, though -- go over to the console where you've been running git, and do one last git commit:</p>
<pre><code>git commit -am"Yay, it's all finished :-D"
</code></pre>
<p>You've built a simple database-backed Flask website on PythonAnywhere.</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-final-result.png" /></p>
<p>I hope it all went smoothly for you, and if you had any problems, just post a comment below!</p>
<p>If you'd like to study further, and find out more about Flask, I recommend these tutorials:</p>
<ul>
<li><a href="http://flask.pocoo.org/docs/0.10/tutorial/">The official Flask tutorial</a></li>
<li><a href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world">The Flask Mega-tutorial</a></li>
</ul>
<p>If you're thinking of developing this app further and adding new stuff to the database, you'll need to learn about database migrations; <a href="https://flask-migrate.readthedocs.org/en/latest/">here are the docs</a></p>
<p>If you think we should do a follow-up to this tutorial, just post a comment with your suggestion below :-)</p>
<p>Thanks for reading!</p>";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-13T19:59:30+00:00";}s:12:"atom_content";s:63455:".jab-post img {
    border: 2px solid #eeeeee;
    padding: 5px;
}


<p>It's really easy to get started with Flask on PythonAnywhere, but if it's the first database-backed website you've ever built, it can feel a little daunting.  Here are some step-by-step instructions.  We'll build a really simple website -- just a page where anyone can leave a comment, with the comments stored in a database so that they last forever.  We'll also password-protect it so that it doesn't fill up with spam.  Here's what it will look like:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-final-result.png" /></p>
<p>We assume that you've got a little bit of basic Python and HTML knowledge -- for example, that you've done an online course in both of them.  Everything else we'll explain as we go along.  Let's get started!</p>
<h2>First steps</h2>
<p>Firstly, <a href="https://www.pythonanywhere.com/pricing/">create a PythonAnywhere account</a> if you haven't already.  A free "Beginner" account is enough for this tutorial.</p>
<p>Once you've signed up, you'll be taken to the "Consoles" tab:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-signed-in.png" /></p>
<p>You can dismiss the green welcome section at the top (use the "X" in its top right) -- everything there is accessible later from the "Help" link if you want to see it.</p>
<p>Now, click on the "Web" tab, and you'll be taken to a page where you can create a website:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-web-tab-empty.png" /></p>
<p>Click on the "Add a new web app" button to the left.  This will pop up a "Wizard" which allows you to configure your site.  If you have a free account, it will look like this:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-create-web-app-subdomain.png" /></p>
<p>If you decided to go for a paid account (thanks :-), then it will be a bit different:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-create-web-app-custom-domain.png" /></p>
<p>What we're doing on this page is specifying the host name in the URL that people will enter to see your website.  Free accounts can have one website, and it must be at <em>yourusername</em><code>.pythonanywhere.com</code>.  Paid accounts have the option of using their own custom host names in their URLs.</p>
<p>Once a website has been created, it's on that particular host name forever.  There are easy ways to create new websites that use the same code as an existing one, so if you create a website at <em>yourusername</em><code>.pythonanywhere.com</code> and then later want to move it to <code>www.yourowndomain.com</code> then that's pretty simple.</p>
<p>For now, we'll stick to the free option.  If you have a free account, just click the "Next" button, and if you have a paid one, click the checkbox next to the <em>yourusername</em><code>.pythonanywhere.com</code>, then click "Next".  This will take you on to the next page in the wizard.</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-create-web-app-choose-framework.png" /></p>
<p>This page is where we select the web framework we want to use.  This tutorial is for Flask, so click that one to go on to the next page.</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-create-web-app-choose-python-version.png" /></p>
<p>PythonAnywhere has various versions of Python installed, and each version has its associated version of Flask.  You can use different Flask versions to the ones we supply by default, but it's a little more tricky (you need to use a thing called a <em>virtualenv</em>), so for this tutorial we'll create a site using Python 3.4, with the default Flask version.  Click the option, and you'll be taken to the next page:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-create-web-app-choose-location.png" /></p>
<p>This page is asking you where you want to put your code.  Code on PythonAnywhere is stored in your home directory, <code>/home/</code><em>yourusername</em>, and in its subdirectories.  Now, Flask is a particularly lighweight framework, and you can write a simple Flask app in a single file.  PythonAnywhere is asking you where it should create a directory and put a single file with a really really simple website.  The default should be fine; it will create a subdirectory of your home directory called <code>mysite</code> and then will put the Flask code into a file called <code>flask_app.py</code> inside that directory.</p>
<p><em>(It will overwrite any other file with the same name, so if you're <em>not</em> using a new PythonAnywhere account, make sure that the file that it's got in the "Path" input box isn't one of your existing files.)</em></p>
<p>Once you're sure you're OK with the filename, click "Next".  There will be a brief pause while PythonAnywhere sets up the website, and then you'll be taken to the configuration page for the site:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-web-app-page-initial-site.png" /></p>
<p>You can see that the host name for the site is on the left-hand side, along with the "Add a new web app" button.  If you had multiple websites in your PythonAnywhere account, they would appear there too. But the one that's currently selected is the one you just created, and if you scroll down a bit you can see all of its settings.  We'll ignore most of these for the moment.</p>
<p>Before we do any coding, let's check out the site that PythonAnywhere has generated for us by default.  Right-click the host name, just after the words "Configuration for", and select the "Open in new tab" option; this will (of course) open your site in a new tab, which is useful when you're developing -- you can keep the site open in one tab and the code and other stuff in another, so it's easier to check out the effects of the changes you make.</p>
<p>Here's what it should look like.</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-initial-site-content.png" /></p>
<p>OK, it's pretty simple, but it's a start.  Let's take a look at the code!  Go back to the tab showing the website configuration (keeping the one showing your site open), and click on the directory titled "Source code" under the "Code" section:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-source-code-link.png" /></p>
<p>You'll be taken to a different page, showing the contents of the subdirectory of your home directory where your website's code lives:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-initial-source-dir.png" /></p>
<p>Click on the <code>flask_app.py</code> file, and you'll see the (really really simple) code that defines your Flask app.  It looks like this:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-initial-source-code.png" /></p>
<p>It's worth working through this line-by-line:</p>
<pre><code>from flask import Flask
</code></pre>
<p>As you'd expect, this loads the Flask framework so that you can use it.</p>
<pre><code>app = Flask(__name__)
</code></pre>
<p>This creates a Flask application to run your code.</p>
<pre><code>@app.route('/')
</code></pre>
<p>This decorator specifies that the following method defines what happens when someone goes to the location "/" on your site -- eg. if they go to <code>http://</code><em>yourusername</em><code>.pythonanywhere.com/</code>.  If you wanted to define what happens when they go to <code>http://</code><em>yourusername</em><code>.pythonanywhere.com/foo</code> then you'd use <code>@app.route('/foo')</code> instead.</p>
<pre><code>def hello_world():
    return 'Hello from Flask!'
</code></pre>
<p>This simple function just says that when someone goes to the location, they get back the (unformatted) text "Hello from Flask".</p>
<p>Try changing it -- for example, to "This is my new shiny Flask app".  Once you've made the change, click the "Save" button at the top to save the file to PythonAnywhere:</p>
<p><img src="http://blog.pythonanywhere.com/static/images/flask-tutorial-save-button.png" /></p>
<p>...then the reload button (to the far right, looking like two curved arrows making a circle), which stops your website and then starts it again with the fresh code.</p>
<p><img src="http://blog.pythonanywhere.com/static/images/flask-tutorial-reld-button.png" /></p>
<p>A "spinner" will appear next to the button to tell you that PythonAnywhere is working.  Once it has disappeared, go to the tab showing the website again, hit the page refresh button, and you'll see that it has changed as you'd expect.</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-first-site-modification.png" /></p>
<h2>Keeping our code under control</h2>
<p>OK, so we've seen the code, and we've changed it.  Now, professional developers don't change code without it being under some kind of source code control, so let's get that set up before we change anything else.</p>
<p><em>(Coding without source-code control is basically trying to program with one hand tied behind your back.  It's possible, but you're making stuff unnecessarily hard for yourself.  With a source-code control system like git, you can "commit" your code at any point to make a place that you can easily get back to.  So, before you embark on major changes, you can make sure that if you mess up, you can get back to where you were before you started: you'll be able to roll back to the last working version.  You can also do stuff like maintaining multiple parallel versions of your code -- say, in-development and live -- and, later on, you can easily collaborate with others.  git is actually quite simple to use for the basic stuff, though it can get daunting, if not terrifying, once you get into the more advanced features.  This tutorial will give the simple git commands you need to use for the basic checkpoint-rollback stuff, which is probably the most important bit.)</em></p>
<p>Back in the tab where you were editing the source code file, go back to the page showing the directory listing (by clicking the browser's "Back" button, or clicking the second-last item, <code>mysite</code>, in the "breadcrumb" listing separated by "&gt;" characters just above the editor).  In the directory listing page, click the "Open bash console here" link near the top right.</p>
<p><img src="http://blog.pythonanywhere.com/static/images/flask-tutorial-bash-console-here.png" /></p>
<p>This will start an in-browser command line where you can enter bash commands -- like git ones.</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-bash-console.png" /></p>
<p>Type in the <code>ls</code> command to list the contents of the directory:</p>
<p><img src="http://blog.pythonanywhere.com/static/images/flask-tutorial-bash-console-directory-listing.png" /></p>
<p>Right, let's get that under source code control.  Firstly, run the following two commands to configure git (replacing the stuff in the quotes appropriately):</p>
<pre><code>git config --global user.name "Your Name"
git config --global user.email "you@example.com"
</code></pre>
<p>You won't need to run that again on PythonAnywhere.  The next step is to create a source-code control "repository" in this directory, which is another simple command:</p>
<pre><code>git init
</code></pre>
<p>It should print out something like "Initialized empty Git repository in /home/yourusername/mysite/.git/"</p>
<p>Now, git is going to track all changes to files in this directory, but there's some stuff we want it to ignore -- temporary files created by Python and that kind of thing.  You do this by creating a file called ".gitignore".  Let's create one with some appropriate stuff for a Flask project in it; first, type this command:</p>
<pre><code>cat &gt; .gitignore
</code></pre>
<p>Anything you type into the console from now on will be added to the .gitignore file, so enter the following items, each on its own line:</p>
<pre><code>*.pyc
__pycache__
</code></pre>
<p>Once you've entered the last one, and hit return, then type Control-D.  This will go back to the bash "$" prompt.</p>
<p>Now we can ask git which files it can see.  Type</p>
<pre><code>git status
</code></pre>
<p>You'll see something like this:</p>
<pre><code>On branch master

Initial commit

Untracked files:
  (use "git add &lt;file&gt;..." to include in what will be committed)

        .gitignore
        flask_app.py

nothing added to commit but untracked files present (use "git add" to track)
</code></pre>
<p>So, it's saying that it doesn't see any changes to files that it is tracking -- which makes sense, because it hasn't been told to track any files yet.  But it can see two files that it isn't tracking yet -- our source file, and the <code>.gitignore</code> file we just created.  We want it to track those files, so we type:</p>
<pre><code>git add .gitignore flask_app.py
</code></pre>
<p>...to add them both.  Run <code>git status</code> again to see what it thinks of that, and you'll see something like this:</p>
<pre><code>On branch master

Initial commit

Changes to be committed:
  (use "git rm --cached &lt;file&gt;..." to unstage)

        new file:   .gitignore
        new file:   flask_app.py
</code></pre>
<p>So, now it knows about the files.  We want to make a commit now -- that is, we want to store the current state of the files in the repository so that we can get back to this state easily in the future.  Run this command to make a commit with an appropriate comment (the bit in the quotes):</p>
<pre><code>git commit -m"First commit of a really simple web app, with a .gitignore file"
</code></pre>
<p>It will print out something like this:</p>
<pre><code>[master (root-commit) 962d9c7] First commit of a really simple web app, with a .gitignore file
 2 files changed, 13 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 flask_app.py
</code></pre>
<p>Now we can see what the status is after that by running <code>git status</code> again:</p>
<pre><code>On branch master
nothing to commit, working directory clean
</code></pre>
<p>This means that as far as git is concerned, everything is in order.</p>
<p>Let's make some changes so that we can show how to roll them back; go back to the code editing window, by clicking "Back" to get to the directory listing, then clicking on the source file again.  Let's add a new "view" -- that is, a new URL that your web app will respond to.  Right now, it will only handle requests to <code>http://</code><em>yourusername</em><code>.pythonanywhere.com/</code> -- it will respond with a "not found" error if, for example, you go to <code>http://</code><em>yourusername</em><code>.pythonanywhere.com/wibble</code>.  (Check that in the tab where you're viewing your website.)</p>
<p>So let's add some code to handle the "/wibble" version.  Just put this at the bottom of the source code file:</p>
<pre><code>@app.route('/wibble')
def wibble():
    return 'This is my pointless new page'
</code></pre>
<p>Click the "Save" button again, then the reload button, and check out your site on the tab you kept open earlier.  Now, both <code>http://</code><em>yourusername</em><code>.pythonanywhere.com/</code> and <code>http://</code><em>yourusername</em><code>.pythonanywhere.com/wibble</code> will work, and will return different text.</p>
<p>So that was our first change, but it was pretty pointless.  Let's use git to undo it.  Click on the PythonAnywhere logo at the top right of the editor page, and you'll be taken to the main PythonAnywhere "Consoles" list.  You'll see that under "Your consoles" there's a thing called something like "Bash console 1904962".</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-consoles-list.png" /></p>
<p>When we opened the bash window earlier, it created a persistent console that will carry on running on PythonAnywhere, even when you're not viewing it.  (It may be reset due to server maintenance on our side, but in general it will keep running for a long time.)  So if you click on it, it will take you back to where you were before:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-bash-console-second-visit.png" /></p>
<p>Let's see what git thinks is going on, by running <code>git status</code> again.  You'll get something like this:</p>
<pre><code>On branch master

Changes not staged for commit:
  (use "git add &lt;file&gt;..." to update what will be committed)
  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)

        modified:   flask_app.py

no changes added to commit (use "git add" and/or "git commit -a")
</code></pre>
<p>So it can see that we changed the <code>flask_app.py</code> file.  That's the change we want to undo.  Usefully, it even tells us what to do to roll back a particular file.  Run this:</p>
<pre><code>git checkout -- flask_app.py
</code></pre>
<p>Run <code>git status</code> again, and you'll see that it no longer sees that file as changed:</p>
<pre><code>On branch master
nothing to commit, working directory clean
</code></pre>
<p>Let's confirm that our change really was un-done.  Click the PythonAnywhere logo again, then click on the "Files" tab next to the "Consoles" one.  That will take you to a directory listing for your home directory.  From there, click on the directory containing the code for your website (<code>mysite</code> if you stuck with the default) and you'll get a directory listing for that, which should contain the <code>flask_app.py</code> file.  Click on that, and you'll be taken to the editor again, and you'll see that the pointless change has been backed out for us.</p>
<p>Hopefully that was at least instructive in showing how you can easily back out changes if you make a mess of your program while developing :-)</p>
<p>Right, now let's start working on our app.</p>
<h2>A first cut with dummy data</h2>
<p>A web app in Flask, like most frameworks, consists of two kinds of file: source code, which is written in Python, and templates, which are written in an extended version of HTML.  Basically, the source code says what the web app should do, and the templates say how it should be displayed.</p>
<p>Our website is just going to be a bunch of comments, one after another, with a text box at the bottom so that people can add new ones.  So we'll start off by writing a template that displays some dummy data, and a view in the Python code that renders (that is, displays) the template.</p>
<p>The template first.  Click on the back button to get to your web app's source code directory listing page.  Templates, by convention, go in a subdirectory of your source code directory, inventively called <code>templates</code>.  So we can create that by typing "templates" into the "Enter new directory name" input near the top of the page, then clicking the "New" button next to it.  That will take us to the directory listing for the new directory, which of course is empty.  We'll create our template file in there; type "main_page.html" into the "Enter new file name" input, and click the "New" button next to it.  This will take you to the editor, which will of course be empty.</p>
<p>Type the following HTML into the editor:</p>
<pre><code>&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;My scratchboard page&lt;/title&gt;
    &lt;/head&gt;

    &lt;body&gt;

        &lt;div&gt;
            This is the first dummy comment.
        &lt;/div&gt;

        &lt;div&gt;
            This is the the second dummy comment.  It's no more interesting
            than the first.
        &lt;/div&gt;

        &lt;div&gt;
            This is the third dummy comment.  It's actually quite exciting!
        &lt;/div&gt;

        &lt;div&gt;
            &lt;form action="." method="POST"&gt;
                &lt;textarea name="contents" placeholder="Enter a comment"&gt;&lt;/textarea&gt;
                &lt;input type="submit" value="Post comment"&gt;
            &lt;/form&gt;
        &lt;/div&gt;

    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>Save it, and go back to the source code directory (you can use the breadcrumbs at the top of the page -- remember, they're the things separated by "&gt;"s) and edit your source code file.  We need to change it so that it renders that template.  To do that, replace the existing view, which looks like this:</p>
<pre><code>@app.route('/')
def hello_world():
    return 'This is my new shiny Flask app'
</code></pre>
<p>...with one that looks like this:</p>
<pre><code>@app.route("/")
def index():
    return render_template("main_page.html")
</code></pre>
<p>You also need to change the line at the top that says</p>
<pre><code>from flask import Flask
</code></pre>
<p>to import the <code>render_template</code> function too, like this:</p>
<pre><code>from flask import Flask, render_template
</code></pre>
<p>Also, just to help in case you've made a typo in the code somewhere, add this line just after the line that says <code>app = Flask(__name__)</code></p>
<pre><code>app.config["DEBUG"] = True
</code></pre>
<p>Now, save the file, reload the website, and refresh it in your other tab.  It'll look like this:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-app-with-dummy-content.png" /></p>
<p>That's pretty ugly, but it has our stuff from the template -- it all worked :-)</p>
<p>Let's take another checkpoint using git.  This time, to save us from having to click around all the time, we'll open up our bash console in a new browser tab.  Go back to your source code editor tab, right-click the PythonAnywhere logo, and select the option to open the link in a new tab.  In the new tab, click on the "Bash console" link under "Your consoles".  You should now have three tabs open -- the one where you're editing your source code, the one with the bash console, and the one viewing your site.</p>
<p>In the bash console, type <code>git status</code>.  It will say something like this:</p>
<pre><code>On branch master

Changes not staged for commit:
  (use "git add &lt;file&gt;..." to update what will be committed)
  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)

        modified:   flask_app.py

Untracked files:
  (use "git add &lt;file&gt;..." to include in what will be committed)

        templates/

no changes added to commit (use "git add" and/or "git commit -a")
</code></pre>
<p>This means that it can see that we've changed <code>flask_app.py</code>, and also that we've added a directory called <code>templates</code>.  It doesn't say anything about what's inside the <code>templates</code> directory.</p>
<p>We want to add both of these in one commit; taken together, the addition of a template and the code to render it make a single consistent change to our app, so it makes sense to bundle the two together.  So, add the new directory</p>
<pre><code>git add templates/
</code></pre>
<p>...and add the file</p>
<pre><code>git add flask_app.py
</code></pre>
<p>Run <code>git status</code> to see what the situation now is:</p>
<pre><code>On branch master
Changes to be committed:
  (use "git reset HEAD &lt;file&gt;..." to unstage)

        modified:   flask_app.py
        new file:   templates/main_page.html
</code></pre>
<p>Now it's telling us about the contents of the <code>templates</code> directory.  (If we'd put more files into it, then the <code>git add templates/</code> would have added all of them.)</p>
<p>So now we commit those changes to the repository in one, by running this command:</p>
<pre><code>git commit -m"A first cut at the template"
</code></pre>
<p>It will print out something like this:</p>
<pre><code>[master 4e8b505] A first cut at the template
 2 files changed, 34 insertions(+), 4 deletions(-)
 create mode 100644 templates/main_page.html
</code></pre>
<p>Now, it's useful to know what's happened in a repository in the past; so far we've done two commits.  What do they look like?  Run the command <code>git log</code> -- it will print out the revision history, something like this:</p>
<pre><code>commit 4e8b50560bb4ec32a273e3ad68faf1a8cb87fafa
Author: A PythonAnywhere dev &lt;support@pythonanywhere.com&gt;
Date:   Fri Oct 30 17:39:34 2015 +0000

    A first cut at the template

commit 962d9c7115a7169bcd6204b6c08911447cfd2e13
Author: A PythonAnywhere dev &lt;support@pythonanywhere.com&gt;
Date:   Fri Oct 30 16:24:54 2015 +0000

    First commit of a really simple web app, with a .gitignore file
</code></pre>
<p>You can see that there are two commits shown, with the most recent one at the top.  Those complicated hexadecimal numbers just after the word "commit" are unique identifiers for the specific checkpoints you've made to your code.  More advanced usage of git often involves using those identifiers to undo specific changes, or to pass sets of changes to other developers.  But we won't go into that here...</p>
<h2>A less ugly site</h2>
<p>So our change is committed.  Let's make the site look a bit prettier.  Go back to your source code tab.  Now we want to edit the template.  We could do that here, but let's open yet another tab so that we can switch between editing the different files easily.  Right-click on the source code directory in the breadcrumb trail, and open it in a new tab.  In the new tab, go to the <code>templates</code> subdirectory, then click on your <code>main_page.html</code> template file.</p>
<p>Now you have four tabs:</p>
<ul>
<li>The source code, <code>flask_app.py</code></li>
<li>The template, <code>main_page.html</code></li>
<li>The bash console for git</li>
<li>The web site itself.</li>
</ul>
<p>To make the site prettier, we'll use the popular <a href="http://getbootstrap.com/">Bootstrap</a> framework.  Inside the <code>&lt;head&gt;</code> section of your HTML, <em>before</em> the title, add this:</p>
<pre><code>&lt;meta charset="utf-8"&gt;
&lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
&lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;

&lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" integrity="sha512-dTfge/zgoMYpP7QbHy4gWMEGsbsdZeCXz7irItjcC3sPUFtf0kuFbDz/ixG7ArTxmDjLXDmezHubeNikyKGVyQ==" crossorigin="anonymous"&gt;
</code></pre>
<p>Save the file, then go to the tab that's showing your site, and hit the page refresh button there.  You'll see that the font has become a bit nicer, but it's still not super-pretty.</p>
<p><em>(Eagle-eyed readers will have spotted that this time we didn't have to click the "Reload" button in the editor.  For arcane technical reasons, you have to reload the web site every time you change Python code, but not when you change templates.)</em></p>
<p>Let's improve things a bit more.  In the template editor tab, add this at the start of the "Body" section:</p>
<pre><code>&lt;nav class="navbar navbar-inverse"&gt;
  &lt;div class="container"&gt;
    &lt;div class="navbar-header"&gt;
      &lt;button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar"&gt;
        &lt;span class="sr-only"&gt;Toggle navigation&lt;/span&gt;
        &lt;span class="icon-bar"&gt;&lt;/span&gt;
        &lt;span class="icon-bar"&gt;&lt;/span&gt;
        &lt;span class="icon-bar"&gt;&lt;/span&gt;
      &lt;/button&gt;
      &lt;a class="navbar-brand" href="#"&gt;My scratchpad&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/nav&gt;


&lt;div class="container"&gt;
</code></pre>
<p>...then, at the end of the body, just before the <code>&lt;/body&gt;</code> tag, add this:</p>
<pre><code>&lt;/div&gt;&lt;!-- /.container --&gt;
</code></pre>
<p>Next, for each of the</p>
<pre><code>&lt;div&gt;
</code></pre>
<p>lines containing our dummy comments, add <code>class="row"</code> before the close <code>&gt;</code>, like this:</p>
<pre><code>&lt;div class="row"&gt;
</code></pre>
<p>Also add the same to the <code>&lt;div&gt;</code> that contains the <code>&lt;form&gt;</code>.</p>
<p>For the <code>&lt;textarea&gt;</code> tag, add <code>class="form-control"</code>.</p>
<p>Go to the tab showing your page, and refresh -- it should look like this:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-app-with-dummy-content-styled.png" /></p>
<p>If it looks weird and ugly (or, at least, weirder and more ugly than that screenshot), check your HTML template and see if there are any obvious errors.  It's really worth spending some time trying to fix the errors yourself, as that's the best way to learn how things work, but if you really find yourself struggling, here's a complete copy of what should be in the template file so that you can copy and paste it into the editor:</p>
<pre><code>&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset="utf-8"&gt;
        &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
        &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;

        &lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" integrity="sha512-dTfge/zgoMYpP7QbHy4gWMEGsbsdZeCXz7irItjcC3sPUFtf0kuFbDz/ixG7ArTxmDjLXDmezHubeNikyKGVyQ==" crossorigin="anonymous"&gt;

        &lt;title&gt;My scratchboard page&lt;/title&gt;
    &lt;/head&gt;

    &lt;body&gt;
        &lt;nav class="navbar navbar-inverse"&gt;
          &lt;div class="container"&gt;
            &lt;div class="navbar-header"&gt;
              &lt;button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar"&gt;
                &lt;span class="sr-only"&gt;Toggle navigation&lt;/span&gt;
                &lt;span class="icon-bar"&gt;&lt;/span&gt;
                &lt;span class="icon-bar"&gt;&lt;/span&gt;
                &lt;span class="icon-bar"&gt;&lt;/span&gt;
              &lt;/button&gt;
              &lt;a class="navbar-brand" href="#"&gt;My scratchpad&lt;/a&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/nav&gt;

        &lt;div class="container"&gt;

            &lt;div class="row"&gt;
                This is the first dummy comment.
            &lt;/div&gt;

            &lt;div class="row"&gt;
                This is the the second dummy comment.  It's no more interesting
                than the first.
            &lt;/div&gt;

            &lt;div class="row"&gt;
                This is the third dummy comment.  It's actually quite exciting!
            &lt;/div&gt;

            &lt;div class="row"&gt;
                &lt;form action="." method="POST"&gt;
                    &lt;textarea class="form-control" name="contents" placeholder="Enter a comment"&gt;&lt;/textarea&gt;
                    &lt;input type="submit" value="Post comment"&gt;
                &lt;/form&gt;
            &lt;/div&gt;

        &lt;/div&gt;

    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>OK, so we have a reasonably pretty page.  Let's get that committed into our git repository!  Go to your Bash console tab, and run <code>git status</code>:</p>
<pre><code>On branch master
Changes not staged for commit:
  (use "git add &lt;file&gt;..." to update what will be committed)
  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)

        modified:   templates/main_page.html

no changes added to commit (use "git add" and/or "git commit -a")
</code></pre>
<p>It can see that we've just got changes to our template, so we add that file to the list of things to commit...</p>
<pre><code>git add templates/main_page.html
</code></pre>
<p>...then we commit it.</p>
<pre><code>git commit -m"Made the site prettier."
</code></pre>
<p>Run <code>git status</code> again to see that everything's properly committed, and <code>git log</code> to see that the new commit has been added to the start of the list.</p>
<h2>Sending and receiving data</h2>
<p>Let's go back to the tab showing our site.  Right now, if we type something into the text area for entering new comments, and click on the "Post comment" page, we'll get a weird error -- which makes perfect sense, as we haven't written any code to store anything.  Try it!  You'll get an error like this:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-method-not-allowed.png" /></p>
<p>What this error means is that we tried to send data to the page, but it's not configured to receive data, only to send it.  When a browser accesses a page, it sends a message which contains an item saying what "method" it wants to use to access it.  By convention, this is "GET" to view data, or "POST" to send data -- that's why the <code>&lt;form&gt;</code> tag in our template says <code>method="POST"</code>.  (Like everything in programming, it's actually a bit more complicated than that, but that's a good start :-)</p>
<p>Right now, our view only handles "GET" methods, because that's what Flask views do by default.  Let's fix that; it's really simple.  Go to the tab showing your Python code, and replace</p>
<pre><code>@app.route("/")
</code></pre>
<p>...with this:</p>
<pre><code>@app.route("/", methods=["GET", "POST"])
</code></pre>
<p>Save the file, hit the reload button in the editor, then go to the tab showing your page; click back to get away from the error page if it's still showing, then try to post a comment again.</p>
<p>Now you won't get an error, but it will just take you back to the page you were viewing before, and completely forget your comment.  Definitely a step forward, but not a very big one.</p>
<p>Let's start storing the comments that people send us.  We'll do it an easy way first, without using a database, then we'll add the database in later.</p>
<p>The easy way to store comments is just to do it in a variable inside the Python code.  This is not great for the long run, because every time we reload the website, it will stop the program serving the site and then start it again, so all of the comments will be lost.  Also, if you're on a paid plan, you might have multiple processes running your code to handle your site (free plans have only one process for the whole site because they're free, paid plans can have lots so that they can handle more simultaneous viewers) and each process will have different sets of comments.  So we can't use the variable-based version for the long run, but as a step forward it's definitely worthwhile :-)</p>
<p>First, let's define the variable.  In the source code tab, add this in between the code that switches debug mode on, and the <code>@app.route</code> decorator:</p>
<pre><code>comments = []
</code></pre>
<p>Next, change the contents of the <code>index</code> function so that it looks like this:</p>
<pre><code>@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "GET":
        return render_template("main_page.html", comments=comments)

    comments.append(request.form["contents"])
    return redirect(url_for('index'))
</code></pre>
<p>Line-by-line, this means:</p>
<pre><code>@app.route("/", methods=["GET", "POST"])
</code></pre>
<p>Specifies that the following function defines the view for the "/" URL, and that it accepts both "GET" and "POST" requests.</p>
<pre><code>def index():
</code></pre>
<p>The name of the view function, of course</p>
<pre><code>    if request.method == "GET":
        return render_template("main_page.html", comments=comments)
</code></pre>
<p>If the request we're currently processing is a "GET" one, the viewer just wants to see the page, so we render the template.  We've added an extra parameter to the call to <code>render_template</code> -- the <code>comments=comments</code> bit.  This means that the list of comments that we've defined as a variable further up will be available inside our template; we'll update that to use the list in a moment.</p>
<p>If the request isn't a "GET" (and so, we know it's a "POST" -- someone's clicked the "Post comment" button) then the next bit is executed:</p>
<pre><code>    comments.append(request.form["contents"])
</code></pre>
<p>This extracts the stuff that was typed into the textarea in the page from the browser's request; we know it's in a thing called <code>contents</code> because that was the name we gave the textarea in the template:</p>
<pre><code>&lt;textarea class="form-control" name="contents" placeholder="Enter a comment"&gt;&lt;/textarea&gt;
</code></pre>
<p>Once we've extracted the comment contents from the request, we add it to the list.  Finally, once that's been stored, we send a message back to the browser saying "Please request this page again, this time using a 'GET' method", so that the user can see the results of their post:</p>
<pre><code>    return redirect(url_for('index'))
</code></pre>
<p>We just need to make one more change in our code: we've used a bunch of new Flask functions and so we need to import them.  Change</p>
<pre><code>from flask import Flask, render_template
</code></pre>
<p>to this:</p>
<pre><code>from flask import Flask, redirect, render_template, request, url_for
</code></pre>
<p>Save the file, then hit the reload button in the editor.  Go to the tab showing your site, and have a play... unfortunately it still won't do anything, even when you post a comment!  This is because although we've added code to accept incoming comments, we're not doing anything in the template to display them.   So let's fix that.</p>
<p>Go to the tab where you're editing your template, and get rid of the three dummy comments:</p>
<pre><code>&lt;div class="row"&gt;
    This is the first dummy comment.
&lt;/div&gt;

&lt;div class="row"&gt;
    This is the the second dummy comment.  It's no more interesting
    than the first.
&lt;/div&gt;

&lt;div class="row"&gt;
    This is the third dummy comment.  It's actually quite exciting!
&lt;/div&gt;
</code></pre>
<p>In their place, we'll put a loop in the Flask template language that will iterate over all of the comments that we passed in to it in the <code>render_template</code> code in our Python code, and put in a <code>&lt;div&gt;</code> for each of them:</p>
<pre><code>{% for comment in comments %}
    &lt;div class="row"&gt;
        {{ comment }}
    &lt;/div&gt;
{% endfor %}
</code></pre>
<p>This should be pretty clear.  Commands in the Flask template language, like <code>for</code> and <code>endfor</code> go inside <code>{%</code>..<code>%}</code>, and then you can also use <code>{{</code>..<code>}}</code> and a variable to insert the value of the variable at the current point.</p>
<p>Now, save the file, and go to the tab showing your site.  Hit the page refresh button -- you'll see that the dummy comments have gone, and if you posted some comments while you were trying it out before you updated the template, you'll see those have been added instead!  Try adding a new new comments; they'll appear as soon as you post them.</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-app-with-in-memory-comments.png" /></p>
<p>If things don't work, try to debug it.  Check for typos in your code, and see if there are any errors displayed.  If the worst comes to the worst and you really can't work out what you mis-typed, here's the code that you should have:</p>
<p>Python:</p>
<pre><code>from flask import Flask, redirect, render_template, request, url_for

app = Flask(__name__)
app.config["DEBUG"] = True

comments = []

@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "GET":
        return render_template("main_page.html", comments=comments)

    comments.append(request.form["contents"])
    return redirect(url_for('index'))
</code></pre>
<p>Template:</p>
<pre><code>&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset="utf-8"&gt;
        &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
        &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;

        &lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" integrity="sha512-dTfge/zgoMYpP7QbHy4gWMEGsbsdZeCXz7irItjcC3sPUFtf0kuFbDz/ixG7ArTxmDjLXDmezHubeNikyKGVyQ==" crossorigin="anonymous"&gt;

        &lt;title&gt;My scratchboard page&lt;/title&gt;
    &lt;/head&gt;

    &lt;body&gt;
        &lt;nav class="navbar navbar-inverse"&gt;
          &lt;div class="container"&gt;
            &lt;div class="navbar-header"&gt;
              &lt;button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar"&gt;
                &lt;span class="sr-only"&gt;Toggle navigation&lt;/span&gt;
                &lt;span class="icon-bar"&gt;&lt;/span&gt;
                &lt;span class="icon-bar"&gt;&lt;/span&gt;
                &lt;span class="icon-bar"&gt;&lt;/span&gt;
              &lt;/button&gt;
              &lt;a class="navbar-brand" href="#"&gt;My scratchpad&lt;/a&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/nav&gt;

        &lt;div class="container"&gt;

            {% for comment in comments %}
                &lt;div class="row"&gt;
                    {{ comment }}
                &lt;/div&gt;
            {% endfor %}

            &lt;div class="row"&gt;
                &lt;form action="." method="POST"&gt;
                    &lt;textarea class="form-control" name="contents" placeholder="Enter a comment"&gt;&lt;/textarea&gt;
                    &lt;input type="submit" value="Post comment"&gt;
                &lt;/form&gt;
            &lt;/div&gt;

        &lt;/div&gt;

    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>So, if everything's working OK, it's probably time to commit the changes.  Over to the Bash console tab, and run <code>git status</code> yet again:</p>
<pre><code>On branch master
Changes not staged for commit:
  (use "git add &lt;file&gt;..." to update what will be committed)
  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)

        modified:   flask_app.py
        modified:   templates/main_page.html

no changes added to commit (use "git add" and/or "git commit -a")
</code></pre>
<p>This time, just for a change, let's add our files to the list of files to commit, and commit them in one go.  This doesn't work if you've created a new file, but as we've only modified existing ones, it's an option.  We just add an <code>a</code> before the <code>m</code> in the <code>git commit</code> command to say "add files":</p>
<pre><code>git commit -am"Replaced dummy comments with some in-memory storage"
</code></pre>
<p>Once again, run <code>git status</code> to confirm that everything's now properly synchronized up, and <code>git log</code> to see your new commit in the history for the repository.</p>
<h2>Password protection</h2>
<p>So, we have a page where random people on the Internet can add comments.  We all know what the Internet is like, and this is going to fill up with ads for fake Rolexes and dodgy pharmaceuticals pretty rapidly if we leave it open to the world.  So let's add some password protection.  PythonAnywhere provides this for us.</p>
<p>To activate it, go to any of your tabs, right-click the PythonAnywhere to open the consoles page in a new browser tab, then click on the "Web" tab.  Make sure your website is selected on the left-hand side, then scroll to the bottom of the page.  Just above the big red "delete" button there's a section titled "Password protection".  Enter a username and a password here, and switch the toggle above those fields to "Enabled".  Scroll up to the top of the page again, and click the big green "Reload" button.</p>
<p>Now head over to the tab where you're viewing your website, and refresh the page.  This time you should be prompted for a password.  You only need to enter it this one time for this browser session, so it won't get in our way later on -- but it will keep the spammers at bay...  Once this is all done, you can close the browser tab where you set the password.</p>
<h2>Bring on the database</h2>
<p>Now it's time to add a database in to the mix!  You've probably already noticed the problem that adding one will solve; when you reloaded your website as part of enabling the password protection, all of your comments disappeared.  So right now we have a site that will lose all of its data every time you reload it -- which means, of course, every time you change the code.   Not ideal.</p>
<p>We could store the comments in a simple file -- and that would work fine for a basic site like this, but would become increasingly hard to maintain as we added new stuff in the future.  Databases were designed to keep structured data in an easy-to-maintain, easy-to manage fashion, and that's why we're going to use one.</p>
<p>There are many database programs used for web apps; some examples are:</p>
<ul>
<li>SQLite, a simple lightweight database that keeps everything in a specially-formatted file on your disk.  Not super-high-performance, but popular because it's so simple.</li>
<li>MySQL, which runs as a separate server process to which programs running on other machines can connect, storing data on the disks of the machine where it's running.  Fairly simple, pretty powerful.  Probably the most popular option.</li>
<li>PostgreSQL (for historical reasons, normally just called Postgres), which runs as a server, like MySQL, and is better with larger datasets.  Growing in popularity, but needs a bit more server power to run.</li>
<li>MongoDB, which allows you to store your data in a less-structured way than SQL databases like the previous three.  Also server-based.  New, slightly oddball -- the hipster option.</li>
</ul>
<p>SQLite is pretty slow on PythonAnywhere, and doesn't scale well for larger sites anyway.  Postgres is a paid feature on PythonAnywhere because of its larger server power requirements, and we don't have built-in support for MongoDB.  So we're going to use MySQL.</p>
<p>One convenient thing about modern database programming, however, is that to a certain degree you don't need to worry about which database you're actually using.  There are database interface libraries called Object-Relational Mappers (ORMs), which make it possible (most of the time) to use the same code regardless of the underlying database.  We're going to use one called SQLAlchemy, which works well with Flask.</p>
<p>Right, enough background.  Let's create a MySQL database!  In your tab where you're editing the Python source code, right-click on the PythonAnywhere logo and open the page in a new tab.  On the "Consoles" page that appears, click on the "Databases" tab to the far right.  You'll wind up here:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-databases-tab-empty.png" /></p>
<p>At the top, under "Connecting", you'll see the details you'll need to connect to the MySQL server associated with your account.  Next is a list of MySQL databases, which, as you haven't created any, is of course empty.  And at the bottom there's a space to enter a MySQL password.  The password is needed to connect to the MySQL server so that other people can't connect to your one, and initially it's unset.  Enter a new password here; make it something different to the one you use to log in to PythonAnywhere, because this database password will have to exist in your Python code (so that it can connect to your server), so it's more secure to use a different one.  Make a note of the password you've chosen, and once you've entered it twice in the appropriate fields, click the "Set MySQL password" button.  You'll come back to the "Databases" tab, but now some extra options will have appeared:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-databases-tab-after-set-password.png" /></p>
<p>So now we have a database called <em>yourusername</em><code>$default</code>, and an option to create a database.  In general, it's good practice to have a separate database for each website you're working on to keep everything nicely separated.  Go to the "Create database" section in the middle of the page, and create one, giving it the name "comments":</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-databases-tab-create-database.png" /></p>
<p>Once you've clicked the "Create" button, you'll see it's been added to the list that previously showed the <em>yourusername</em><code>$default</code> one:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-databases-tab-created-database-list.png" /></p>
<p>You can see that the database name is slightly different to the simple <code>comments</code> that you specified -- it's got your username and a dollar before it.  (If your username is longer than 16 characters, it will be the username truncated to 16 characters.)  This is simply to make sure that the name doesn't clash with any other users' databases that happen to be on the same server.</p>
<p>OK, so now we have a database.  Let's add some code to connect to it!  Leave the databases page open, and switch back to the tab where you have your Python code.  Just after the lines that say:</p>
<pre><code>app = Flask(__name__)
app.config["DEBUG"] = True
</code></pre>
<p>...add the following code to configure the database connection:</p>
<pre><code>SQLALCHEMY_DATABASE_URI = "mysql+mysqlconnector://{username}:{password}@{hostname}/{databasename}".format(
    username="&lt;the username from the 'Databases' tab&gt;",
    password="&lt;the password you set on the 'Databases' tab&gt;",
    hostname="&lt;the database host address from the 'Databases' tab&gt;",
    databasename="&lt;the database name you chose, probably yourusername$comments&gt;",
)
app.config["SQLALCHEMY_DATABASE_URI"] = SQLALCHEMY_DATABASE_URI
app.config["SQLALCHEMY_POOL_RECYCLE"] = 299
</code></pre>
<p>You need to change the values we set for <code>username</code>, <code>hostname</code> and <code>databasename</code> to the values from the "Databases" tab, and change the <code>password</code> to the one you set there earlier.  (All of these are without the <code>&lt;&gt;</code> angle brackets, of course -- those are just there in the code above to highlight things you need to change.)</p>
<p>The first of these commands sets a variable to the specifically-formatted string SQLAlchemy needs to connect to your database.  The second stashes that away in Flask's application configuration settings.</p>
<p>The third sets an importand database connection configuration parameter, which you don't need to know the details of (though the following sidebar explains it in case you're interested :-)</p>
<p><em>Sidebar: connection timeouts.  Opening a connection from your website code to a MySQL server takes a small amount of time.  If you opened one for every hit on your website, it would be slightly slower.  If your site was really busy, the aggregate of all of the small amounts of time opening connections could add up to quite a slowdown.  To avoid this, SQLAlchemy operates a "connection pool".  It keeps a set of connections to the database, and re-uses them.  When you want a connection, it gives you one from the pool, creating a new one if the pool is empty, and when you're done with it, the connection is returned to the pool for future reuse.  However, in order to stop people from hogging database connections, MySQL servers close unused connections after a particular amount of time.  On PythonAnywhere, this timeout is set to 300 seconds.  If your site is busy and your connections are always busy, this doesn't matter.  But if it's not, a connection in the pool might be closed by the server because it wasn't being used.  The <code>SQLALCHEMY_POOL_RECYCLE</code> variable is set to 299 to tell SQLAlchemy that it should throw away connections that haven't been used for 299 seconds, so that it doesn't give them to you and cause your code to crash because it's trying to use a connection that has already been closed by the server.</em></p>
<p>So that's the code that configures our database connection; now we need some code to actually connect to it!  Put this just after the code you just added:</p>
<pre><code>db = SQLAlchemy(app)
</code></pre>
<p>This simply creates a SQLAlchemy object using the connections we put into the Flask app's config.  We need to add an extra import statement to the start of our code to make this work, just after the other import that imports stuff from Flask:</p>
<pre><code>from flask.ext.sqlalchemy import SQLAlchemy
</code></pre>
<p>Right, we've added some code to connect to the database.  Let's sanity-check it and make sure we haven't made any silly typos; hit the button to reload your website, and refresh the page in the other tab where you're viewing it.  If all is OK, you should get a site that behaves just like it did before.  If there's a problem, Flask should tell you what it is.</p>
<p>Once you've got everything working, go to the console where you've been doing git stuff, and use <code>git commit</code> to save a checkpoint.</p>
<p>Next, we need to add a <em>model</em>.  A model is a Python class that specifies the stuff that you want to store in the database; SQLAlchemy handles all of the complexities of loading stuff from and storing stuff in MySQL; the price is that you have to specify in detail exactly what you want.  Here's the class definition for our model, which you should put in just above the line that says <code>comments = []</code>:</p>
<pre><code>class Comment(db.Model):

    __tablename__ = "comments"

    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.String(4096))
</code></pre>
<p>An SQL database can seen as something similar to a spreadsheet; you have a number of <em>tables</em>, just like a spreadsheet has a number of sheets inside it.  Each table can be thought of as a place to store a specific kind of thing; on the Python side, each one would be represented by a separate class.  We have only one kind of thing to store, so we are going to have just one table, called "comments".  Each table is formed of rows and columns.  Each row corresponds to an entry in the database -- in our simple example, each comment would be a row.  On the Python side, this basically means one row per object stored.  The columns are the attributes of the class, and are pretty much fixed; for our database, we're specifying two columns: an integer <code>id</code>, which we'll keep for housekeeping purposes later on, and a string <code>content</code>, which holds, of course, the contents of the comment.  If we wanted to add more stuff to comments in the future -- say, the author's name -- we'd need to add extra columns for those things.  (Changing the MySQL database structure to add more columns can be tricky; the process is called <em>migrating</em> the database.  I'll link to useful stuff about that at the end of this tutorial.)</p>
<p>Now that we've defined our model, we need to get SQLAlchemy to create the database tables.  This is a one-off operation -- once we've created the database's structure, it's done.  Head over to the bash console we've been using so far for git stuff, and run <code>ipython3.4</code> to start a Python interpreter.</p>
<p>Once it's running, you need to import the database manager from your code:</p>
<pre><code>from flask_app import db
</code></pre>
<p>Now, we want to create the tables.  This is really easy:</p>
<pre><code>db.create_all()
</code></pre>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-sqlalchemy-create-all.png" /></p>
<p>Once you've done that, the table has been created in the database.  Let's confirm that.  Go to the tab you kept open that's showing the "Databases" PythonAnywhere tab, and click on your database name (<em>yourusername</em><code>$comments</code>).  This will start a new console, running the MySQL command line.  Once it has loaded (it will show a <code>mysql&gt;</code> prompt), run the command:</p>
<pre><code>show tables;
</code></pre>
<p>(Don't forget the semicolon at the end!)</p>
<p>This should show you that you have a table called <code>comments</code>.  To inspect it and make sure that it has the stuff you'd expect, run the command:</p>
<pre><code>describe comments;
</code></pre>
<p>You'll see that we have two columns, one called <code>id</code>, and one called <code>content</code> -- just as you'd expect from the class definition in our Python code!</p>
<p>Let's do another checkpoint.  Go back to the tab where you previously did the git stuff, and more recently used the Python interpreter to create the tables.  Exit the Python interpreter, using Control-D or <code>exit()</code>.   Now let's try out a new git command:</p>
<pre><code>git diff
</code></pre>
<p>You'll see that git prints out all of the changes to your code in green, with a bit of code around it in white for context:</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-git-diff.png" /></p>
<p>That's often useful when you've not done a commit for a while and need a reminder of what you've changed.  For now, just do a <code>git add</code> and a <code>git commit</code> to save your changes.</p>
<p>So now we have code in our Flask app to connect to the database, a Python definition of what we want to store in the database, and tables created in the database on the MySQL server to store the data.  Let's add the code to actually use all of that!</p>
<p>Firstly, we can get rid of the line where we create the old in-memory storage for the comments, the one like this:</p>
<pre><code>comments = []
</code></pre>
<p>Once that's deleted, we can change the code that uses it in the <code>index</code> view.  Firstly, let's write code to load all of the comments from the database and pass them to the template rather than use the in-memory variable.  Replace this line:</p>
<pre><code>    return render_template("main_page.html", comments=comments)
</code></pre>
<p>...with this:</p>
<pre><code>    return render_template("main_page.html", comments=Comment.query.all())
</code></pre>
<p>The <code>query</code> attribute is something that SQLAlchemy added to your <code>Comment</code> class allowing you to make queries to the database, and its <code>all</code> method, like you'd expect, just gets all comments.</p>
<p>Now, we need to change the template.  Previously, our in-memory list of comments was just a list of strings.  Now that we've changed it to query the database, the template is getting a list (or something that will act like a list) of <code>Comment</code> objects.  We want to get their <code>content</code> attribute, and the change is pretty much like you'd expect.  In the editor for the template, change the bit inside the <code>for</code> loop where we insert the comment:</p>
<pre><code>                {{ comment }}
</code></pre>
<p>...to this:</p>
<pre><code>                {{ comment.content }}
</code></pre>
<p>Now we've implented the code to display comments, but we still need to write code to add them.  Back in the editor for the Python code, replace this:</p>
<pre><code>comments.append(request.form["contents"])
</code></pre>
<p>...with this:</p>
<pre><code>comment = Comment(content=request.form["contents"])
db.session.add(comment)
db.session.commit()
</code></pre>
<p>The first line creates the Python object that represents the comment, but doesn't store it in the database.  The second sends the command to the database to store it, but leaves a <em>transaction</em> open.  Transactions allow you to batch up a bunch of changes into one, for efficiency and also so that if an error occurs you can easily abort and have none of them happen; basically it's a way of batching things up into a set of small changes that, taken together, make one logically coherent larger change.  As we're only making one change -- adding one comment -- then we can <em>commit</em> immediately, which closes the transaction and stores everything.  (You can probably see a similarity between this "prepare things and when you've got a bunch of things ready, commit to store it all" and the <code>git add</code> followed by <code>git commit</code> commands we've been using for git.  That's no coincidence!  It's a common pattern across lots of areas of programming.)</p>
<p>OK, so we have code to load comments from the database and code to store them in the database.  We're done!  Save the file, and hit the button at the top of the editor to reload the website, and go over to the tab where you have it open.  Refresh the page; it should be the normal page with no comments yet.   Type one in, and click the "Post comment" button.  It will appear.</p>
<p>Now, the acid test to prove that it's being stored in the database and can survive a website reload: go to the editor window again, and click the button to reload your web app.  Wait until it's done, then go back to the website.  Refresh the page.... and your comment will still be there!</p>
<p>Ta-dah!</p>
<p>Let's make one final sanity check; we can inspect the database directly and see what's in there.  Go back to the MySQL command window that you opened earlier, and run this command:</p>
<pre><code>select * from comments;
</code></pre>
<p>In lovely 1970s-style ASCII-art table graphics, you'll get the contents of your database -- one shiny new row (or more if you've entered multiple comments):</p>
<pre><code>+----+-------------------------------------------+
| id | content                                   |
+----+-------------------------------------------+
|  1 | This is my first comment for the database |
+----+-------------------------------------------+
1 row in set (0.00 sec)
</code></pre>
<p>So now we have a website that will allow people to enter random comments, and will remember them even if the website is reloaded.  Everything has been coded in Flask, and the data is stored in MySQL using SQLAlchemy.  One last thing before we can call this done, though -- go over to the console where you've been running git, and do one last git commit:</p>
<pre><code>git commit -am"Yay, it's all finished :-D"
</code></pre>
<p>You've built a simple database-backed Flask website on PythonAnywhere.</p>
<p><img width="500" src="http://blog.pythonanywhere.com/static/images/flask-tutorial-final-result.png" /></p>
<p>I hope it all went smoothly for you, and if you had any problems, just post a comment below!</p>
<p>If you'd like to study further, and find out more about Flask, I recommend these tutorials:</p>
<ul>
<li><a href="http://flask.pocoo.org/docs/0.10/tutorial/">The official Flask tutorial</a></li>
<li><a href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world">The Flask Mega-tutorial</a></li>
</ul>
<p>If you're thinking of developing this app further and adding new stuff to the database, you'll need to learn about database migrations; <a href="https://flask-migrate.readthedocs.org/en/latest/">here are the docs</a></p>
<p>If you think we should do a follow-up to this tutorial, just post a comment with your suggestion below :-)</p>
<p>Thanks for reading!</p>";}i:2;a:6:{s:5:"about";s:75:"http://pycon.blogspot.com/2015/11/why-proposals-are-due-so-many-months.html";s:5:"title";s:56:"PyCon: Why proposals are due so many months before PyCon";s:4:"link";s:75:"http://pycon.blogspot.com/2015/11/why-proposals-are-due-so-many-months.html";s:7:"content";a:1:{s:7:"encoded";s:3978:"“Why does PyCon make us submit proposals six whole months before the conference? They expect us to start thinking of topics for PyCon 2016 while it is still 2015!”<br /><br />To be honest, I used to ask the same question about PyCon myself. Now that I am the conference chair, I have the privilege of working directly with the volunteers who make the conference possible! They have been generous with their time in bringing me up to speed on how each of their committees operate, helping me see the big picture of how the conference schedule is negotiated each year.<br /><br />And better yet, they have proved willing to accept a challenge: we have made the schedule more aggressive this year, to close some of the gap between the close of the Call for Proposals and the start of the conference itself! I am excited about the results of their hard work:<br /><br /><ul><li>Tutorial proposals are due on 2015 November&nbsp;30, which is <b>25 days closer</b> to the conference than&nbsp;the same deadline last year.</li><li>Talk proposals are due on 2016 January&nbsp;3, which is <b>59 days closer</b> to the conference than last&nbsp;year — an improvement of nearly two months!</li></ul><br />It would have been less risky to simply repeat the PyCon 2015 schedule over again, so I thank the volunteer chairs for their boldness here. In an upcoming post I will share more details about their process, and about how you can volunteer on their committees to help them achieve this year’s more ambitious schedule!<br /><br />But, for now, let me introduce the whole subject by answering the question I posed — why does the CFP close so many months before the conference?<br /><br />Imagine a speaker from another country who wants to give a talk at PyCon. Their salary is low by United States standards. They might have a hard time obtaining a visa. If the Python Software Foundation wants its flagship international conference to be able to welcome speakers from all over the world, what constraints does that place upon the schedule?<br /><br />Unless we are going to ask speakers to undertake personal financial risk for the mere chance of getting to attend and speak, PyCon will operate under three constraints:<br /><br /><ol><li>International speakers are one of the constituencies we try to serve through our Financial Aid program, so after we announce PyCon’s schedule of accepted talks, tutorials, and posters, the speaker will need time to turn around and apply for Financial Aid.</li><li>We will then need time to complete our Financial Aid process and make award decisions before we expect an applicant to spend money applying for a visa.</li><li>It can take more than a month for the government to rule on a visa. Only once a speaker has received a visa — instead of a rejection — can they risk purchasing an airline ticket and making the other financial commitments involved in arranging travel.</li></ol><br />If you imagine that each of these three steps takes roughly a month, then you understand why talk and poster proposals are due on 3 January 2015. January and February belong to the program committee process that chooses talks and posters. March is when the financial aid committee receives applications and decides on awards. In April the government will process and (hopefully) accept the speaker’s visa application. If all goes well, that will leave an international speaker with only a bit more than a month to purchase an airplane ticket and travel to the conference!<br /><br />So the long lead time between the CFP and the conference arises from the PSF’s goal of making PyCon a conference not just for North America, but for the entire world. We make it the one event each year where the Python community sets the stretch goal of not just welcoming people from a single region or continent, but of welcoming everyone. That means we have to close our CFP earlier than any other Python conference — but we believe it’s worth it.";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-13T13:29:49+00:00";}s:12:"atom_content";s:3978:"“Why does PyCon make us submit proposals six whole months before the conference? They expect us to start thinking of topics for PyCon 2016 while it is still 2015!”<br /><br />To be honest, I used to ask the same question about PyCon myself. Now that I am the conference chair, I have the privilege of working directly with the volunteers who make the conference possible! They have been generous with their time in bringing me up to speed on how each of their committees operate, helping me see the big picture of how the conference schedule is negotiated each year.<br /><br />And better yet, they have proved willing to accept a challenge: we have made the schedule more aggressive this year, to close some of the gap between the close of the Call for Proposals and the start of the conference itself! I am excited about the results of their hard work:<br /><br /><ul><li>Tutorial proposals are due on 2015 November&nbsp;30, which is <b>25 days closer</b> to the conference than&nbsp;the same deadline last year.</li><li>Talk proposals are due on 2016 January&nbsp;3, which is <b>59 days closer</b> to the conference than last&nbsp;year — an improvement of nearly two months!</li></ul><br />It would have been less risky to simply repeat the PyCon 2015 schedule over again, so I thank the volunteer chairs for their boldness here. In an upcoming post I will share more details about their process, and about how you can volunteer on their committees to help them achieve this year’s more ambitious schedule!<br /><br />But, for now, let me introduce the whole subject by answering the question I posed — why does the CFP close so many months before the conference?<br /><br />Imagine a speaker from another country who wants to give a talk at PyCon. Their salary is low by United States standards. They might have a hard time obtaining a visa. If the Python Software Foundation wants its flagship international conference to be able to welcome speakers from all over the world, what constraints does that place upon the schedule?<br /><br />Unless we are going to ask speakers to undertake personal financial risk for the mere chance of getting to attend and speak, PyCon will operate under three constraints:<br /><br /><ol><li>International speakers are one of the constituencies we try to serve through our Financial Aid program, so after we announce PyCon’s schedule of accepted talks, tutorials, and posters, the speaker will need time to turn around and apply for Financial Aid.</li><li>We will then need time to complete our Financial Aid process and make award decisions before we expect an applicant to spend money applying for a visa.</li><li>It can take more than a month for the government to rule on a visa. Only once a speaker has received a visa — instead of a rejection — can they risk purchasing an airline ticket and making the other financial commitments involved in arranging travel.</li></ol><br />If you imagine that each of these three steps takes roughly a month, then you understand why talk and poster proposals are due on 3 January 2015. January and February belong to the program committee process that chooses talks and posters. March is when the financial aid committee receives applications and decides on awards. In April the government will process and (hopefully) accept the speaker’s visa application. If all goes well, that will leave an international speaker with only a bit more than a month to purchase an airplane ticket and travel to the conference!<br /><br />So the long lead time between the CFP and the conference arises from the PSF’s goal of making PyCon a conference not just for North America, but for the entire world. We make it the one event each year where the Python community sets the stretch goal of not just welcoming people from a single region or continent, but of welcoming everyone. That means we have to close our CFP earlier than any other Python conference — but we believe it’s worth it.";}i:3;a:6:{s:5:"about";s:91:"https://semaphoreci.com/community/tutorials/bdd-testing-a-restful-web-application-in-python";s:5:"title";s:68:"Semaphore Community: BDD Testing a Restful Web Application in Python";s:4:"link";s:91:"https://semaphoreci.com/community/tutorials/bdd-testing-a-restful-web-application-in-python";s:7:"content";a:1:{s:7:"encoded";s:28287:"<p>This article is brought with ❤ to you by <a href="https://semaphoreci.com?utm_source=rss&utm_medium=feed&utm_term=BDD_Testing_a_Restful_Web_Application_in_Python&utm_content=toplink&utm_campaign=community">Semaphore</a>.</p><h3>Introduction</h3>

<p><a href="https://semaphoreci.com/community/tutorials/behavior-driven-development">Behaviour-driven development</a> allows you to describe how your application should
behave, and drive the development of features by adding new tests and making
them pass. By clearly describing how your application behaves in different
scenarios, you can be confident that the product delivered at the end meets the
requirements you set out to deliver. Following BDD lets you build up your
application piece by piece, and also provides you with living documentation of
your entire system, that is naturally maintained as you keep the tests passing.</p>

<p>By the end of this tutorial you should be able to:</p>

<ul>
<li>Create a simple REST application using the Flask framework</li>
<li>Write behaviour tests (also known as acceptance tests) using the Lettuce
library</li>
<li>Explain the structure of the tests, in terms of the Given, When, Then, And
syntax</li>
<li>Execute and debug the tests</li>
</ul>

<h2>Prerequisites</h2>

<p>Before you begin this tutorial, ensure the following are installed to your
system:</p>

<ul>
<li><a href="https://www.python.org/downloads/">Python 2.7.x</a></li>
<li><a href="http://lettuce.it">Lettuce</a></li>
<li><a href="http://flask.pocoo.org">Flask</a></li>
<li><a href="https://nose.readthedocs.org/en/latest/">Nosetests</a></li>
<li>A basic understanding of <a href="https://en.wikipedia.org/wiki/Representational_state_transfer">REST</a> principles</li>
</ul>

<h2>Set Up Your Project Structure</h2>

<p>In this tutorial, we will build up a simple RESTful application handling the
storing and retrieval of user data. To start, create the following directory
structure for the project on your filesystem, along with the corresponding empty
files to be added to later:</p>

<pre><code> .
├── test
│     ├── features
│            ├── __init__.py
│            ├── steps.py
│            └── user.feature  
└── app
     ├── __init__.py
     ├── application.py
     └── views.py
</code></pre>

<p>The files can be described as follows:</p>

<ul>
<li>
<code>__init__.py</code>: mark directory as a Python package.</li>
<li>
<code>steps.py</code>: The Python code which is executed by the <code>.feature</code> files.</li>
<li>
<code>user.feature</code>: The behaviour test which describes the functionality of the
user endpoint in our application.</li>
<li>
<code>application.py</code>: The entry point where our Flask application is created and
the server started.</li>
<li>
<code>views.py</code>: Code to handle the registration of views and defines the responses
to various HTTP requests made on the view.</li>
</ul>

<h2>Create the Skeleton Flask Application</h2>

<p>For the purposes of this tutorial, you will need to define a simple web
application using the Flask framework, to which you will add features following
the BDD approach outlined later in the tutorial.  For now, let's get an empty
skeleton application running for you to add to.  Open up the file
<code>application.py</code> and add the following code:</p>

<div class="highlight highlight-python"><pre><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</pre></div>

<p>This code simply creates our Flask instance, and allows you to start the
packaged development server Flask provides when you execute this Python file.
Should you have everything installed correctly, open up a command prompt on
your operating system and execute the following command from the root of the
project:</p>

<div class="highlight highlight-bash"><pre>python app/application.py
</pre></div>

<p>If you see the following output, then your Flask application is running
correctly, and you can proceed with the tutorial:</p>

<div class="highlight highlight-bash"><pre><span class="nv">$ </span>python app/application.py
 * Running on http://127.0.0.1:5000/ <span class="o">(</span>Press CTRL+C to quit<span class="o">)</span>
</pre></div>

<h2>Write Your First BDD Test</h2>

<p>As we want to follow BDD, we will start by writing the test first which
describes the initial functionality we want to develop in our application. Once
the test is in place and failing, we will proceed to writing the code to make
the test pass.</p>

<h3>Write the Feature file</h3>

<p>Edit <code>user.feature</code> and add the following code to the first line:</p>

<div class="highlight highlight-gherkin"><pre><span class="k">Feature:</span><span class="nf"> Handle storing, retrieving and deleting customer details</span>
</pre></div>

<p>This first line is simply documentation for what functionality the set of
scenarios in this file cover.  Following this, let's add your first scenario:</p>

<div class="highlight highlight-gherkin"><pre><span class="nf">  </span><span class="k">Scenario:</span><span class="nf"> Retrieve a customers details</span>
</pre></div>

<p>Again, this line is simply documentation on what functionality this specific
scenario is testing. Now, let's add the actual body of the scenario test:</p>

<div class="highlight highlight-gherkin"><pre><span class="nf">  </span><span class="k">Scenario:</span><span class="nf"> Retrieve a customers details</span>
<span class="k">      Given </span><span class="nf">some users are in the system</span>
<span class="nf">      </span><span class="k">When </span><span class="nf">I retrieve the customer 'david</span><span class="s">01</span><span class="nf">'</span>
<span class="nf">      </span><span class="k">Then </span><span class="nf">I should get a '</span><span class="s">200</span><span class="nf">' response</span>
<span class="nf">      </span><span class="k">And </span><span class="nf">the following user details are returned:</span>
<span class="k">        |</span><span class="s"> name</span><span class="k">       |</span><span class="nf"></span>
<span class="k">        |</span><span class="s"> David Sale</span><span class="k"> |</span>
</pre></div>

<p>You will notice the test makes use of the standard set of keywords known as
<a href="https://cucumber.io/docs/reference">gherkin</a> (e.g. <code>Given</code>, <code>When</code>, <code>Then</code>,
<code>And</code>). The syntax provides structure to your test, and generally follows the
following pattern:</p>

<ul>
<li>Given: the setup or initialisation of conditions for your test scenario. Here,
you might prime some mocks to return a successful or error response for example.
In the test above, you ensure some users are registered in the system so we can
query it.</li>
<li>When: the action under test, for example making a GET request to an endpoint
on your application.</li>
<li>Then: the assertions/expectations you wish to make in your test. For example,
in the above scenario, you are expecting a 200 status code in the response from
the web application.</li>
<li>And: allows you to continue from the keyword above. If your previous
statement began with <code>When</code>, and your next line begins with <code>And</code>, the <code>And</code>
line will be treated as a <code>When</code> also.</li>
</ul>

<p>One other important thing to note is the style of the test and how it reads. You
want to make your scenarios as easy to read and reusable as possible, allowing
anyone to understand what the test is doing, the functionality under test and
how you expect it to behave. You should make a great effort to reuse your steps
as much as possible, which keeps the amount of new code you need to write to a
minimum, and keeps consistency high across your test suite. We will cover some
techniques on reusable steps later in the tutorial, such as taking values as
parameters in your steps.</p>

<p>With Lettuce installed to your system, you can now execute the <code>user.feature</code>
file from the root directory of your project by executing the following command
in your operating system's command prompt:</p>

<div class="highlight highlight-bash"><pre>lettuce <span class="nb">test</span>/features
</pre></div>

<p>You should see output that is similar to the following:</p>

<div class="highlight highlight-bash"><pre><span class="nv">$ </span>lettuce <span class="nb">test</span>/features/

Feature: Handle storing, retrieving and deleting customer details <span class="c"># test/features/user.feature:1</span>

  Scenario: Retrieve a customers details                          <span class="c"># test/features/user.feature:3</span>
    Given some users are in the system                            <span class="c"># test/features/user.feature:4</span>
    When I retrieve the customer <span class="s1">'david01'</span>                        <span class="c"># test/features/user.feature:5</span>
    Then I should get a <span class="s1">'200'</span> response                            <span class="c"># test/features/user.feature:6</span>
    And the following user details are returned:                  <span class="c"># test/features/user.feature:7</span>
      <span class="p">|</span> name       <span class="p">|</span>
      <span class="p">|</span> David Sale <span class="p">|</span>

<span class="m">1</span> feature <span class="o">(</span><span class="m">0</span> passed<span class="o">)</span>
<span class="m">1</span> scenario <span class="o">(</span><span class="m">0</span> passed<span class="o">)</span>
<span class="m">4</span> steps <span class="o">(</span><span class="m">4</span> undefined, <span class="m">0</span> passed<span class="o">)</span>

You can implement step definitions <span class="k">for</span> undefined steps with these snippets:

<span class="o">[</span> example snippets removed <span class="k">for</span> readability <span class="o">]</span>
</pre></div>

<p>You will notice here that our tests have obviously not passed as we have not
yet written any code to be executed by our feature file. The code to be executed
is defined in what is known as steps. Indeed, the output from Lettuce is trying
to be helpful and provide you with the outline for the steps above for you to
fill in with the Python code to be executed. You should think of each line in
the scenario as an instruction for Lettuce to execute, and the steps are what
Lettuce will match with to execute the correct code.</p>

<h3>Define Your Steps</h3>

<p>Underneath the feature file are the steps, which are essentially just Python
code and regular expressions to allow Lettuce to match each line in the feature
file to its step which is to be executed. To begin with, open up the <code>steps.py</code>
file and add the following imports from the Lettuce library:</p>

<div class="highlight highlight-python"><pre><span class="kn">from</span> <span class="nn">lettuce</span> <span class="kn">import</span> <span class="n">step</span><span class="p">,</span> <span class="n">world</span><span class="p">,</span> <span class="n">before</span>
<span class="kn">from</span> <span class="nn">nose.tools</span> <span class="kn">import</span> <span class="n">assert_equals</span>
</pre></div>

<p>The key things to note here are the imports from Lettuce, which allow you to
define the steps and store values to be used across each step in the <a href="http://lettuce.it/reference/terrain.html#lettuce-world"><code>world</code></a>
object (more to follow).  Also, the imports from the nose tests library, which
allow nicer assertions to be made in your tests.</p>

<p>Now you will add a <code>@before.all</code> step (known in Lettuce as a <a href="http://lettuce.it/reference/terrain.html#lettuce-hooks">hook</a>,
which, as the name suggests, will execute some code before each scenario. You
will use this code block to create an instance of Flask's inbuilt test client,
which will allow you to make requests to your application as if you were a real
client. Add the following code to the <code>steps.py</code> file now (don't forget to add
the import statement towards the top of your file):</p>

<div class="highlight highlight-python"><pre><span class="kn">from</span> <span class="nn">app.application</span> <span class="kn">import</span> <span class="n">app</span>


<span class="nd">@before.all</span>
<span class="k">def</span> <span class="nf">before_all</span><span class="p">():</span>
    <span class="n">world</span><span class="o">.</span><span class="n">app</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">test_client</span><span class="p">()</span>
</pre></div>

<p>With the test client in place, let's now define the first step from our
scenario, which is the line <code>Given some users are in the system</code>:</p>

<div class="highlight highlight-python"><pre><span class="kn">from</span> <span class="nn">app.views</span> <span class="kn">import</span> <span class="n">USERS</span>


<span class="nd">@step</span><span class="p">(</span><span class="s">u'Given some users are in the system'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">given_some_users_are_in_the_system</span><span class="p">(</span><span class="n">step</span><span class="p">):</span>
    <span class="n">USERS</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="s">'david01'</span><span class="p">:</span> <span class="p">{</span><span class="s">'name'</span><span class="p">:</span> <span class="s">'David Sale'</span><span class="p">}})</span>
</pre></div>

<p>The step adds some test data to the in memory <a href="https://docs.python.org/2/tutorial/datastructures.html#dictionaries">dictionary</a>,
which, for the purposes of this tutorial application, acts like our database in
a real system. You will notice the step is importing some code from our
application, which you will need to add now. <code>USERS</code> is an in-memory data store,
which, for the purposes of this tutorial, takes the place of the database which
would likely be used in a real application. Let's add the <code>USERS</code> code to the
<code>views.py</code> file now:</p>

<div class="highlight highlight-python"><pre><span class="n">USERS</span> <span class="o">=</span> <span class="p">{}</span>
</pre></div>

<p>With this in place, you can now define the next step, which will make the call
to our application to retrieve a user's details and store the response in the
<code>world</code> object provided by Lettuce. This object allows us to save variables,
which we can then access across different steps, which otherwise would not
really be possible, or would lead to messy code. Add the following code to
<code>steps.py</code>:</p>

<div class="highlight highlight-python"><pre><span class="nd">@step</span><span class="p">(</span><span class="s">u'When I retrieve the customer </span><span class="se">\'</span><span class="s">(.*)</span><span class="se">\'</span><span class="s">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">when_i_retrieve_the_customer_group1</span><span class="p">(</span><span class="n">step</span><span class="p">,</span> <span class="n">username</span><span class="p">):</span>
    <span class="n">world</span><span class="o">.</span><span class="n">response</span> <span class="o">=</span> <span class="n">world</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'/user/{}'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">username</span><span class="p">))</span>
</pre></div>

<p>In this step definition, notice how a capture group is used in the regular
expression allowing us to pass in variables to the step.  This allows for the
reuse of steps talked about earlier in the tutorial and gives you a great deal
of power and flexibility in your behaviour tests. When you provide a capture
group in the regular expression, Lettuce will automatically pass it through to
the method as an argument, which you can see in this step is named <code>username</code>.
You can of course have many variables in your step definition as required.</p>

<p>Next, you will add your first assertion step, which will check the status code
of the response from your application. Add this code to your <code>steps.py</code> file:</p>

<div class="highlight highlight-python"><pre><span class="nd">@step</span><span class="p">(</span><span class="s">u'Then I should get a </span><span class="se">\'</span><span class="s">(.*)</span><span class="se">\'</span><span class="s"> response'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">then_i_should_get_a_group1_response_group2</span><span class="p">(</span><span class="n">step</span><span class="p">,</span> <span class="n">expected_status_code</span><span class="p">):</span>
    <span class="n">assert_equals</span><span class="p">(</span><span class="n">world</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">expected_status_code</span><span class="p">))</span>
</pre></div>

<p>Here you make use of the assertion imported from the nosetests library
<code>assert_equals</code>, which takes two arguments and checks if they are equal to each
other. In this step, you again make use of a capture group to put the expected
status code in a variable. In this case, the variable should be an integer, so
we convert the type before making the comparison to the status code returned by
your application.</p>

<p>Finally, you need a step to check the data returned from your application was as
expected. This step definition is also a good example of how Lettuce supports
the passing in of a table of data to a step definition, which in this case is
ideal, as the data may grow quite large and the table helps the readability of
what is expected. Add the final step to the <code>steps.py</code> file:</p>

<div class="highlight highlight-python"><pre><span class="nd">@step</span><span class="p">(</span><span class="s">u'And the following user details are returned:'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">and_the_following_user_details</span><span class="p">(</span><span class="n">step</span><span class="p">):</span>
    <span class="n">assert_equals</span><span class="p">(</span><span class="n">step</span><span class="o">.</span><span class="n">hashes</span><span class="p">,</span> <span class="p">[</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">world</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">)])</span>
</pre></div>

<p>In this step you can see that when you pass in a data table, it can be accessed
from the <code>step</code> object under the name <code>hashes</code>. This is essentially a list of
dictionaries for each row of the table you passed in. In our application, it
will return a <a href="https://en.wikipedia.org/wiki/JSON">JSON</a> string which is just
the dictionary of the key <code>name</code> to the user's name. Therefore, the assertion
just loads the string returned form our application into a Python dictionary,
and then we wrap it in a list so that it is equal to our expectation.</p>

<h3>Executing the Scenario</h3>

<p>With all your steps in place now, describing the expected functionality of your
application, you can now execute the test and see that it fails. As before,
execute the following command in a command prompt of your choice:</p>

<div class="highlight highlight-bash"><pre>lettuce <span class="nb">test</span>/features
</pre></div>

<p>As expected the tests should fail with the following output:</p>

<div class="highlight highlight-bash"><pre><span class="nv">$ </span>lettuce <span class="nb">test</span>/features/

Feature: Handle storing, retrieving and deleting customer details <span class="c"># test/features/user.feature:1</span>

  Scenario: Retrieve a customers details                          <span class="c"># test/features/user.feature:3</span>
    Given some users are in the system                            <span class="c"># test/features/steps.py:17</span>
    When I retrieve the customer <span class="s1">'david01'</span>                        <span class="c"># test/features/steps.py:22</span>
    Then I should get a <span class="s1">'200'</span> response                            <span class="c"># test/features/steps.py:27</span>
    Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
        <span class="o">[</span> SNIPPET REMOVED FOR READABILITY <span class="o">]</span>
        raise self.failureException<span class="o">(</span>msg<span class="o">)</span>
    AssertionError: <span class="m">404</span> !<span class="o">=</span> 200
    And the following user details are returned:                  <span class="c"># test/features/steps.py:32</span>
      <span class="p">|</span> name       <span class="p">|</span>
      <span class="p">|</span> David Sale <span class="p">|</span>

<span class="m">1</span> feature <span class="o">(</span><span class="m">0</span> passed<span class="o">)</span>
<span class="m">1</span> scenario <span class="o">(</span><span class="m">0</span> passed<span class="o">)</span>
<span class="m">4</span> steps <span class="o">(</span><span class="m">1</span> failed, <span class="m">1</span> skipped, <span class="m">2</span> passed<span class="o">)</span>

List of failed scenarios:
  Scenario: Retrieve a customers details                          <span class="c"># test/features/user.feature:3</span>
</pre></div>

<p>As you can see, our application is currently returning a <code>404 Not Found</code>
response, as you have not yet defined the URL <code>/user/&lt;username&gt;</code> that the test
is trying to access. You can go ahead and add the code now to get the test
passing, and deliver the requirement you have outlined in your behaviour test.
Add the following code to <code>views.py</code>:</p>

<div class="highlight highlight-python"><pre><span class="n">GET</span> <span class="o">=</span> <span class="s">'GET'</span>


<span class="nd">@app.route</span><span class="p">(</span><span class="s">"/user/&lt;username&gt;"</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="n">GET</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">access_users</span><span class="p">(</span><span class="n">username</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="n">GET</span><span class="p">:</span>
        <span class="n">user_details</span> <span class="o">=</span> <span class="n">USERS</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">username</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">user_details</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">jsonify</span><span class="p">(</span><span class="n">user_details</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">status</span><span class="o">=</span><span class="mi">404</span><span class="p">)</span>
</pre></div>

<p>The code first registers the new URL within your Flask application of
<code>/user/&lt;username&gt;</code> (the angled brackets indicate to Flask to capture anything
after the slash into a variable named <code>username</code>). You then define the method
that handles requests to that URL and state that only <code>GET</code> requests can be made
to this URL. You then check that the request received is indeed a <code>GET</code> and, if
it is, try to look up the details of the <code>username</code> provided from the <code>USERS</code>
data store. If the user's details are found, you return a 200 response, and the
user's details as a JSON response, otherwise a 404 Not Found response is
returned.</p>

<p>If you execute your tests from the command line once again, you will see they
are now all passing:</p>

<div class="highlight highlight-bash"><pre><span class="nv">$ </span>lettuce <span class="nb">test</span>/features/

Feature: Handle storing, retrieving and deleting customer details <span class="c"># test/features/user.feature:1</span>

  Scenario: Retrieve a customers details                          <span class="c"># test/features/user.feature:3</span>
    Given some users are in the system                            <span class="c"># test/features/steps.py:17</span>
    When I retrieve the customer <span class="s1">'david01'</span>                        <span class="c"># test/features/steps.py:22</span>
    Then I should get a <span class="s1">'200'</span> response                            <span class="c"># test/features/steps.py:27</span>
    And the following user details are returned:                  <span class="c"># test/features/steps.py:32</span>
      <span class="p">|</span> name       <span class="p">|</span>
      <span class="p">|</span> David Sale <span class="p">|</span>

<span class="m">1</span> feature <span class="o">(</span><span class="m">1</span> passed<span class="o">)</span>
<span class="m">1</span> scenario <span class="o">(</span><span class="m">1</span> passed<span class="o">)</span>
<span class="m">4</span> steps <span class="o">(</span><span class="m">4</span> passed<span class="o">)</span>
</pre></div>

<p>You have now delivered the functionality described in your behaviour test, and
can move onto writing the next scenario and making that pass. Clearly, this
process is an iterative cycle, which you can follow daily under your application
is delivered in its entirety.</p>

<h3>Additional Tasks</h3>

<p>If you enjoyed following this tutorial, why not extend the code you have now by
behaviour-driven development testing the following additional requirements:</p>

<ul>
<li>Support POST operations to add a new user's details to the USERS data store.</li>
<li>Support PUT operations to update a user's details from the USERS data store.</li>
<li>Support DELETE operations to remove a user's details from the USERS data store.</li>
</ul>

<p>You should be able to reuse or tweak the currently defined steps to test the
above functionality with minimal changes.</p>

<h2>Conclusion</h2>

<p>Behaviour-Driven Development is an excellent process to follow, whether you are
a solo developer working on a small project, or a developer working on a large
enterprise application. The process ensures your code meets the requirements you
set out up front, providing a formal pause for thought before you begin
developing the features you set out to deliver. BDD has the added benefit of
providing "living" documentation for your code that is, by its very nature, kept
up to date as you maintain the tests and deliver new functionality.</p>

<p>By following this tutorial, you have hopefully picked up the core skills
required to write behaviour tests of this style, execute the tests and deliver
the code required to make them pass.</p><p>This article is brought with ❤ to you by <a href="https://semaphoreci.com?utm_source=rss&utm_medium=feed&utm_term=BDD_Testing_a_Restful_Web_Application_in_Python&utm_content=bottomlink&utm_campaign=community">Semaphore</a>.</p>";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-13T12:50:28+00:00";}s:12:"atom_content";s:28287:"<p>This article is brought with ❤ to you by <a href="https://semaphoreci.com?utm_source=rss&utm_medium=feed&utm_term=BDD_Testing_a_Restful_Web_Application_in_Python&utm_content=toplink&utm_campaign=community">Semaphore</a>.</p><h3>Introduction</h3>

<p><a href="https://semaphoreci.com/community/tutorials/behavior-driven-development">Behaviour-driven development</a> allows you to describe how your application should
behave, and drive the development of features by adding new tests and making
them pass. By clearly describing how your application behaves in different
scenarios, you can be confident that the product delivered at the end meets the
requirements you set out to deliver. Following BDD lets you build up your
application piece by piece, and also provides you with living documentation of
your entire system, that is naturally maintained as you keep the tests passing.</p>

<p>By the end of this tutorial you should be able to:</p>

<ul>
<li>Create a simple REST application using the Flask framework</li>
<li>Write behaviour tests (also known as acceptance tests) using the Lettuce
library</li>
<li>Explain the structure of the tests, in terms of the Given, When, Then, And
syntax</li>
<li>Execute and debug the tests</li>
</ul>

<h2>Prerequisites</h2>

<p>Before you begin this tutorial, ensure the following are installed to your
system:</p>

<ul>
<li><a href="https://www.python.org/downloads/">Python 2.7.x</a></li>
<li><a href="http://lettuce.it">Lettuce</a></li>
<li><a href="http://flask.pocoo.org">Flask</a></li>
<li><a href="https://nose.readthedocs.org/en/latest/">Nosetests</a></li>
<li>A basic understanding of <a href="https://en.wikipedia.org/wiki/Representational_state_transfer">REST</a> principles</li>
</ul>

<h2>Set Up Your Project Structure</h2>

<p>In this tutorial, we will build up a simple RESTful application handling the
storing and retrieval of user data. To start, create the following directory
structure for the project on your filesystem, along with the corresponding empty
files to be added to later:</p>

<pre><code> .
├── test
│     ├── features
│            ├── __init__.py
│            ├── steps.py
│            └── user.feature  
└── app
     ├── __init__.py
     ├── application.py
     └── views.py
</code></pre>

<p>The files can be described as follows:</p>

<ul>
<li>
<code>__init__.py</code>: mark directory as a Python package.</li>
<li>
<code>steps.py</code>: The Python code which is executed by the <code>.feature</code> files.</li>
<li>
<code>user.feature</code>: The behaviour test which describes the functionality of the
user endpoint in our application.</li>
<li>
<code>application.py</code>: The entry point where our Flask application is created and
the server started.</li>
<li>
<code>views.py</code>: Code to handle the registration of views and defines the responses
to various HTTP requests made on the view.</li>
</ul>

<h2>Create the Skeleton Flask Application</h2>

<p>For the purposes of this tutorial, you will need to define a simple web
application using the Flask framework, to which you will add features following
the BDD approach outlined later in the tutorial.  For now, let's get an empty
skeleton application running for you to add to.  Open up the file
<code>application.py</code> and add the following code:</p>

<div class="highlight highlight-python"><pre><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</pre></div>

<p>This code simply creates our Flask instance, and allows you to start the
packaged development server Flask provides when you execute this Python file.
Should you have everything installed correctly, open up a command prompt on
your operating system and execute the following command from the root of the
project:</p>

<div class="highlight highlight-bash"><pre>python app/application.py
</pre></div>

<p>If you see the following output, then your Flask application is running
correctly, and you can proceed with the tutorial:</p>

<div class="highlight highlight-bash"><pre><span class="nv">$ </span>python app/application.py
 * Running on http://127.0.0.1:5000/ <span class="o">(</span>Press CTRL+C to quit<span class="o">)</span>
</pre></div>

<h2>Write Your First BDD Test</h2>

<p>As we want to follow BDD, we will start by writing the test first which
describes the initial functionality we want to develop in our application. Once
the test is in place and failing, we will proceed to writing the code to make
the test pass.</p>

<h3>Write the Feature file</h3>

<p>Edit <code>user.feature</code> and add the following code to the first line:</p>

<div class="highlight highlight-gherkin"><pre><span class="k">Feature:</span><span class="nf"> Handle storing, retrieving and deleting customer details</span>
</pre></div>

<p>This first line is simply documentation for what functionality the set of
scenarios in this file cover.  Following this, let's add your first scenario:</p>

<div class="highlight highlight-gherkin"><pre><span class="nf">  </span><span class="k">Scenario:</span><span class="nf"> Retrieve a customers details</span>
</pre></div>

<p>Again, this line is simply documentation on what functionality this specific
scenario is testing. Now, let's add the actual body of the scenario test:</p>

<div class="highlight highlight-gherkin"><pre><span class="nf">  </span><span class="k">Scenario:</span><span class="nf"> Retrieve a customers details</span>
<span class="k">      Given </span><span class="nf">some users are in the system</span>
<span class="nf">      </span><span class="k">When </span><span class="nf">I retrieve the customer 'david</span><span class="s">01</span><span class="nf">'</span>
<span class="nf">      </span><span class="k">Then </span><span class="nf">I should get a '</span><span class="s">200</span><span class="nf">' response</span>
<span class="nf">      </span><span class="k">And </span><span class="nf">the following user details are returned:</span>
<span class="k">        |</span><span class="s"> name</span><span class="k">       |</span><span class="nf"></span>
<span class="k">        |</span><span class="s"> David Sale</span><span class="k"> |</span>
</pre></div>

<p>You will notice the test makes use of the standard set of keywords known as
<a href="https://cucumber.io/docs/reference">gherkin</a> (e.g. <code>Given</code>, <code>When</code>, <code>Then</code>,
<code>And</code>). The syntax provides structure to your test, and generally follows the
following pattern:</p>

<ul>
<li>Given: the setup or initialisation of conditions for your test scenario. Here,
you might prime some mocks to return a successful or error response for example.
In the test above, you ensure some users are registered in the system so we can
query it.</li>
<li>When: the action under test, for example making a GET request to an endpoint
on your application.</li>
<li>Then: the assertions/expectations you wish to make in your test. For example,
in the above scenario, you are expecting a 200 status code in the response from
the web application.</li>
<li>And: allows you to continue from the keyword above. If your previous
statement began with <code>When</code>, and your next line begins with <code>And</code>, the <code>And</code>
line will be treated as a <code>When</code> also.</li>
</ul>

<p>One other important thing to note is the style of the test and how it reads. You
want to make your scenarios as easy to read and reusable as possible, allowing
anyone to understand what the test is doing, the functionality under test and
how you expect it to behave. You should make a great effort to reuse your steps
as much as possible, which keeps the amount of new code you need to write to a
minimum, and keeps consistency high across your test suite. We will cover some
techniques on reusable steps later in the tutorial, such as taking values as
parameters in your steps.</p>

<p>With Lettuce installed to your system, you can now execute the <code>user.feature</code>
file from the root directory of your project by executing the following command
in your operating system's command prompt:</p>

<div class="highlight highlight-bash"><pre>lettuce <span class="nb">test</span>/features
</pre></div>

<p>You should see output that is similar to the following:</p>

<div class="highlight highlight-bash"><pre><span class="nv">$ </span>lettuce <span class="nb">test</span>/features/

Feature: Handle storing, retrieving and deleting customer details <span class="c"># test/features/user.feature:1</span>

  Scenario: Retrieve a customers details                          <span class="c"># test/features/user.feature:3</span>
    Given some users are in the system                            <span class="c"># test/features/user.feature:4</span>
    When I retrieve the customer <span class="s1">'david01'</span>                        <span class="c"># test/features/user.feature:5</span>
    Then I should get a <span class="s1">'200'</span> response                            <span class="c"># test/features/user.feature:6</span>
    And the following user details are returned:                  <span class="c"># test/features/user.feature:7</span>
      <span class="p">|</span> name       <span class="p">|</span>
      <span class="p">|</span> David Sale <span class="p">|</span>

<span class="m">1</span> feature <span class="o">(</span><span class="m">0</span> passed<span class="o">)</span>
<span class="m">1</span> scenario <span class="o">(</span><span class="m">0</span> passed<span class="o">)</span>
<span class="m">4</span> steps <span class="o">(</span><span class="m">4</span> undefined, <span class="m">0</span> passed<span class="o">)</span>

You can implement step definitions <span class="k">for</span> undefined steps with these snippets:

<span class="o">[</span> example snippets removed <span class="k">for</span> readability <span class="o">]</span>
</pre></div>

<p>You will notice here that our tests have obviously not passed as we have not
yet written any code to be executed by our feature file. The code to be executed
is defined in what is known as steps. Indeed, the output from Lettuce is trying
to be helpful and provide you with the outline for the steps above for you to
fill in with the Python code to be executed. You should think of each line in
the scenario as an instruction for Lettuce to execute, and the steps are what
Lettuce will match with to execute the correct code.</p>

<h3>Define Your Steps</h3>

<p>Underneath the feature file are the steps, which are essentially just Python
code and regular expressions to allow Lettuce to match each line in the feature
file to its step which is to be executed. To begin with, open up the <code>steps.py</code>
file and add the following imports from the Lettuce library:</p>

<div class="highlight highlight-python"><pre><span class="kn">from</span> <span class="nn">lettuce</span> <span class="kn">import</span> <span class="n">step</span><span class="p">,</span> <span class="n">world</span><span class="p">,</span> <span class="n">before</span>
<span class="kn">from</span> <span class="nn">nose.tools</span> <span class="kn">import</span> <span class="n">assert_equals</span>
</pre></div>

<p>The key things to note here are the imports from Lettuce, which allow you to
define the steps and store values to be used across each step in the <a href="http://lettuce.it/reference/terrain.html#lettuce-world"><code>world</code></a>
object (more to follow).  Also, the imports from the nose tests library, which
allow nicer assertions to be made in your tests.</p>

<p>Now you will add a <code>@before.all</code> step (known in Lettuce as a <a href="http://lettuce.it/reference/terrain.html#lettuce-hooks">hook</a>,
which, as the name suggests, will execute some code before each scenario. You
will use this code block to create an instance of Flask's inbuilt test client,
which will allow you to make requests to your application as if you were a real
client. Add the following code to the <code>steps.py</code> file now (don't forget to add
the import statement towards the top of your file):</p>

<div class="highlight highlight-python"><pre><span class="kn">from</span> <span class="nn">app.application</span> <span class="kn">import</span> <span class="n">app</span>


<span class="nd">@before.all</span>
<span class="k">def</span> <span class="nf">before_all</span><span class="p">():</span>
    <span class="n">world</span><span class="o">.</span><span class="n">app</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">test_client</span><span class="p">()</span>
</pre></div>

<p>With the test client in place, let's now define the first step from our
scenario, which is the line <code>Given some users are in the system</code>:</p>

<div class="highlight highlight-python"><pre><span class="kn">from</span> <span class="nn">app.views</span> <span class="kn">import</span> <span class="n">USERS</span>


<span class="nd">@step</span><span class="p">(</span><span class="s">u'Given some users are in the system'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">given_some_users_are_in_the_system</span><span class="p">(</span><span class="n">step</span><span class="p">):</span>
    <span class="n">USERS</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="s">'david01'</span><span class="p">:</span> <span class="p">{</span><span class="s">'name'</span><span class="p">:</span> <span class="s">'David Sale'</span><span class="p">}})</span>
</pre></div>

<p>The step adds some test data to the in memory <a href="https://docs.python.org/2/tutorial/datastructures.html#dictionaries">dictionary</a>,
which, for the purposes of this tutorial application, acts like our database in
a real system. You will notice the step is importing some code from our
application, which you will need to add now. <code>USERS</code> is an in-memory data store,
which, for the purposes of this tutorial, takes the place of the database which
would likely be used in a real application. Let's add the <code>USERS</code> code to the
<code>views.py</code> file now:</p>

<div class="highlight highlight-python"><pre><span class="n">USERS</span> <span class="o">=</span> <span class="p">{}</span>
</pre></div>

<p>With this in place, you can now define the next step, which will make the call
to our application to retrieve a user's details and store the response in the
<code>world</code> object provided by Lettuce. This object allows us to save variables,
which we can then access across different steps, which otherwise would not
really be possible, or would lead to messy code. Add the following code to
<code>steps.py</code>:</p>

<div class="highlight highlight-python"><pre><span class="nd">@step</span><span class="p">(</span><span class="s">u'When I retrieve the customer </span><span class="se">\'</span><span class="s">(.*)</span><span class="se">\'</span><span class="s">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">when_i_retrieve_the_customer_group1</span><span class="p">(</span><span class="n">step</span><span class="p">,</span> <span class="n">username</span><span class="p">):</span>
    <span class="n">world</span><span class="o">.</span><span class="n">response</span> <span class="o">=</span> <span class="n">world</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'/user/{}'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">username</span><span class="p">))</span>
</pre></div>

<p>In this step definition, notice how a capture group is used in the regular
expression allowing us to pass in variables to the step.  This allows for the
reuse of steps talked about earlier in the tutorial and gives you a great deal
of power and flexibility in your behaviour tests. When you provide a capture
group in the regular expression, Lettuce will automatically pass it through to
the method as an argument, which you can see in this step is named <code>username</code>.
You can of course have many variables in your step definition as required.</p>

<p>Next, you will add your first assertion step, which will check the status code
of the response from your application. Add this code to your <code>steps.py</code> file:</p>

<div class="highlight highlight-python"><pre><span class="nd">@step</span><span class="p">(</span><span class="s">u'Then I should get a </span><span class="se">\'</span><span class="s">(.*)</span><span class="se">\'</span><span class="s"> response'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">then_i_should_get_a_group1_response_group2</span><span class="p">(</span><span class="n">step</span><span class="p">,</span> <span class="n">expected_status_code</span><span class="p">):</span>
    <span class="n">assert_equals</span><span class="p">(</span><span class="n">world</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">expected_status_code</span><span class="p">))</span>
</pre></div>

<p>Here you make use of the assertion imported from the nosetests library
<code>assert_equals</code>, which takes two arguments and checks if they are equal to each
other. In this step, you again make use of a capture group to put the expected
status code in a variable. In this case, the variable should be an integer, so
we convert the type before making the comparison to the status code returned by
your application.</p>

<p>Finally, you need a step to check the data returned from your application was as
expected. This step definition is also a good example of how Lettuce supports
the passing in of a table of data to a step definition, which in this case is
ideal, as the data may grow quite large and the table helps the readability of
what is expected. Add the final step to the <code>steps.py</code> file:</p>

<div class="highlight highlight-python"><pre><span class="nd">@step</span><span class="p">(</span><span class="s">u'And the following user details are returned:'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">and_the_following_user_details</span><span class="p">(</span><span class="n">step</span><span class="p">):</span>
    <span class="n">assert_equals</span><span class="p">(</span><span class="n">step</span><span class="o">.</span><span class="n">hashes</span><span class="p">,</span> <span class="p">[</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">world</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">data</span><span class="p">)])</span>
</pre></div>

<p>In this step you can see that when you pass in a data table, it can be accessed
from the <code>step</code> object under the name <code>hashes</code>. This is essentially a list of
dictionaries for each row of the table you passed in. In our application, it
will return a <a href="https://en.wikipedia.org/wiki/JSON">JSON</a> string which is just
the dictionary of the key <code>name</code> to the user's name. Therefore, the assertion
just loads the string returned form our application into a Python dictionary,
and then we wrap it in a list so that it is equal to our expectation.</p>

<h3>Executing the Scenario</h3>

<p>With all your steps in place now, describing the expected functionality of your
application, you can now execute the test and see that it fails. As before,
execute the following command in a command prompt of your choice:</p>

<div class="highlight highlight-bash"><pre>lettuce <span class="nb">test</span>/features
</pre></div>

<p>As expected the tests should fail with the following output:</p>

<div class="highlight highlight-bash"><pre><span class="nv">$ </span>lettuce <span class="nb">test</span>/features/

Feature: Handle storing, retrieving and deleting customer details <span class="c"># test/features/user.feature:1</span>

  Scenario: Retrieve a customers details                          <span class="c"># test/features/user.feature:3</span>
    Given some users are in the system                            <span class="c"># test/features/steps.py:17</span>
    When I retrieve the customer <span class="s1">'david01'</span>                        <span class="c"># test/features/steps.py:22</span>
    Then I should get a <span class="s1">'200'</span> response                            <span class="c"># test/features/steps.py:27</span>
    Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
        <span class="o">[</span> SNIPPET REMOVED FOR READABILITY <span class="o">]</span>
        raise self.failureException<span class="o">(</span>msg<span class="o">)</span>
    AssertionError: <span class="m">404</span> !<span class="o">=</span> 200
    And the following user details are returned:                  <span class="c"># test/features/steps.py:32</span>
      <span class="p">|</span> name       <span class="p">|</span>
      <span class="p">|</span> David Sale <span class="p">|</span>

<span class="m">1</span> feature <span class="o">(</span><span class="m">0</span> passed<span class="o">)</span>
<span class="m">1</span> scenario <span class="o">(</span><span class="m">0</span> passed<span class="o">)</span>
<span class="m">4</span> steps <span class="o">(</span><span class="m">1</span> failed, <span class="m">1</span> skipped, <span class="m">2</span> passed<span class="o">)</span>

List of failed scenarios:
  Scenario: Retrieve a customers details                          <span class="c"># test/features/user.feature:3</span>
</pre></div>

<p>As you can see, our application is currently returning a <code>404 Not Found</code>
response, as you have not yet defined the URL <code>/user/&lt;username&gt;</code> that the test
is trying to access. You can go ahead and add the code now to get the test
passing, and deliver the requirement you have outlined in your behaviour test.
Add the following code to <code>views.py</code>:</p>

<div class="highlight highlight-python"><pre><span class="n">GET</span> <span class="o">=</span> <span class="s">'GET'</span>


<span class="nd">@app.route</span><span class="p">(</span><span class="s">"/user/&lt;username&gt;"</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="n">GET</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">access_users</span><span class="p">(</span><span class="n">username</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="n">GET</span><span class="p">:</span>
        <span class="n">user_details</span> <span class="o">=</span> <span class="n">USERS</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">username</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">user_details</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">jsonify</span><span class="p">(</span><span class="n">user_details</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">status</span><span class="o">=</span><span class="mi">404</span><span class="p">)</span>
</pre></div>

<p>The code first registers the new URL within your Flask application of
<code>/user/&lt;username&gt;</code> (the angled brackets indicate to Flask to capture anything
after the slash into a variable named <code>username</code>). You then define the method
that handles requests to that URL and state that only <code>GET</code> requests can be made
to this URL. You then check that the request received is indeed a <code>GET</code> and, if
it is, try to look up the details of the <code>username</code> provided from the <code>USERS</code>
data store. If the user's details are found, you return a 200 response, and the
user's details as a JSON response, otherwise a 404 Not Found response is
returned.</p>

<p>If you execute your tests from the command line once again, you will see they
are now all passing:</p>

<div class="highlight highlight-bash"><pre><span class="nv">$ </span>lettuce <span class="nb">test</span>/features/

Feature: Handle storing, retrieving and deleting customer details <span class="c"># test/features/user.feature:1</span>

  Scenario: Retrieve a customers details                          <span class="c"># test/features/user.feature:3</span>
    Given some users are in the system                            <span class="c"># test/features/steps.py:17</span>
    When I retrieve the customer <span class="s1">'david01'</span>                        <span class="c"># test/features/steps.py:22</span>
    Then I should get a <span class="s1">'200'</span> response                            <span class="c"># test/features/steps.py:27</span>
    And the following user details are returned:                  <span class="c"># test/features/steps.py:32</span>
      <span class="p">|</span> name       <span class="p">|</span>
      <span class="p">|</span> David Sale <span class="p">|</span>

<span class="m">1</span> feature <span class="o">(</span><span class="m">1</span> passed<span class="o">)</span>
<span class="m">1</span> scenario <span class="o">(</span><span class="m">1</span> passed<span class="o">)</span>
<span class="m">4</span> steps <span class="o">(</span><span class="m">4</span> passed<span class="o">)</span>
</pre></div>

<p>You have now delivered the functionality described in your behaviour test, and
can move onto writing the next scenario and making that pass. Clearly, this
process is an iterative cycle, which you can follow daily under your application
is delivered in its entirety.</p>

<h3>Additional Tasks</h3>

<p>If you enjoyed following this tutorial, why not extend the code you have now by
behaviour-driven development testing the following additional requirements:</p>

<ul>
<li>Support POST operations to add a new user's details to the USERS data store.</li>
<li>Support PUT operations to update a user's details from the USERS data store.</li>
<li>Support DELETE operations to remove a user's details from the USERS data store.</li>
</ul>

<p>You should be able to reuse or tweak the currently defined steps to test the
above functionality with minimal changes.</p>

<h2>Conclusion</h2>

<p>Behaviour-Driven Development is an excellent process to follow, whether you are
a solo developer working on a small project, or a developer working on a large
enterprise application. The process ensures your code meets the requirements you
set out up front, providing a formal pause for thought before you begin
developing the features you set out to deliver. BDD has the added benefit of
providing "living" documentation for your code that is, by its very nature, kept
up to date as you maintain the tests and deliver new functionality.</p>

<p>By following this tutorial, you have hopefully picked up the core skills
required to write behaviour tests of this style, execute the tests and deliver
the code required to make them pass.</p><p>This article is brought with ❤ to you by <a href="https://semaphoreci.com?utm_source=rss&utm_medium=feed&utm_term=BDD_Testing_a_Restful_Web_Application_in_Python&utm_content=bottomlink&utm_campaign=community">Semaphore</a>.</p>";}i:4;a:6:{s:5:"about";s:78:"http://python4kids.brendanscott.com/2015/09/07/python-for-kids-book-project-9/";s:5:"title";s:46:"Python 4 Kids: Python for Kids Book: Project 9";s:4:"link";s:78:"http://python4kids.brendanscott.com/2015/09/07/python-for-kids-book-project-9/";s:7:"content";a:1:{s:7:"encoded";s:2318:"<p>In these posts I outline the contents of each project in my book <a href="http://www.amazon.com/gp/product/1119093104/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=1119093104&linkCode=as2&tag=pytho-20&linkId=YFEKPZAXBPJX3SUM">Python For Kids For Dummies</a>.  If you have questions or comments about the project listed in the title post them here. Any improvements will also be listed here.</p>
<h1>What’s in Project 9 (Address Book)</h1>
<p>While Project 6 introduced the concept of objects and showed how even a lowly string is actually an object, Project 9 is about how you can make your own objects using the <em>class</em> keyword.  Project 9 uses classes to implement a simple address book application.  I discuss the difference between a class and an instance of the class and the importance of having a reference variable (<em>self</em>) so that an instance can refer to itself. You learn about constructor functions and how to override a method (<em>__repr__</em>) to make print statements work properly on your custom method.</p>
<p>Since having an address book is not much use if you can&#8217;t save and update it, I also introduce the <em>pickle</em> module. It is used to store general Python objects (if they&#8217;re hashable!).  The address book is given save and load functions as well as a rudimentary user interface.</p>
<h3>Improvements (1st printing):</h3>
<p>On page 278 in the add_entry method, the second through fourth occurrences of the code</p>
<pre class="brush: python; title: ; notranslate">
if first_name == &quot;q&quot;:
</pre>
<p>Should be</p>
<pre class="brush: python; title: ; notranslate">

if family_name == &quot;q&quot;:

if email_address == &quot;q&quot;:
</pre>
<p>and</p>
<pre class="brush: python; title: ; notranslate">
if date_of_birth == &quot;q&quot;:
</pre>
<p>respectively. This should be corrected in the second printing. The code samples have the correct code.</p><br />  <a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/python4kids.wordpress.com/752/"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/python4kids.wordpress.com/752/" /></a> <img alt="" border="0" src="http://pixel.wp.com/b.gif?host=python4kids.brendanscott.com&blog=14472219&post=752&subd=python4kids&ref=&feed=1" width="1" height="1" />";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-13T11:59:22+00:00";}s:12:"atom_content";s:2318:"<p>In these posts I outline the contents of each project in my book <a href="http://www.amazon.com/gp/product/1119093104/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=1119093104&linkCode=as2&tag=pytho-20&linkId=YFEKPZAXBPJX3SUM">Python For Kids For Dummies</a>.  If you have questions or comments about the project listed in the title post them here. Any improvements will also be listed here.</p>
<h1>What’s in Project 9 (Address Book)</h1>
<p>While Project 6 introduced the concept of objects and showed how even a lowly string is actually an object, Project 9 is about how you can make your own objects using the <em>class</em> keyword.  Project 9 uses classes to implement a simple address book application.  I discuss the difference between a class and an instance of the class and the importance of having a reference variable (<em>self</em>) so that an instance can refer to itself. You learn about constructor functions and how to override a method (<em>__repr__</em>) to make print statements work properly on your custom method.</p>
<p>Since having an address book is not much use if you can&#8217;t save and update it, I also introduce the <em>pickle</em> module. It is used to store general Python objects (if they&#8217;re hashable!).  The address book is given save and load functions as well as a rudimentary user interface.</p>
<h3>Improvements (1st printing):</h3>
<p>On page 278 in the add_entry method, the second through fourth occurrences of the code</p>
<pre class="brush: python; title: ; notranslate">
if first_name == &quot;q&quot;:
</pre>
<p>Should be</p>
<pre class="brush: python; title: ; notranslate">

if family_name == &quot;q&quot;:

if email_address == &quot;q&quot;:
</pre>
<p>and</p>
<pre class="brush: python; title: ; notranslate">
if date_of_birth == &quot;q&quot;:
</pre>
<p>respectively. This should be corrected in the second printing. The code samples have the correct code.</p><br />  <a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/python4kids.wordpress.com/752/"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/python4kids.wordpress.com/752/" /></a> <img alt="" border="0" src="http://pixel.wp.com/b.gif?host=python4kids.brendanscott.com&blog=14472219&post=752&subd=python4kids&ref=&feed=1" width="1" height="1" />";}i:5;a:6:{s:5:"about";s:90:"https://semaphoreci.com/community/tutorials/setting-up-a-bdd-stack-on-a-django-application";s:5:"title";s:67:"Semaphore Community: Setting Up a BDD Stack on a Django Application";s:4:"link";s:90:"https://semaphoreci.com/community/tutorials/setting-up-a-bdd-stack-on-a-django-application";s:7:"content";a:1:{s:7:"encoded";s:32272:"<p>This article is brought with ❤ to you by <a href="https://semaphoreci.com?utm_source=rss&utm_medium=feed&utm_term=Setting_Up_a_BDD_Stack_on_a_Django_Application&utm_content=toplink&utm_campaign=community">Semaphore</a>.</p><h3>Introduction</h3>

<p>This tutorial will guide you through installing <a href="https://pythonhosted.org/behave/django.html"><code>behave_django</code></a>
and <a href="https://pythonhosted.org/behave/django.html"><code>FactoryBoy</code></a> to set up a BDD
stack for a Django application. For this purpose, we will create a simple login
form as a base for developing BDD tests.</p>

<p><a href="https://semaphoreci.com/community/tutorials/behavior-driven-development">BDD</a> puts the user at the
center of your tests. It is an increasingly popular method that helps you
validate your code from an end-user point of view. Tests are expressed as
scenarios (use cases).</p>

<h3>Prerequisites</h3>

<p>In this tutorial, we are assuming you are running on MacOS or Linux. It may work
on Windows machines with some changes to the commands we provide.</p>

<p>This tutorial also requires:</p>

<ul>
<li>Python (preferably 2.7+, 3.4+)</li>
<li>PIP (Python package manager)</li>
</ul>

<h2>Initiating the Project</h2>

<p>Start by creating a Django application as follows:</p>

<div class="highlight highlight-bash"><pre>pip install django
django-admin startproject bdd_example
<span class="nb">cd </span>bdd_example/
</pre></div>

<p>Since this tutorial serves as an example to kickstart your BDD project, we will
use Django's default settings, as well as the default SQLite database driver.
Follow the steps <a href="https://docs.djangoproject.com/en/1.8/intro/tutorial01/">of this Django guide</a>
if you need special configuration.</p>

<h2>Installing behave_django</h2>

<p><code>behave_django</code> will be used to run BDD feature tests via the Behave module.
<em>Feature</em> can be read as another word for <em>scenario</em>.</p>

<p>Before starting to develop your application, ensure that <code>phantomjs</code> is
available on your system:</p>

<div class="highlight highlight-bash"><pre>which phantomjs
</pre></div>

<p>If the command returns "not found", you will need to install <code>phantomjs</code> by
<a href="http://phantomjs.org">downloading it from there</a>. If you are running Ubuntu or
Debian, <a href="https://gist.github.com/julionc/7476620">this thread will help you install it on your system</a>.</p>

<p>Ensure <code>selenium</code> is installed. It will enable you to connect to PhantomJS from
your tests:</p>

<div class="highlight highlight-bash"><pre>pip install selenium
</pre></div>

<p>For headless browser testing purposes, <code>phantomjs</code> will be used by Behave
through <code>selenium</code>. This will prevent your system from launching a Firefox
browser UI to perform the tests, and will allow you to easily execute tests on
test servers (which, by nature, do not dispose of a graphical environment).</p>

<p>You can now install <code>behave_django</code> using PIP:</p>

<div class="highlight highlight-bash"><pre>pip install behave_django
</pre></div>

<p>Edit the <code>bdd_example/settings.py</code> file to add the <code>behave_django</code> application
to your <code>INSTALLED_APPS</code>, so that your <code>INSTALLED_APPS</code> looks as follows:</p>

<div class="highlight highlight-python"><pre><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
    <span class="s">'behave_django'</span><span class="p">,</span>
    <span class="s">'django.contrib.admin'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth'</span><span class="p">,</span>
    <span class="s">'django.contrib.contenttypes'</span><span class="p">,</span>
    <span class="s">'django.contrib.sessions'</span><span class="p">,</span>
    <span class="s">'django.contrib.messages'</span><span class="p">,</span>
    <span class="s">'django.contrib.staticfiles'</span><span class="p">,</span>
<span class="p">)</span>
</pre></div>

<h2>Installing FactoryBoy</h2>

<p>We'll use <code>FactoryBoy</code> to create easy-to-use fixtures for our tests. Fixtures
are a great way to populate your app with mock data, thus simulating a
real-world use of your app.</p>

<p>They help you with the following:</p>

<ul>
<li>When you update your database schema, you only need to update the factory.</li>
<li>They help factoring code by reducing the amount of "junk" code you put in your
tests, making them clearer.</li>
<li>They reduce the time spent on testing and may in some cases speed up test
execution.</li>
</ul>

<p>Install <code>FactoryBoy</code> using PIP:</p>

<div class="highlight highlight-bash"><pre>pip install factory_boy
</pre></div>

<h2>Writing the Login Form</h2>

<p>After installing Behave and FactoryBoy, we will need to create a login
application to be tested. It will consist of three templates, supporting view
code and routes.</p>

<h3>Initializing the Application</h3>

<p>Let's initiate the login application:</p>

<div class="highlight highlight-bash"><pre>python manage.py startapp login
<span class="nb">cd </span>login/
</pre></div>

<p>Edit the <code>../bdd_example/settings.py</code> file to add the <code>login</code> app to your
<code>INSTALLED_APPS</code>, so that <code>INSTALLED_APPS</code> looks as follows:</p>

<div class="highlight highlight-python"><pre><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
    <span class="s">'login'</span><span class="p">,</span>
    <span class="s">'behave_django'</span><span class="p">,</span>
    <span class="s">'django.contrib.admin'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth'</span><span class="p">,</span>
    <span class="s">'django.contrib.contenttypes'</span><span class="p">,</span>
    <span class="s">'django.contrib.sessions'</span><span class="p">,</span>
    <span class="s">'django.contrib.messages'</span><span class="p">,</span>
    <span class="s">'django.contrib.staticfiles'</span><span class="p">,</span>
<span class="p">)</span>
</pre></div>

<h3>Creating Templates</h3>

<p>Our login application requires three templates - the login form itself, the fail
template and the success template.</p>

<p>First, we'll need to create the template folder which will contain all of our
views:</p>

<div class="highlight highlight-bash"><pre>mkdir templates/
</pre></div>

<h4>Login Form Template</h4>

<p>The next step is to create <code>templates/login_root.html</code> and paste the following
template code:</p>

<div class="highlight highlight-html"><pre><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"/login/"</span> <span class="na">method=</span><span class="s">"POST"</span><span class="nt">&gt;</span>
    {% csrf_token %}

    <span class="nt">&lt;div&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"username"</span><span class="nt">&gt;</span>Username<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"username"</span> <span class="na">id=</span><span class="s">"username"</span><span class="nt">&gt;</span>

        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"password"</span><span class="nt">&gt;</span>Password<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"password"</span> <span class="na">name=</span><span class="s">"password"</span> <span class="na">id=</span><span class="s">"password"</span><span class="nt">&gt;</span>

        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">name=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"login"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</pre></div>

<h4>Login Success Template</h4>

<p>Create the login success message template in <code>templates/login_success.html</code> and
paste the following template code:</p>

<div class="highlight highlight-html"><pre><span class="nt">&lt;h1</span> <span class="na">id=</span><span class="s">"main_title"</span><span class="nt">&gt;</span>Login success<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"../"</span><span class="nt">&gt;</span>Back to login form (we do not remember sessions)<span class="nt">&lt;/a&gt;</span>
</pre></div>

<h4>Login Fail Template</h4>

<p>Create the login fail message template in <code>templates/login_fail.html</code> and paste
the following template code:</p>

<div class="highlight highlight-html"><pre><span class="nt">&lt;h1</span> <span class="na">id=</span><span class="s">"main_title"</span><span class="nt">&gt;</span>Login failure<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"../"</span><span class="nt">&gt;</span>Back to login form, try again!<span class="nt">&lt;/a&gt;</span>
</pre></div>

<h3>Creating a View</h3>

<p>Next, we will create the view that will render the template file in <code>views.py</code>
and paste the following code:</p>

<div class="highlight highlight-python"><pre><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>
<span class="kn">from</span> <span class="nn">django.core.urlresolvers</span> <span class="kn">import</span> <span class="n">reverse</span>
<span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponseRedirect</span>
<span class="kn">from</span> <span class="nn">django.contrib.auth</span> <span class="kn">import</span> <span class="n">authenticate</span>

<span class="k">def</span> <span class="nf">login_root</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="c"># Login form submitted?</span>
    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">:</span>
        <span class="n">username</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'username'</span><span class="p">)</span>
        <span class="n">password</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'password'</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">username</span> <span class="ow">and</span> <span class="n">password</span><span class="p">:</span>
            <span class="n">user</span> <span class="o">=</span> <span class="n">authenticate</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="n">password</span><span class="p">)</span>

            <span class="c"># Login succeeded</span>
            <span class="k">if</span> <span class="n">user</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">HttpResponseRedirect</span><span class="p">(</span><span class="n">reverse</span><span class="p">(</span><span class="s">'login.views.login_success'</span><span class="p">))</span>

        <span class="c"># Login failed</span>
        <span class="k">return</span> <span class="n">HttpResponseRedirect</span><span class="p">(</span><span class="n">reverse</span><span class="p">(</span><span class="s">'login.views.login_fail'</span><span class="p">))</span>

    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'login_root.html'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">login_success</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'login_success.html'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">login_fail</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'login_fail.html'</span><span class="p">)</span>
</pre></div>

<h3>Defining Routes</h3>

<p>Now that we have the view, we can bind it to the login route.</p>

<p>Edit the <code>../bdd_example/urls.py</code> file to import the following package:</p>

<div class="highlight highlight-python"><pre><span class="kn">from</span> <span class="nn">login</span> <span class="kn">import</span> <span class="n">views</span> <span class="k">as</span> <span class="n">login_views</span>
</pre></div>

<p>Next, we'll append our login routes to the existing <code>urlpatterns</code> so that it
looks as follows:</p>

<div class="highlight highlight-python"><pre><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">url</span><span class="p">(</span><span class="s">r'^admin/'</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
    <span class="n">url</span><span class="p">(</span><span class="s">r'^login/$'</span><span class="p">,</span> <span class="n">login_views</span><span class="o">.</span><span class="n">login_root</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'login_root'</span><span class="p">),</span>
    <span class="n">url</span><span class="p">(</span><span class="s">r'^login/success/$'</span><span class="p">,</span> <span class="n">login_views</span><span class="o">.</span><span class="n">login_success</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'login_success'</span><span class="p">),</span>
    <span class="n">url</span><span class="p">(</span><span class="s">r'^login/fail/$'</span><span class="p">,</span> <span class="n">login_views</span><span class="o">.</span><span class="n">login_fail</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'login_fail'</span><span class="p">)</span>
<span class="p">]</span>
</pre></div>

<p>We now have a simple login application that we can test.</p>

<h3>Testing the Application</h3>

<p>It's time to test the application we just wrote:</p>

<div class="highlight highlight-bash"><pre><span class="nb">cd</span> ../
python manage.py runserver
</pre></div>

<p>Let's point our Web browser to <code>http://127.0.0.1:8000/login/</code>.</p>

<p>Since your user database is empty, each login you submit should fail with an
error message. If you did not start from scratch and you already had Django
accounts in your database, you should be able to log into the existing accounts.</p>

<h2>Writing FactoryBoy Factories</h2>

<p>The login form test requires a dummy user to be instantiated — a factory can
help with this.</p>

<p>Create the user factory file:</p>

<div class="highlight highlight-bash"><pre>mkdir -p <span class="nb">test</span>/factories/
touch <span class="nb">test</span>/__init__.py <span class="nb">test</span>/factories/__init__.py
</pre></div>

<p>Place the following code in the <code>test/factories/user.py</code> file:</p>

<div class="highlight highlight-bash"><pre>import factory
from django.contrib.auth.models import User

class UserFactory<span class="o">(</span>factory.django.DjangoModelFactory<span class="o">)</span>:
    class Meta:
        <span class="nv">model</span> <span class="o">=</span> User
        <span class="nv">django_get_or_create</span> <span class="o">=</span> <span class="o">(</span><span class="s1">'username'</span>, <span class="s1">'email'</span><span class="o">)</span>

    <span class="c"># Defaults (can be overrided)</span>
    <span class="nv">username</span> <span class="o">=</span> <span class="s1">'john.doe'</span>
    <span class="nv">email</span> <span class="o">=</span> <span class="s1">'john.doe@example.com'</span>
</pre></div>

<p>Note that this factory is directly bound to the built-in Django user model -
<code>models.User</code>. It doesn't require you to write a custom model.</p>

<h2>Writing Behave Scenarios</h2>

<p>Behave tests are made of 2 types of files:</p>

<ul>
<li>
<strong>Feature description</strong>: contains the human-readable form of your tests,
written as scenarios (named <code>test_file.feature</code>)</li>
<li>
<strong>Test script</strong>: contains the machine-executable form of your tests, written
in Python (named <code>test_file.py</code>)</li>
</ul>

<h3>Describing Features</h3>

<p>We will start by defining the tests in a human-readable form.</p>

<p>First, create the test container folder:</p>

<div class="highlight highlight-bash"><pre>mkdir -p features/steps/
</pre></div>

<p>Then, create the feature file <code>features/login.feature</code> and place the following
content in it:</p>

<pre lang="behave"><code>Feature: Login form

  Scenario: Access the login form

    Given an anonymous user
    When I submit a valid login page
    Then I am redirected to the login success page

    Given an anonymous user
    When I submit an invalid login page
    Then I am redirected to the login fail page
</code></pre>

<h3>Writing Automated Tests</h3>

<p>The test script is deeply linked to the feature description, since it contains
references to our feature file.</p>

<h4>Initializing the Test Environment</h4>

<p>We'll start by initializing the test environment and determining which test
browser to use, since we will rely on a Web browser to execute our tests.</p>

<p>Append the following code in <code>features/environment.py</code>:</p>

<div class="highlight highlight-python"><pre><span class="kn">from</span> <span class="nn">selenium</span> <span class="kn">import</span> <span class="n">webdriver</span>

<span class="k">def</span> <span class="nf">before_all</span><span class="p">(</span><span class="n">context</span><span class="p">):</span>
    <span class="c"># PhantomJS is used there (headless browser - meaning we can execute tests in a command-line environment, which is what we want for use with SemaphoreCI</span>
    <span class="c"># For debugging purposes, you can use the Firefox driver instead.</span>

    <span class="n">context</span><span class="o">.</span><span class="n">browser</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">PhantomJS</span><span class="p">()</span>
    <span class="n">context</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">implicitly_wait</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">context</span><span class="o">.</span><span class="n">server_url</span> <span class="o">=</span> <span class="s">'http://localhost:8000'</span>

<span class="k">def</span> <span class="nf">after_all</span><span class="p">(</span><span class="n">context</span><span class="p">):</span>
    <span class="c"># Explicitly quits the browser, otherwise it won't once tests are done</span>
    <span class="n">context</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">before_feature</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">feature</span><span class="p">):</span>
    <span class="c"># Code to be executed each time a feature is going to be tested</span>
    <span class="k">pass</span>
</pre></div>

<h4>Test Procedure</h4>

<p>Next, we'll create the test script by placing the following code in
<code>features/steps/login.py</code>:</p>

<div class="highlight highlight-python"><pre><span class="kn">from</span> <span class="nn">behave</span> <span class="kn">import</span> <span class="n">given</span><span class="p">,</span> <span class="n">when</span><span class="p">,</span> <span class="n">then</span>
<span class="kn">from</span> <span class="nn">test.factories.user</span> <span class="kn">import</span> <span class="n">UserFactory</span>

<span class="nd">@given</span><span class="p">(</span><span class="s">'an anonymous user'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">step_impl</span><span class="p">(</span><span class="n">context</span><span class="p">):</span>
    <span class="kn">from</span> <span class="nn">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span>

    <span class="c"># Creates a dummy user for our tests (user is not authenticated at this point)</span>
    <span class="n">u</span> <span class="o">=</span> <span class="n">UserFactory</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="s">'foo'</span><span class="p">,</span> <span class="n">email</span><span class="o">=</span><span class="s">'foo@example.com'</span><span class="p">)</span>
    <span class="n">u</span><span class="o">.</span><span class="n">set_password</span><span class="p">(</span><span class="s">'bar'</span><span class="p">)</span>

    <span class="c"># Don't omit to call save() to insert object in database</span>
    <span class="n">u</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>

<span class="nd">@when</span><span class="p">(</span><span class="s">'I submit a valid login page'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">step_impl</span><span class="p">(</span><span class="n">context</span><span class="p">):</span>
    <span class="n">br</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">browser</span>
    <span class="n">br</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">base_url</span> <span class="o">+</span> <span class="s">'/login/'</span><span class="p">)</span>

    <span class="c"># Checks for Cross-Site Request Forgery protection input</span>
    <span class="k">assert</span> <span class="n">br</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s">'csrfmiddlewaretoken'</span><span class="p">)</span><span class="o">.</span><span class="n">is_enabled</span><span class="p">()</span>

    <span class="c"># Fill login form and submit it (valid version)</span>
    <span class="n">br</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s">'username'</span><span class="p">)</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="s">'foo'</span><span class="p">)</span>
    <span class="n">br</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s">'password'</span><span class="p">)</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="s">'bar'</span><span class="p">)</span>
    <span class="n">br</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s">'submit'</span><span class="p">)</span><span class="o">.</span><span class="n">click</span><span class="p">()</span>

<span class="nd">@then</span><span class="p">(</span><span class="s">'I am redirected to the login success page'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">step_impl</span><span class="p">(</span><span class="n">context</span><span class="p">):</span>
    <span class="n">br</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">browser</span>

    <span class="c"># Checks success status</span>
    <span class="k">assert</span> <span class="n">br</span><span class="o">.</span><span class="n">current_url</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">'/login/success/'</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">br</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s">'main_title'</span><span class="p">)</span><span class="o">.</span><span class="n">text</span> <span class="o">==</span> <span class="s">"Login success"</span>

<span class="nd">@when</span><span class="p">(</span><span class="s">'I submit an invalid login page'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">step_impl</span><span class="p">(</span><span class="n">context</span><span class="p">):</span>
    <span class="n">br</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">browser</span>

    <span class="n">br</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">base_url</span> <span class="o">+</span> <span class="s">'/login/'</span><span class="p">)</span>

    <span class="c"># Checks for Cross-Site Request Forgery protection input (once again)</span>
    <span class="k">assert</span> <span class="n">br</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s">'csrfmiddlewaretoken'</span><span class="p">)</span><span class="o">.</span><span class="n">is_enabled</span><span class="p">()</span>

    <span class="c"># Fill login form and submit it (invalid version)</span>
    <span class="n">br</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s">'username'</span><span class="p">)</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="s">'foo'</span><span class="p">)</span>
    <span class="n">br</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s">'password'</span><span class="p">)</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="s">'bar-is-invalid'</span><span class="p">)</span>
    <span class="n">br</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s">'submit'</span><span class="p">)</span><span class="o">.</span><span class="n">click</span><span class="p">()</span>

<span class="nd">@then</span><span class="p">(</span><span class="s">'I am redirected to the login fail page'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">step_impl</span><span class="p">(</span><span class="n">context</span><span class="p">):</span>
    <span class="n">br</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">browser</span>

    <span class="c"># Checks redirection URL</span>
    <span class="k">assert</span> <span class="n">br</span><span class="o">.</span><span class="n">current_url</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">'/login/fail/'</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">br</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s">'main_title'</span><span class="p">)</span><span class="o">.</span><span class="n">text</span> <span class="o">==</span> <span class="s">"Login failure"</span>
</pre></div>

<p>Notice how the code follows the feature file? This will make tests much easier
to understand for non-developer people.</p>

<p>The test suite above is just a simple example which tests the login behavior.
If needed, we can interact with more elements from the page using PhantomJS DOM
access and manipulation methods. Refer to the <a href="http://selenium-python.readthedocs.org/api.html">Selenium Python driver
documentation</a> for a complete
list of available methods.</p>

<p>In order to clean up your tests, you can define shared methods. For example, we
could have done this for the "when" part of our tests that are similar in both
cases (success and failure).</p>

<h2>Executing Tests</h2>

<p>Tests can be executed at will, using the Django command-line interface:</p>

<div class="highlight highlight-bash"><pre>python manage.py behave
</pre></div>

<p>You should get the following terminal output:</p>

<p><img src="https://d2l3jyjp24noqc.cloudfront.net/uploads/image/img/207/AFlZsQQ.png" alt="Terminal output for our test" /></p>

<p>The text results print to <em>stdout</em>. If all tests succeed, the command return
code will be 0. In POSIX fashion, this means success. If one - if not all - of
the tests fail, the command return code will be greater than 0. This means
failure.</p>

<p>The return code is used when your code is automatically tested on a CI system,
such as <a href="https://semaphoreci.com">SemaphoreCI</a>. If you need to add this command
to your SemaphoreCI tests, you can read <a href="https://semaphoreci.com/docs/customizing-build-commands.html">this article on how to customize build commands</a>.</p>

<h2>General Note About Testing</h2>

<p><em>This general note covers <a href="https://en.wikipedia.org/wiki/Unit_testing">Unit Testing</a>
and BDD feature testing.</em></p>

<p>There is no limit to the number of tests you can create, although it is a good
idea to avoid writing too many of them. Depending on what your application does,
you will generally be better off going straight to the point. Write only tests
that are mission critical.</p>

<p>When writing software, always remember that code quality is more important than
how deep your code is tested - <em>not to say tests are trivial</em>. Tests ensure that
your features remain resilient over time.</p>

<p>They help you grow your codebase substantially over time, without testing
everything by hand before each release.</p>

<p>There are some exceptions to that, of course. Systems that may potentially
temper with someone's life, health or finances upon failure <em>must</em> put a huge
emphasis on test coverage (unit tests) and edge use case tests (BDD feature
    tests).</p>

<p>For more on the topic, you can read about <a href="http://adaptiveobjectmodel.com/2012/01/what-is-pragmatic-tdd/">Pragmatic Test-Driven Development</a>.</p>

<h2>Conclusion</h2>

<p>This tutorial outlined the procedure on writing BDD feature tests for a simple application.</p>

<p>The power of BDD feature tests lies in the fact that they're located on the
delivery-end of your workflow. This is great, because sole unit tests don't
guarantee your app will work as expected in production environments, while BDD
feature tests do.</p>

<p>BDD abstracts the tester's point of view. This is done by leveraging the power
of writing human-readable text scenarios to abstract a wide range of possible
test cases, which the tester may not be aware of when writing complex test
scripts, or testing all scenarios manually.</p><p>This article is brought with ❤ to you by <a href="https://semaphoreci.com?utm_source=rss&utm_medium=feed&utm_term=Setting_Up_a_BDD_Stack_on_a_Django_Application&utm_content=bottomlink&utm_campaign=community">Semaphore</a>.</p>";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-13T10:24:38+00:00";}s:12:"atom_content";s:32272:"<p>This article is brought with ❤ to you by <a href="https://semaphoreci.com?utm_source=rss&utm_medium=feed&utm_term=Setting_Up_a_BDD_Stack_on_a_Django_Application&utm_content=toplink&utm_campaign=community">Semaphore</a>.</p><h3>Introduction</h3>

<p>This tutorial will guide you through installing <a href="https://pythonhosted.org/behave/django.html"><code>behave_django</code></a>
and <a href="https://pythonhosted.org/behave/django.html"><code>FactoryBoy</code></a> to set up a BDD
stack for a Django application. For this purpose, we will create a simple login
form as a base for developing BDD tests.</p>

<p><a href="https://semaphoreci.com/community/tutorials/behavior-driven-development">BDD</a> puts the user at the
center of your tests. It is an increasingly popular method that helps you
validate your code from an end-user point of view. Tests are expressed as
scenarios (use cases).</p>

<h3>Prerequisites</h3>

<p>In this tutorial, we are assuming you are running on MacOS or Linux. It may work
on Windows machines with some changes to the commands we provide.</p>

<p>This tutorial also requires:</p>

<ul>
<li>Python (preferably 2.7+, 3.4+)</li>
<li>PIP (Python package manager)</li>
</ul>

<h2>Initiating the Project</h2>

<p>Start by creating a Django application as follows:</p>

<div class="highlight highlight-bash"><pre>pip install django
django-admin startproject bdd_example
<span class="nb">cd </span>bdd_example/
</pre></div>

<p>Since this tutorial serves as an example to kickstart your BDD project, we will
use Django's default settings, as well as the default SQLite database driver.
Follow the steps <a href="https://docs.djangoproject.com/en/1.8/intro/tutorial01/">of this Django guide</a>
if you need special configuration.</p>

<h2>Installing behave_django</h2>

<p><code>behave_django</code> will be used to run BDD feature tests via the Behave module.
<em>Feature</em> can be read as another word for <em>scenario</em>.</p>

<p>Before starting to develop your application, ensure that <code>phantomjs</code> is
available on your system:</p>

<div class="highlight highlight-bash"><pre>which phantomjs
</pre></div>

<p>If the command returns "not found", you will need to install <code>phantomjs</code> by
<a href="http://phantomjs.org">downloading it from there</a>. If you are running Ubuntu or
Debian, <a href="https://gist.github.com/julionc/7476620">this thread will help you install it on your system</a>.</p>

<p>Ensure <code>selenium</code> is installed. It will enable you to connect to PhantomJS from
your tests:</p>

<div class="highlight highlight-bash"><pre>pip install selenium
</pre></div>

<p>For headless browser testing purposes, <code>phantomjs</code> will be used by Behave
through <code>selenium</code>. This will prevent your system from launching a Firefox
browser UI to perform the tests, and will allow you to easily execute tests on
test servers (which, by nature, do not dispose of a graphical environment).</p>

<p>You can now install <code>behave_django</code> using PIP:</p>

<div class="highlight highlight-bash"><pre>pip install behave_django
</pre></div>

<p>Edit the <code>bdd_example/settings.py</code> file to add the <code>behave_django</code> application
to your <code>INSTALLED_APPS</code>, so that your <code>INSTALLED_APPS</code> looks as follows:</p>

<div class="highlight highlight-python"><pre><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
    <span class="s">'behave_django'</span><span class="p">,</span>
    <span class="s">'django.contrib.admin'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth'</span><span class="p">,</span>
    <span class="s">'django.contrib.contenttypes'</span><span class="p">,</span>
    <span class="s">'django.contrib.sessions'</span><span class="p">,</span>
    <span class="s">'django.contrib.messages'</span><span class="p">,</span>
    <span class="s">'django.contrib.staticfiles'</span><span class="p">,</span>
<span class="p">)</span>
</pre></div>

<h2>Installing FactoryBoy</h2>

<p>We'll use <code>FactoryBoy</code> to create easy-to-use fixtures for our tests. Fixtures
are a great way to populate your app with mock data, thus simulating a
real-world use of your app.</p>

<p>They help you with the following:</p>

<ul>
<li>When you update your database schema, you only need to update the factory.</li>
<li>They help factoring code by reducing the amount of "junk" code you put in your
tests, making them clearer.</li>
<li>They reduce the time spent on testing and may in some cases speed up test
execution.</li>
</ul>

<p>Install <code>FactoryBoy</code> using PIP:</p>

<div class="highlight highlight-bash"><pre>pip install factory_boy
</pre></div>

<h2>Writing the Login Form</h2>

<p>After installing Behave and FactoryBoy, we will need to create a login
application to be tested. It will consist of three templates, supporting view
code and routes.</p>

<h3>Initializing the Application</h3>

<p>Let's initiate the login application:</p>

<div class="highlight highlight-bash"><pre>python manage.py startapp login
<span class="nb">cd </span>login/
</pre></div>

<p>Edit the <code>../bdd_example/settings.py</code> file to add the <code>login</code> app to your
<code>INSTALLED_APPS</code>, so that <code>INSTALLED_APPS</code> looks as follows:</p>

<div class="highlight highlight-python"><pre><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
    <span class="s">'login'</span><span class="p">,</span>
    <span class="s">'behave_django'</span><span class="p">,</span>
    <span class="s">'django.contrib.admin'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth'</span><span class="p">,</span>
    <span class="s">'django.contrib.contenttypes'</span><span class="p">,</span>
    <span class="s">'django.contrib.sessions'</span><span class="p">,</span>
    <span class="s">'django.contrib.messages'</span><span class="p">,</span>
    <span class="s">'django.contrib.staticfiles'</span><span class="p">,</span>
<span class="p">)</span>
</pre></div>

<h3>Creating Templates</h3>

<p>Our login application requires three templates - the login form itself, the fail
template and the success template.</p>

<p>First, we'll need to create the template folder which will contain all of our
views:</p>

<div class="highlight highlight-bash"><pre>mkdir templates/
</pre></div>

<h4>Login Form Template</h4>

<p>The next step is to create <code>templates/login_root.html</code> and paste the following
template code:</p>

<div class="highlight highlight-html"><pre><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"/login/"</span> <span class="na">method=</span><span class="s">"POST"</span><span class="nt">&gt;</span>
    {% csrf_token %}

    <span class="nt">&lt;div&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"username"</span><span class="nt">&gt;</span>Username<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"username"</span> <span class="na">id=</span><span class="s">"username"</span><span class="nt">&gt;</span>

        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"password"</span><span class="nt">&gt;</span>Password<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"password"</span> <span class="na">name=</span><span class="s">"password"</span> <span class="na">id=</span><span class="s">"password"</span><span class="nt">&gt;</span>

        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">name=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"login"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</pre></div>

<h4>Login Success Template</h4>

<p>Create the login success message template in <code>templates/login_success.html</code> and
paste the following template code:</p>

<div class="highlight highlight-html"><pre><span class="nt">&lt;h1</span> <span class="na">id=</span><span class="s">"main_title"</span><span class="nt">&gt;</span>Login success<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"../"</span><span class="nt">&gt;</span>Back to login form (we do not remember sessions)<span class="nt">&lt;/a&gt;</span>
</pre></div>

<h4>Login Fail Template</h4>

<p>Create the login fail message template in <code>templates/login_fail.html</code> and paste
the following template code:</p>

<div class="highlight highlight-html"><pre><span class="nt">&lt;h1</span> <span class="na">id=</span><span class="s">"main_title"</span><span class="nt">&gt;</span>Login failure<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"../"</span><span class="nt">&gt;</span>Back to login form, try again!<span class="nt">&lt;/a&gt;</span>
</pre></div>

<h3>Creating a View</h3>

<p>Next, we will create the view that will render the template file in <code>views.py</code>
and paste the following code:</p>

<div class="highlight highlight-python"><pre><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>
<span class="kn">from</span> <span class="nn">django.core.urlresolvers</span> <span class="kn">import</span> <span class="n">reverse</span>
<span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponseRedirect</span>
<span class="kn">from</span> <span class="nn">django.contrib.auth</span> <span class="kn">import</span> <span class="n">authenticate</span>

<span class="k">def</span> <span class="nf">login_root</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="c"># Login form submitted?</span>
    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">:</span>
        <span class="n">username</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'username'</span><span class="p">)</span>
        <span class="n">password</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'password'</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">username</span> <span class="ow">and</span> <span class="n">password</span><span class="p">:</span>
            <span class="n">user</span> <span class="o">=</span> <span class="n">authenticate</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="n">password</span><span class="p">)</span>

            <span class="c"># Login succeeded</span>
            <span class="k">if</span> <span class="n">user</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">HttpResponseRedirect</span><span class="p">(</span><span class="n">reverse</span><span class="p">(</span><span class="s">'login.views.login_success'</span><span class="p">))</span>

        <span class="c"># Login failed</span>
        <span class="k">return</span> <span class="n">HttpResponseRedirect</span><span class="p">(</span><span class="n">reverse</span><span class="p">(</span><span class="s">'login.views.login_fail'</span><span class="p">))</span>

    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'login_root.html'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">login_success</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'login_success.html'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">login_fail</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'login_fail.html'</span><span class="p">)</span>
</pre></div>

<h3>Defining Routes</h3>

<p>Now that we have the view, we can bind it to the login route.</p>

<p>Edit the <code>../bdd_example/urls.py</code> file to import the following package:</p>

<div class="highlight highlight-python"><pre><span class="kn">from</span> <span class="nn">login</span> <span class="kn">import</span> <span class="n">views</span> <span class="k">as</span> <span class="n">login_views</span>
</pre></div>

<p>Next, we'll append our login routes to the existing <code>urlpatterns</code> so that it
looks as follows:</p>

<div class="highlight highlight-python"><pre><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">url</span><span class="p">(</span><span class="s">r'^admin/'</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
    <span class="n">url</span><span class="p">(</span><span class="s">r'^login/$'</span><span class="p">,</span> <span class="n">login_views</span><span class="o">.</span><span class="n">login_root</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'login_root'</span><span class="p">),</span>
    <span class="n">url</span><span class="p">(</span><span class="s">r'^login/success/$'</span><span class="p">,</span> <span class="n">login_views</span><span class="o">.</span><span class="n">login_success</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'login_success'</span><span class="p">),</span>
    <span class="n">url</span><span class="p">(</span><span class="s">r'^login/fail/$'</span><span class="p">,</span> <span class="n">login_views</span><span class="o">.</span><span class="n">login_fail</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'login_fail'</span><span class="p">)</span>
<span class="p">]</span>
</pre></div>

<p>We now have a simple login application that we can test.</p>

<h3>Testing the Application</h3>

<p>It's time to test the application we just wrote:</p>

<div class="highlight highlight-bash"><pre><span class="nb">cd</span> ../
python manage.py runserver
</pre></div>

<p>Let's point our Web browser to <code>http://127.0.0.1:8000/login/</code>.</p>

<p>Since your user database is empty, each login you submit should fail with an
error message. If you did not start from scratch and you already had Django
accounts in your database, you should be able to log into the existing accounts.</p>

<h2>Writing FactoryBoy Factories</h2>

<p>The login form test requires a dummy user to be instantiated — a factory can
help with this.</p>

<p>Create the user factory file:</p>

<div class="highlight highlight-bash"><pre>mkdir -p <span class="nb">test</span>/factories/
touch <span class="nb">test</span>/__init__.py <span class="nb">test</span>/factories/__init__.py
</pre></div>

<p>Place the following code in the <code>test/factories/user.py</code> file:</p>

<div class="highlight highlight-bash"><pre>import factory
from django.contrib.auth.models import User

class UserFactory<span class="o">(</span>factory.django.DjangoModelFactory<span class="o">)</span>:
    class Meta:
        <span class="nv">model</span> <span class="o">=</span> User
        <span class="nv">django_get_or_create</span> <span class="o">=</span> <span class="o">(</span><span class="s1">'username'</span>, <span class="s1">'email'</span><span class="o">)</span>

    <span class="c"># Defaults (can be overrided)</span>
    <span class="nv">username</span> <span class="o">=</span> <span class="s1">'john.doe'</span>
    <span class="nv">email</span> <span class="o">=</span> <span class="s1">'john.doe@example.com'</span>
</pre></div>

<p>Note that this factory is directly bound to the built-in Django user model -
<code>models.User</code>. It doesn't require you to write a custom model.</p>

<h2>Writing Behave Scenarios</h2>

<p>Behave tests are made of 2 types of files:</p>

<ul>
<li>
<strong>Feature description</strong>: contains the human-readable form of your tests,
written as scenarios (named <code>test_file.feature</code>)</li>
<li>
<strong>Test script</strong>: contains the machine-executable form of your tests, written
in Python (named <code>test_file.py</code>)</li>
</ul>

<h3>Describing Features</h3>

<p>We will start by defining the tests in a human-readable form.</p>

<p>First, create the test container folder:</p>

<div class="highlight highlight-bash"><pre>mkdir -p features/steps/
</pre></div>

<p>Then, create the feature file <code>features/login.feature</code> and place the following
content in it:</p>

<pre lang="behave"><code>Feature: Login form

  Scenario: Access the login form

    Given an anonymous user
    When I submit a valid login page
    Then I am redirected to the login success page

    Given an anonymous user
    When I submit an invalid login page
    Then I am redirected to the login fail page
</code></pre>

<h3>Writing Automated Tests</h3>

<p>The test script is deeply linked to the feature description, since it contains
references to our feature file.</p>

<h4>Initializing the Test Environment</h4>

<p>We'll start by initializing the test environment and determining which test
browser to use, since we will rely on a Web browser to execute our tests.</p>

<p>Append the following code in <code>features/environment.py</code>:</p>

<div class="highlight highlight-python"><pre><span class="kn">from</span> <span class="nn">selenium</span> <span class="kn">import</span> <span class="n">webdriver</span>

<span class="k">def</span> <span class="nf">before_all</span><span class="p">(</span><span class="n">context</span><span class="p">):</span>
    <span class="c"># PhantomJS is used there (headless browser - meaning we can execute tests in a command-line environment, which is what we want for use with SemaphoreCI</span>
    <span class="c"># For debugging purposes, you can use the Firefox driver instead.</span>

    <span class="n">context</span><span class="o">.</span><span class="n">browser</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">PhantomJS</span><span class="p">()</span>
    <span class="n">context</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">implicitly_wait</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">context</span><span class="o">.</span><span class="n">server_url</span> <span class="o">=</span> <span class="s">'http://localhost:8000'</span>

<span class="k">def</span> <span class="nf">after_all</span><span class="p">(</span><span class="n">context</span><span class="p">):</span>
    <span class="c"># Explicitly quits the browser, otherwise it won't once tests are done</span>
    <span class="n">context</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">before_feature</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">feature</span><span class="p">):</span>
    <span class="c"># Code to be executed each time a feature is going to be tested</span>
    <span class="k">pass</span>
</pre></div>

<h4>Test Procedure</h4>

<p>Next, we'll create the test script by placing the following code in
<code>features/steps/login.py</code>:</p>

<div class="highlight highlight-python"><pre><span class="kn">from</span> <span class="nn">behave</span> <span class="kn">import</span> <span class="n">given</span><span class="p">,</span> <span class="n">when</span><span class="p">,</span> <span class="n">then</span>
<span class="kn">from</span> <span class="nn">test.factories.user</span> <span class="kn">import</span> <span class="n">UserFactory</span>

<span class="nd">@given</span><span class="p">(</span><span class="s">'an anonymous user'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">step_impl</span><span class="p">(</span><span class="n">context</span><span class="p">):</span>
    <span class="kn">from</span> <span class="nn">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span>

    <span class="c"># Creates a dummy user for our tests (user is not authenticated at this point)</span>
    <span class="n">u</span> <span class="o">=</span> <span class="n">UserFactory</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="s">'foo'</span><span class="p">,</span> <span class="n">email</span><span class="o">=</span><span class="s">'foo@example.com'</span><span class="p">)</span>
    <span class="n">u</span><span class="o">.</span><span class="n">set_password</span><span class="p">(</span><span class="s">'bar'</span><span class="p">)</span>

    <span class="c"># Don't omit to call save() to insert object in database</span>
    <span class="n">u</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>

<span class="nd">@when</span><span class="p">(</span><span class="s">'I submit a valid login page'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">step_impl</span><span class="p">(</span><span class="n">context</span><span class="p">):</span>
    <span class="n">br</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">browser</span>
    <span class="n">br</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">base_url</span> <span class="o">+</span> <span class="s">'/login/'</span><span class="p">)</span>

    <span class="c"># Checks for Cross-Site Request Forgery protection input</span>
    <span class="k">assert</span> <span class="n">br</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s">'csrfmiddlewaretoken'</span><span class="p">)</span><span class="o">.</span><span class="n">is_enabled</span><span class="p">()</span>

    <span class="c"># Fill login form and submit it (valid version)</span>
    <span class="n">br</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s">'username'</span><span class="p">)</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="s">'foo'</span><span class="p">)</span>
    <span class="n">br</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s">'password'</span><span class="p">)</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="s">'bar'</span><span class="p">)</span>
    <span class="n">br</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s">'submit'</span><span class="p">)</span><span class="o">.</span><span class="n">click</span><span class="p">()</span>

<span class="nd">@then</span><span class="p">(</span><span class="s">'I am redirected to the login success page'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">step_impl</span><span class="p">(</span><span class="n">context</span><span class="p">):</span>
    <span class="n">br</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">browser</span>

    <span class="c"># Checks success status</span>
    <span class="k">assert</span> <span class="n">br</span><span class="o">.</span><span class="n">current_url</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">'/login/success/'</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">br</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s">'main_title'</span><span class="p">)</span><span class="o">.</span><span class="n">text</span> <span class="o">==</span> <span class="s">"Login success"</span>

<span class="nd">@when</span><span class="p">(</span><span class="s">'I submit an invalid login page'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">step_impl</span><span class="p">(</span><span class="n">context</span><span class="p">):</span>
    <span class="n">br</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">browser</span>

    <span class="n">br</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">base_url</span> <span class="o">+</span> <span class="s">'/login/'</span><span class="p">)</span>

    <span class="c"># Checks for Cross-Site Request Forgery protection input (once again)</span>
    <span class="k">assert</span> <span class="n">br</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s">'csrfmiddlewaretoken'</span><span class="p">)</span><span class="o">.</span><span class="n">is_enabled</span><span class="p">()</span>

    <span class="c"># Fill login form and submit it (invalid version)</span>
    <span class="n">br</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s">'username'</span><span class="p">)</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="s">'foo'</span><span class="p">)</span>
    <span class="n">br</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s">'password'</span><span class="p">)</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="s">'bar-is-invalid'</span><span class="p">)</span>
    <span class="n">br</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s">'submit'</span><span class="p">)</span><span class="o">.</span><span class="n">click</span><span class="p">()</span>

<span class="nd">@then</span><span class="p">(</span><span class="s">'I am redirected to the login fail page'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">step_impl</span><span class="p">(</span><span class="n">context</span><span class="p">):</span>
    <span class="n">br</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">browser</span>

    <span class="c"># Checks redirection URL</span>
    <span class="k">assert</span> <span class="n">br</span><span class="o">.</span><span class="n">current_url</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">'/login/fail/'</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">br</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s">'main_title'</span><span class="p">)</span><span class="o">.</span><span class="n">text</span> <span class="o">==</span> <span class="s">"Login failure"</span>
</pre></div>

<p>Notice how the code follows the feature file? This will make tests much easier
to understand for non-developer people.</p>

<p>The test suite above is just a simple example which tests the login behavior.
If needed, we can interact with more elements from the page using PhantomJS DOM
access and manipulation methods. Refer to the <a href="http://selenium-python.readthedocs.org/api.html">Selenium Python driver
documentation</a> for a complete
list of available methods.</p>

<p>In order to clean up your tests, you can define shared methods. For example, we
could have done this for the "when" part of our tests that are similar in both
cases (success and failure).</p>

<h2>Executing Tests</h2>

<p>Tests can be executed at will, using the Django command-line interface:</p>

<div class="highlight highlight-bash"><pre>python manage.py behave
</pre></div>

<p>You should get the following terminal output:</p>

<p><img src="https://d2l3jyjp24noqc.cloudfront.net/uploads/image/img/207/AFlZsQQ.png" alt="Terminal output for our test" /></p>

<p>The text results print to <em>stdout</em>. If all tests succeed, the command return
code will be 0. In POSIX fashion, this means success. If one - if not all - of
the tests fail, the command return code will be greater than 0. This means
failure.</p>

<p>The return code is used when your code is automatically tested on a CI system,
such as <a href="https://semaphoreci.com">SemaphoreCI</a>. If you need to add this command
to your SemaphoreCI tests, you can read <a href="https://semaphoreci.com/docs/customizing-build-commands.html">this article on how to customize build commands</a>.</p>

<h2>General Note About Testing</h2>

<p><em>This general note covers <a href="https://en.wikipedia.org/wiki/Unit_testing">Unit Testing</a>
and BDD feature testing.</em></p>

<p>There is no limit to the number of tests you can create, although it is a good
idea to avoid writing too many of them. Depending on what your application does,
you will generally be better off going straight to the point. Write only tests
that are mission critical.</p>

<p>When writing software, always remember that code quality is more important than
how deep your code is tested - <em>not to say tests are trivial</em>. Tests ensure that
your features remain resilient over time.</p>

<p>They help you grow your codebase substantially over time, without testing
everything by hand before each release.</p>

<p>There are some exceptions to that, of course. Systems that may potentially
temper with someone's life, health or finances upon failure <em>must</em> put a huge
emphasis on test coverage (unit tests) and edge use case tests (BDD feature
    tests).</p>

<p>For more on the topic, you can read about <a href="http://adaptiveobjectmodel.com/2012/01/what-is-pragmatic-tdd/">Pragmatic Test-Driven Development</a>.</p>

<h2>Conclusion</h2>

<p>This tutorial outlined the procedure on writing BDD feature tests for a simple application.</p>

<p>The power of BDD feature tests lies in the fact that they're located on the
delivery-end of your workflow. This is great, because sole unit tests don't
guarantee your app will work as expected in production environments, while BDD
feature tests do.</p>

<p>BDD abstracts the tester's point of view. This is done by leveraging the power
of writing human-readable text scenarios to abstract a wide range of possible
test cases, which the tester may not be aware of when writing complex test
scripts, or testing all scenarios manually.</p><p>This article is brought with ❤ to you by <a href="https://semaphoreci.com?utm_source=rss&utm_medium=feed&utm_term=Setting_Up_a_BDD_Stack_on_a_Django_Application&utm_content=bottomlink&utm_campaign=community">Semaphore</a>.</p>";}i:6;a:6:{s:5:"about";s:88:"http://catherinedevlin.blogspot.com/2015/11/wanted-rdbms-superpower-summary-for-app.html";s:5:"title";s:69:"Catherine Devlin: Wanted: RDBMS superpower summary for app developers";s:4:"link";s:88:"http://catherinedevlin.blogspot.com/2015/11/wanted-rdbms-superpower-summary-for-app.html";s:7:"content";a:1:{s:7:"encoded";s:1053:"<p>At last night's <a href="http://www.meetup.com/WWCode-Cincinnati/">WWCode Cincinnati</a> panel, I recommended that developers talk to their DBA about what advanced capabilities their RDBMS can offer, so that they don't end up reimplementing functionality in the app that are already available (better and more efficiently) in the database itself.  Devs can waste a lot of effort by thinking of databases as dumb, inert data boxes.</p> <p>I was asked an excellent question: "Where can a dev quickly familiarize herself with what those capabilities are?"  My answer was, "Um."</p> <p><em>Do not</em> say they should read the docs.  That is a "let them eat cake" answer.  The <a href="http://www.postgresql.org/docs/">PostgreSQL docs</a> are over 2900 pages.  That's not what they need.</p> <p>Suggestions, folks?  Python developers have built great summary sites, like the <a href="http://docs.python-guide.org/en/latest/">Hitchhiker's Guide to Python</a>.  What are the equivalents in the database world?  Do they exist?  Do we need to write them?</p>";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-13T10:05:38+00:00";}s:12:"atom_content";s:1053:"<p>At last night's <a href="http://www.meetup.com/WWCode-Cincinnati/">WWCode Cincinnati</a> panel, I recommended that developers talk to their DBA about what advanced capabilities their RDBMS can offer, so that they don't end up reimplementing functionality in the app that are already available (better and more efficiently) in the database itself.  Devs can waste a lot of effort by thinking of databases as dumb, inert data boxes.</p> <p>I was asked an excellent question: "Where can a dev quickly familiarize herself with what those capabilities are?"  My answer was, "Um."</p> <p><em>Do not</em> say they should read the docs.  That is a "let them eat cake" answer.  The <a href="http://www.postgresql.org/docs/">PostgreSQL docs</a> are over 2900 pages.  That's not what they need.</p> <p>Suggestions, folks?  Python developers have built great summary sites, like the <a href="http://docs.python-guide.org/en/latest/">Hitchhiker's Guide to Python</a>.  What are the equivalents in the database world?  Do they exist?  Do we need to write them?</p>";}i:7;a:6:{s:5:"about";s:39:"http://montrealpython.org/2015/11/mp55/";s:5:"title";s:69:"Montreal Python User Group: Montréal-Python 55: Wagnerian Xenosaurus";s:4:"link";s:39:"http://montrealpython.org/2015/11/mp55/";s:7:"content";a:1:{s:7:"encoded";s:3344:"<p>Montréal-Python just got back from PyCon Canada and we are proud to announce all the speakers for our next meetup. Thanks a ton to everyone who submitted a talk.</p>
<p>From all the amazing submissions we received, we've selected 5 talks. Also, we are very excited to welcome you at the new Shopify offices in downtown Montreal. This is your opportunity to meet the local Python community.</p>
<p>We would like to thank again our generous sponsors for their support to our community. </p>
<p>We would like to thank Shopify for the food especially, as well as w.illi.am/, Outbox, Savoir-faire Linux, and iWeb for their continuous support.</p>
<h2>Flash presentations:</h2>
<p><strong>Alexandre Desilets-Benoit</strong> Starting on a GUI: WXpython vs Kivy</p>
<p>Should I build a GUI using WXpython or Kivy? Why not both! A quick overview of the beginner's toolkit with practical examples in science, games, etc.</p>
<h2>Main program:</h2>
<p><strong>Jake Sethi-Reiner</strong> How to teach Python to a ten year old</p>
<p>Everyone can benefit from hearing about Jake's experiences learning Python — what was helpful and what was not! The good and the bad…</p>
<p><strong> Kamal Marhubi</strong> asyncio.get_event_loop() → what is that?</p>
<p>Last week I realized I had no idea how event loops work. A couple of days later, I was looking at the asyncio source with a friend, and I want to share some of what we found out.</p>
<p>In this talk, we'll find out at what an event loop is, why you might want to use one, and get a look at some of the key parts of the implementation in the standard asyncio module.</p>
<p><strong>François Maillet</strong> Epic NHL goal celebration hack with a hue light show and real-time machine learning </p>
<p>This talk shows how Python was used to trigger an epic sound and light show whenever the Montreal Canadiens hockey team scored a goal in last season's playoffs.</p>
<p>The author trained a machine learning model to detect in real-time that a goal was just scored by the Habs based on the live audio feed of a game and to trigger a light show using Philips hues in his living room. The system was built using various Python modules, more specifically scikit-learn, pyaudio, librosa, phue and bottle.</p>
<p><strong>Federico Ariza</strong> Introduction to new Matplotlib toolbar</p>
<p>Latest Matplotlib release includes an optional new toolbar that allows easy modification and simple creation of tools. Introduction to use and internals of this toolbar.</p>
<p>Join us for the occasion at the new Shopify Offices!</p>
<h2>Where</h2>
<p>Shopify Montreal Offices 
490 de la Gauchetière Ouest
suite 300</p>
<p><a href="https://goo.gl/maps/6gc5rxRqGqS2">https://goo.gl/maps/6gc5rxRqGqS2</a></p>
<h2>When:</h2>
<p>Monday, November 23rd 2015</p>
<h2>Schedule:</h2>
<ul>
<li><strong>6:00pm</strong> — Doors open</li>
<li><strong>6:30pm</strong> — Presentations start</li>
<li><strong>7:30pm</strong> — Break</li>
<li><strong>7:45pm</strong> — Second round of presentations</li>
<li><strong>9:00pm</strong> — End of the meeting, have a drink with us</li>
</ul>
<h2>We’d like to thank our sponsors for their continued support:</h2>
<ul>
<li>Shopify</li>
<li>UQÀM</li>
<li>Bénélux</li>
<li>w.illi.am/</li>
<li>Outbox</li>
<li>Savoir-faire Linux</li>
<li>Caravan</li>
<li>iWeb</li>
</ul>";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-13T05:00:00+00:00";}s:12:"atom_content";s:3344:"<p>Montréal-Python just got back from PyCon Canada and we are proud to announce all the speakers for our next meetup. Thanks a ton to everyone who submitted a talk.</p>
<p>From all the amazing submissions we received, we've selected 5 talks. Also, we are very excited to welcome you at the new Shopify offices in downtown Montreal. This is your opportunity to meet the local Python community.</p>
<p>We would like to thank again our generous sponsors for their support to our community. </p>
<p>We would like to thank Shopify for the food especially, as well as w.illi.am/, Outbox, Savoir-faire Linux, and iWeb for their continuous support.</p>
<h2>Flash presentations:</h2>
<p><strong>Alexandre Desilets-Benoit</strong> Starting on a GUI: WXpython vs Kivy</p>
<p>Should I build a GUI using WXpython or Kivy? Why not both! A quick overview of the beginner's toolkit with practical examples in science, games, etc.</p>
<h2>Main program:</h2>
<p><strong>Jake Sethi-Reiner</strong> How to teach Python to a ten year old</p>
<p>Everyone can benefit from hearing about Jake's experiences learning Python — what was helpful and what was not! The good and the bad…</p>
<p><strong> Kamal Marhubi</strong> asyncio.get_event_loop() → what is that?</p>
<p>Last week I realized I had no idea how event loops work. A couple of days later, I was looking at the asyncio source with a friend, and I want to share some of what we found out.</p>
<p>In this talk, we'll find out at what an event loop is, why you might want to use one, and get a look at some of the key parts of the implementation in the standard asyncio module.</p>
<p><strong>François Maillet</strong> Epic NHL goal celebration hack with a hue light show and real-time machine learning </p>
<p>This talk shows how Python was used to trigger an epic sound and light show whenever the Montreal Canadiens hockey team scored a goal in last season's playoffs.</p>
<p>The author trained a machine learning model to detect in real-time that a goal was just scored by the Habs based on the live audio feed of a game and to trigger a light show using Philips hues in his living room. The system was built using various Python modules, more specifically scikit-learn, pyaudio, librosa, phue and bottle.</p>
<p><strong>Federico Ariza</strong> Introduction to new Matplotlib toolbar</p>
<p>Latest Matplotlib release includes an optional new toolbar that allows easy modification and simple creation of tools. Introduction to use and internals of this toolbar.</p>
<p>Join us for the occasion at the new Shopify Offices!</p>
<h2>Where</h2>
<p>Shopify Montreal Offices 
490 de la Gauchetière Ouest
suite 300</p>
<p><a href="https://goo.gl/maps/6gc5rxRqGqS2">https://goo.gl/maps/6gc5rxRqGqS2</a></p>
<h2>When:</h2>
<p>Monday, November 23rd 2015</p>
<h2>Schedule:</h2>
<ul>
<li><strong>6:00pm</strong> — Doors open</li>
<li><strong>6:30pm</strong> — Presentations start</li>
<li><strong>7:30pm</strong> — Break</li>
<li><strong>7:45pm</strong> — Second round of presentations</li>
<li><strong>9:00pm</strong> — End of the meeting, have a drink with us</li>
</ul>
<h2>We’d like to thank our sponsors for their continued support:</h2>
<ul>
<li>Shopify</li>
<li>UQÀM</li>
<li>Bénélux</li>
<li>w.illi.am/</li>
<li>Outbox</li>
<li>Savoir-faire Linux</li>
<li>Caravan</li>
<li>iWeb</li>
</ul>";}i:8;a:6:{s:5:"about";s:69:"http://podcastinit.podbean.com/e/episode-31-dariusz-suchojad-on-zato/";s:5:"title";s:55:"Podcast.__init__: Episode 31 - Dariusz Suchojad on Zato";s:4:"link";s:69:"http://podcastinit.podbean.com/e/episode-31-dariusz-suchojad-on-zato/";s:7:"content";a:1:{s:7:"encoded";s:10817:"<p>Visit our <a href="http://pythonpodcast.com">site</a> to listen to past episodes, support the show, and sign up for our mailing list.</p>
<h3>
<a class="anchor" href="http://podcastinit.podbean.com/feed/#summary"><span class="octicon octicon-link"></span></a>Summary</h3>
<p>Service integration platforms have traditionally been the realm of Java projects. Zato is a project that shows Python is a great choice for systems integration due to its flexibility and wealth of useful libraries. In this episode we had the opportunity to speak with Dariusz Suchojad, the creator of Zato about why he decided to make it and what makes it interesting. Listen to the episode and then take it for a spin.</p>
<h3>
<a class="anchor" href="http://podcastinit.podbean.com/feed/#brief-introduction"><span class="octicon octicon-link"></span></a>Brief Introduction</h3>
<ul><li>Hello and welcome to Podcast.__init__, the podcast about Python and the people who make it great.</li>
<li>Subscribe on <a href="https://itunes.apple.com/us/podcast/podcast.-init/id981834425?mt=2&uo=6&at=&ct=">iTunes</a>, <a href="http://www.stitcher.com/s?fid=64838&refid=stpr">Stitcher</a>, <a href="http://tunein.com/embed/follow/p726240/">TuneIn</a> or <a href="http://podcastinit.podbean.com/feed/">RSS</a>
</li>
<li>Follow us on <a href="https://twitter.com/Podcast__init__">Twitter</a> or <a href="https://plus.google.com/+Podcastinit-the-python-podcast">Google+</a>
</li>
<li>Give us feedback! Leave a review on <a href="https://itunes.apple.com/us/podcast/podcast.-init/id981834425?mt=2&uo=6&at=&ct=">iTunes</a>, <a href="https://twitter.com/Podcast__init__">Tweet</a> to us, send us an <a href="mailto:hosts@podcastinit.com">email</a>, leave us a message on <a href="https://plus.google.com/+Podcastinit-the-python-podcast">Google+</a>, or leave a comment on our <a href="http://pythonpodcast.com/dariusz-suchojad-zato.html">show notes</a>
</li>
<li>I would like to thank everyone who has donated to the show. Your contributions help us make the show sustainable. For details on how to support the show you can visit our site at </li>
<li>I would also like to thank Hired, a job marketplace for developers, for sponsoring this episode of Podcast.__init__. Use the link <a href="http://hired.com/podcastinit">hired.com/podcastinit</a> to double your signing bonus.</li>
<li>Linode is also sponsoring us this week. Check them out at <a href="http://linode.com/podcastinit">linode.com/podcastinit</a> and get a $10 credit to try out their fast and reliable Linux virtual servers for your next project.</li>
<li>We are recording today on October 27th, 2015 and your hosts as usual are Tobias Macey and Chris Patti</li>
<li>Today we are interviewing Dariusz Suchojad about Zato</li>
</ul><div class="well">
<a href="https://hired.com/?utm_content=shownotes-4k&utm_medium=podcast&utm_source=podcastinit"><img src="http://podcastinit.podbean.com/mf/web/ehi957/hired-logo-dark-padding.png" alt="Hired Logo" /></a>
<p>
On Hired software engineers &amp; designers can get 5+ interview requests in a week and each offer has salary and equity upfront. With full time and contract opportunities available, users can view the offers and accept or reject them before talking to any company. Work with over 2,500 companies from startups to large public companies hailing from 12 major tech hubs in North America and Europe.  Hired is totally free for users and If you get a job you’ll get a $2,000 “thank you” bonus. If you use our <a href="https://hired.com/?utm_content=shownotes-4k&utm_medium=podcast&utm_source=podcastinit">special link</a> to signup, then that bonus will double to $4,000 when you accept a job. If you’re not looking for a job but know someone who is, you can refer them to Hired and get a $1,337 bonus when they accept a job.
</p>
</div>
<div class="well">
<a href="http://linode.com/podcastinit"><img src="http://podcastinit.podbean.com/mf/web/tdegpr/linode-banner-sponsor-large.png" alt="Linode Sponsor Banner" /></a>
<p>Use the promo code <strong>podcastinit10</strong> to get a $10 credit when you sign up!</p>
</div>
<h3>
<a class="anchor" href="http://podcastinit.podbean.com/feed/#interview-with-dariusz-suchojad"><span class="octicon octicon-link"></span></a>Interview with Dariusz Suchojad</h3>
<ul><li>Introductions</li>
<li>How did you get introduced to Python?</li>
<li>Can you explain what Zato is and what motivated you to create it?</li>
<li>What makes Zato stand out from other service bus implementations?</li>
<li>What are some signs that someone should consider incorporating Zato into their software architecture?</li>
<li>Does zato perform well in restricted resource environments like ec2? What performance bottlenecks are common when using zato?</li>
<li>It seems that most other ESB projects are written in Java. What advantages does Python have over Java for this kind of project and in what ways is it inferior?</li>
<li>The architectural nature of ESBs are such that they form the central backbone of a software system. How have you been able to ensure an appropriate level of reliability and stability in Zato while still delivering new features and improvements?</li>
<li>What are the scalability and high availability characteristics of Zato?</li>
<li>Does zato run well using pypy?</li>
<li>For anyone wanting to use Zato, what are the infrastructure requirements for deployment?</li>
<li>What are some of the security ramifications you took into account in zato’s design?</li>
<li>What are some of the most novel uses for Zato that you have seen or heard about?</li>
</ul><h3>
<a class="anchor" href="http://podcastinit.podbean.com/feed/#picks"><span class="octicon octicon-link"></span></a>Picks</h3>
<ul><li>Tobias
<ul><li><a href="http://amzn.to/1PP6BZF">SPY</a></li>
<li><a href="https://www.reverbnation.com/royersonemanband">Eric Royer’s One Man Band</a></li>
<li><a href="https://github.com/nvie/pip-tools">pip-tools</a></li>
</ul></li>
<li>Chris
<ul><li><a href="http://spaghettionthewallproductions.com/rational-security/">Rational Security</a></li>
<li><a href="http://www.newrustacean.com/">New Rustacean Podcast</a></li>
<li><a href="http://cocktailvirgin.blogspot.com/2011/02/johan-goes-to-mexico.html">Johan Goes to Mexico</a></li>
</ul></li>
<li>Dariusz
<ul><li><a href="http://www.sublimetext.com/">Sublime Text Editor</a></li>
</ul></li>
</ul><h3>
<a class="anchor" href="http://podcastinit.podbean.com/feed/#keep-in-touch"><span class="octicon octicon-link"></span></a>Keep In Touch</h3>
<ul><li><a href="https://zato.io">zato.io</a></li>
<li><a href="https://twitter.com/zatosource">Twiter</a></li>
<li><a href="https://github.com/zatosource">Github</a></li>
</ul><p>The intro and outro music is from Requiem for a Fish <a href="http://freemusicarchive.org/music/The_Freak_Fandango_Orchestra/">The Freak Fandango Orchestra</a> / <a href="http://creativecommons.org/licenses/by-sa/3.0/">CC BY-SA</a></p>Visit our site to listen to past episodes, support the show, and sign up for our mailing list.


Summary

Service integration platforms have traditionally been the realm of Java projects. Zato is a project that shows Python is a great choice for systems integration due to its flexibility and wealth of useful libraries. In this episode we had the opportunity to speak with Dariusz Suchojad, the creator of Zato about why he decided to make it and what makes it interesting. Listen to the episode and then take it for a spin.


Brief Introduction

Hello and welcome to Podcast.__init__, the podcast about Python and the people who make it great.
Subscribe on iTunes, Stitcher, TuneIn or RSS

Follow us on Twitter or Google+

Give us feedback! Leave a review on iTunes, Tweet to us, send us an email, leave us a message on Google+, or leave a comment on our show notes

I would like to thank everyone who has donated to the show. Your contributions help us make the show sustainable. For details on how to support the show you can visit our site at 
I would also like to thank Hired, a job marketplace for developers, for sponsoring this episode of Podcast.__init__. Use the link hired.com/podcastinit to double your signing bonus.
Linode is also sponsoring us this week. Check them out at linode.com/podcastinit and get a $10 credit to try out their fast and reliable Linux virtual servers for your next project.
We are recording today on October 27th, 2015 and your hosts as usual are Tobias Macey and Chris Patti
Today we are interviewing Dariusz Suchojad about Zato



On Hired software engineers  designers can get 5+ interview requests in a week and each offer has salary and equity upfront. With full time and contract opportunities available, users can view the offers and accept or reject them before talking to any company. Work with over 2,500 companies from startups to large public companies hailing from 12 major tech hubs in North America and Europe.  Hired is totally free for users and If you get a job you’ll get a $2,000 “thank you” bonus. If you use our special link to signup, then that bonus will double to $4,000 when you accept a job. If you’re not looking for a job but know someone who is, you can refer them to Hired and get a $1,337 bonus when they accept a job.




Use the promo code podcastinit10 to get a $10 credit when you sign up!



Interview with Dariusz Suchojad

Introductions
How did you get introduced to Python?
Can you explain what Zato is and what motivated you to create it?
What makes Zato stand out from other service bus implementations?
What are some signs that someone should consider incorporating Zato into their software architecture?
Does zato perform well in restricted resource environments like ec2? What performance bottlenecks are common when using zato?
It seems that most other ESB projects are written in Java. What advantages does Python have over Java for this kind of project and in what ways is it inferior?
The architectural nature of ESBs are such that they form the central backbone of a software system. How have you been able to ensure an appropriate level of reliability and stability in Zato while still delivering new features and improvements?
What are the scalability and high availability characteristics of Zato?
Does zato run well using pypy?
For anyone wanting to use Zato, what are the infrastructure requirements for deployment?
What are some of the security ramifications you took into account in zato's design?
What are some of the most novel uses for Zato that you have seen or heard about?

Picks

Tobias

SPY
Eric Royer's One Man Band
pip-tools

Chris

Rational Security
New Rustacean Podcast
Johan Goes to Mexico

Dariusz

Sublime Text Editor


Keep In Touch

zato.io
Twiter
Github
The intro and outro music is from Requiem for a Fish The Freak Fandango Orchestra / CC BY-SA";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-13T02:44:19+00:00";}s:12:"atom_content";s:10817:"<p>Visit our <a href="http://pythonpodcast.com">site</a> to listen to past episodes, support the show, and sign up for our mailing list.</p>
<h3>
<a class="anchor" href="http://podcastinit.podbean.com/feed/#summary"><span class="octicon octicon-link"></span></a>Summary</h3>
<p>Service integration platforms have traditionally been the realm of Java projects. Zato is a project that shows Python is a great choice for systems integration due to its flexibility and wealth of useful libraries. In this episode we had the opportunity to speak with Dariusz Suchojad, the creator of Zato about why he decided to make it and what makes it interesting. Listen to the episode and then take it for a spin.</p>
<h3>
<a class="anchor" href="http://podcastinit.podbean.com/feed/#brief-introduction"><span class="octicon octicon-link"></span></a>Brief Introduction</h3>
<ul><li>Hello and welcome to Podcast.__init__, the podcast about Python and the people who make it great.</li>
<li>Subscribe on <a href="https://itunes.apple.com/us/podcast/podcast.-init/id981834425?mt=2&uo=6&at=&ct=">iTunes</a>, <a href="http://www.stitcher.com/s?fid=64838&refid=stpr">Stitcher</a>, <a href="http://tunein.com/embed/follow/p726240/">TuneIn</a> or <a href="http://podcastinit.podbean.com/feed/">RSS</a>
</li>
<li>Follow us on <a href="https://twitter.com/Podcast__init__">Twitter</a> or <a href="https://plus.google.com/+Podcastinit-the-python-podcast">Google+</a>
</li>
<li>Give us feedback! Leave a review on <a href="https://itunes.apple.com/us/podcast/podcast.-init/id981834425?mt=2&uo=6&at=&ct=">iTunes</a>, <a href="https://twitter.com/Podcast__init__">Tweet</a> to us, send us an <a href="mailto:hosts@podcastinit.com">email</a>, leave us a message on <a href="https://plus.google.com/+Podcastinit-the-python-podcast">Google+</a>, or leave a comment on our <a href="http://pythonpodcast.com/dariusz-suchojad-zato.html">show notes</a>
</li>
<li>I would like to thank everyone who has donated to the show. Your contributions help us make the show sustainable. For details on how to support the show you can visit our site at </li>
<li>I would also like to thank Hired, a job marketplace for developers, for sponsoring this episode of Podcast.__init__. Use the link <a href="http://hired.com/podcastinit">hired.com/podcastinit</a> to double your signing bonus.</li>
<li>Linode is also sponsoring us this week. Check them out at <a href="http://linode.com/podcastinit">linode.com/podcastinit</a> and get a $10 credit to try out their fast and reliable Linux virtual servers for your next project.</li>
<li>We are recording today on October 27th, 2015 and your hosts as usual are Tobias Macey and Chris Patti</li>
<li>Today we are interviewing Dariusz Suchojad about Zato</li>
</ul><div class="well">
<a href="https://hired.com/?utm_content=shownotes-4k&utm_medium=podcast&utm_source=podcastinit"><img src="http://podcastinit.podbean.com/mf/web/ehi957/hired-logo-dark-padding.png" alt="Hired Logo" /></a>
<p>
On Hired software engineers &amp; designers can get 5+ interview requests in a week and each offer has salary and equity upfront. With full time and contract opportunities available, users can view the offers and accept or reject them before talking to any company. Work with over 2,500 companies from startups to large public companies hailing from 12 major tech hubs in North America and Europe.  Hired is totally free for users and If you get a job you’ll get a $2,000 “thank you” bonus. If you use our <a href="https://hired.com/?utm_content=shownotes-4k&utm_medium=podcast&utm_source=podcastinit">special link</a> to signup, then that bonus will double to $4,000 when you accept a job. If you’re not looking for a job but know someone who is, you can refer them to Hired and get a $1,337 bonus when they accept a job.
</p>
</div>
<div class="well">
<a href="http://linode.com/podcastinit"><img src="http://podcastinit.podbean.com/mf/web/tdegpr/linode-banner-sponsor-large.png" alt="Linode Sponsor Banner" /></a>
<p>Use the promo code <strong>podcastinit10</strong> to get a $10 credit when you sign up!</p>
</div>
<h3>
<a class="anchor" href="http://podcastinit.podbean.com/feed/#interview-with-dariusz-suchojad"><span class="octicon octicon-link"></span></a>Interview with Dariusz Suchojad</h3>
<ul><li>Introductions</li>
<li>How did you get introduced to Python?</li>
<li>Can you explain what Zato is and what motivated you to create it?</li>
<li>What makes Zato stand out from other service bus implementations?</li>
<li>What are some signs that someone should consider incorporating Zato into their software architecture?</li>
<li>Does zato perform well in restricted resource environments like ec2? What performance bottlenecks are common when using zato?</li>
<li>It seems that most other ESB projects are written in Java. What advantages does Python have over Java for this kind of project and in what ways is it inferior?</li>
<li>The architectural nature of ESBs are such that they form the central backbone of a software system. How have you been able to ensure an appropriate level of reliability and stability in Zato while still delivering new features and improvements?</li>
<li>What are the scalability and high availability characteristics of Zato?</li>
<li>Does zato run well using pypy?</li>
<li>For anyone wanting to use Zato, what are the infrastructure requirements for deployment?</li>
<li>What are some of the security ramifications you took into account in zato’s design?</li>
<li>What are some of the most novel uses for Zato that you have seen or heard about?</li>
</ul><h3>
<a class="anchor" href="http://podcastinit.podbean.com/feed/#picks"><span class="octicon octicon-link"></span></a>Picks</h3>
<ul><li>Tobias
<ul><li><a href="http://amzn.to/1PP6BZF">SPY</a></li>
<li><a href="https://www.reverbnation.com/royersonemanband">Eric Royer’s One Man Band</a></li>
<li><a href="https://github.com/nvie/pip-tools">pip-tools</a></li>
</ul></li>
<li>Chris
<ul><li><a href="http://spaghettionthewallproductions.com/rational-security/">Rational Security</a></li>
<li><a href="http://www.newrustacean.com/">New Rustacean Podcast</a></li>
<li><a href="http://cocktailvirgin.blogspot.com/2011/02/johan-goes-to-mexico.html">Johan Goes to Mexico</a></li>
</ul></li>
<li>Dariusz
<ul><li><a href="http://www.sublimetext.com/">Sublime Text Editor</a></li>
</ul></li>
</ul><h3>
<a class="anchor" href="http://podcastinit.podbean.com/feed/#keep-in-touch"><span class="octicon octicon-link"></span></a>Keep In Touch</h3>
<ul><li><a href="https://zato.io">zato.io</a></li>
<li><a href="https://twitter.com/zatosource">Twiter</a></li>
<li><a href="https://github.com/zatosource">Github</a></li>
</ul><p>The intro and outro music is from Requiem for a Fish <a href="http://freemusicarchive.org/music/The_Freak_Fandango_Orchestra/">The Freak Fandango Orchestra</a> / <a href="http://creativecommons.org/licenses/by-sa/3.0/">CC BY-SA</a></p>Visit our site to listen to past episodes, support the show, and sign up for our mailing list.


Summary

Service integration platforms have traditionally been the realm of Java projects. Zato is a project that shows Python is a great choice for systems integration due to its flexibility and wealth of useful libraries. In this episode we had the opportunity to speak with Dariusz Suchojad, the creator of Zato about why he decided to make it and what makes it interesting. Listen to the episode and then take it for a spin.


Brief Introduction

Hello and welcome to Podcast.__init__, the podcast about Python and the people who make it great.
Subscribe on iTunes, Stitcher, TuneIn or RSS

Follow us on Twitter or Google+

Give us feedback! Leave a review on iTunes, Tweet to us, send us an email, leave us a message on Google+, or leave a comment on our show notes

I would like to thank everyone who has donated to the show. Your contributions help us make the show sustainable. For details on how to support the show you can visit our site at 
I would also like to thank Hired, a job marketplace for developers, for sponsoring this episode of Podcast.__init__. Use the link hired.com/podcastinit to double your signing bonus.
Linode is also sponsoring us this week. Check them out at linode.com/podcastinit and get a $10 credit to try out their fast and reliable Linux virtual servers for your next project.
We are recording today on October 27th, 2015 and your hosts as usual are Tobias Macey and Chris Patti
Today we are interviewing Dariusz Suchojad about Zato



On Hired software engineers  designers can get 5+ interview requests in a week and each offer has salary and equity upfront. With full time and contract opportunities available, users can view the offers and accept or reject them before talking to any company. Work with over 2,500 companies from startups to large public companies hailing from 12 major tech hubs in North America and Europe.  Hired is totally free for users and If you get a job you’ll get a $2,000 “thank you” bonus. If you use our special link to signup, then that bonus will double to $4,000 when you accept a job. If you’re not looking for a job but know someone who is, you can refer them to Hired and get a $1,337 bonus when they accept a job.




Use the promo code podcastinit10 to get a $10 credit when you sign up!



Interview with Dariusz Suchojad

Introductions
How did you get introduced to Python?
Can you explain what Zato is and what motivated you to create it?
What makes Zato stand out from other service bus implementations?
What are some signs that someone should consider incorporating Zato into their software architecture?
Does zato perform well in restricted resource environments like ec2? What performance bottlenecks are common when using zato?
It seems that most other ESB projects are written in Java. What advantages does Python have over Java for this kind of project and in what ways is it inferior?
The architectural nature of ESBs are such that they form the central backbone of a software system. How have you been able to ensure an appropriate level of reliability and stability in Zato while still delivering new features and improvements?
What are the scalability and high availability characteristics of Zato?
Does zato run well using pypy?
For anyone wanting to use Zato, what are the infrastructure requirements for deployment?
What are some of the security ramifications you took into account in zato's design?
What are some of the most novel uses for Zato that you have seen or heard about?

Picks

Tobias

SPY
Eric Royer's One Man Band
pip-tools

Chris

Rational Security
New Rustacean Podcast
Johan Goes to Mexico

Dariusz

Sublime Text Editor


Keep In Touch

zato.io
Twiter
Github
The intro and outro music is from Requiem for a Fish The Freak Fandango Orchestra / CC BY-SA";}i:9;a:6:{s:5:"about";s:104:"http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/f9FvGT-p98M/pycon-japan-2015-success.html";s:5:"title";s:55:"Python Software Foundation: PyCon Japan 2015: A Success";s:4:"link";s:104:"http://feedproxy.google.com/~r/PythonSoftwareFoundationNews/~3/f9FvGT-p98M/pycon-japan-2015-success.html";s:7:"content";a:1:{s:7:"encoded";s:6689:"<div dir="ltr">
<div>
<span><span>Last month PyCon Japan took place from October 9 -- 12th at the </span><span><span><a href="http://www.jasso.go.jp/tiec/plazaheisei.html">Tokyo International Exchange Center Plaza Heisei</a>.&nbsp;</span></span><span>The PSF has recently received a report from the Conference Chair, <a href="https://www.youtube.com/watch?v=USPaHaFqM1Y">Takanori Suzuki</a>,&nbsp;and it appears that the conference was a great success.</span><span>&nbsp;</span></span></div>
<div>
<span>As a bit of background, the first PyCon Japan was held in 2011. That conference was a one-day affair with talks comprising three tracks. 247 people attended. Each year since then, PyCon Japan has grown in size and complexity. Last month’s sold-out conference had 602 attendees, with 80 people attending tutorials, and more than 50 staying for a fourth day to participate in Sprints.&nbsp;</span></div>
<div>
<span><br /></span></div>
<div>
<table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container"><tbody>
<tr><td><a href="http://4.bp.blogspot.com/-QlTnr2CNSR8/VkVKncIOdVI/AAAAAAAAJAQ/P7TWyNIow_0/s1600/PyConJapan.tiff"><span><img border="0" height="202" src="http://4.bp.blogspot.com/-QlTnr2CNSR8/VkVKncIOdVI/AAAAAAAAJAQ/P7TWyNIow_0/s320/PyConJapan.tiff" width="320" /></span></a></td></tr>
<tr><td class="tr-caption"><span>Photo Credit: pycon jp</span><br />
<span><br /></span>
<br />
<div>
<span><br /></span></div>
</td></tr>
</tbody></table>
</div>
<div>
<div>
<div>
<span>There were 43 sponsors. Sponsoring at the&nbsp;<q>Diamond</q>&nbsp;level was the Japanese firm,&nbsp;<a href="https://www.blogger.com/(http://www.monotaro.com/">MonotaRo</a>. Other sponsors included&nbsp;<i>PayPal</i>,&nbsp;<i>O'Reilly</i>,&nbsp;<i>CodeIQ</i>,&nbsp;<i>JetBrains</i>,&nbsp;<i>Nikkei</i>, and the Japanese online marketplace,&nbsp;<i><a href="https://angel.co/curama-jp">Curama</a>.</i>&nbsp;The PSF was happy to contribute as a&nbsp;<q>Gold</q>&nbsp;level sponsor.</span></div>
<div>
</div>
<span>A total of 32 talks were given over the two main days of the conference: 11 talks were in English and 21 in Japanese. &nbsp;Topics covered a broad range, from beginner level to advanced, including <i>Pandas</i>, <i>Data Structures</i>, <i>Metrics</i>, <i>Machine Learning</i>, <i>Bayesian Estimation, Translating code into non-English, Combinatorial Optimization</i>, and more.&nbsp;</span><br />
<span><br /></span>
<span>There were two keynotes: one in English by PSF Fellow, <a href="https://hynek.me/about/">Hynek Schlawack</a>,&nbsp;entitled&nbsp;<q><a href="https://speakerdeck.com/hynek/beyond-grep-pycon-jp)">Beyond Grep: Pragmatic Logging and Metrics</a>,</q>&nbsp;and one in Japanese by <a href="https://www.blogger.com/(http://b.hatena.ne.jp/nabinno/haruo-sato/">Haruo Sato</a>,&nbsp;entitled&nbsp;<q><a href="https://www.blogger.com/(https://www.youtube.com/watch?v=RJH8R9_OL8k)">Possibilities of Python</a>,</q></span><br />
<span>which was also the theme of the conference.</span></div>
</div>
<div>
<div>
<span>In addition to the more technical talks, a panel was devoted to&nbsp;<a href="https://pycon.jp/2015/ja/events/panel/">"Diversity and the Future of the Python Community,"</a>&nbsp; demonstrating the organizers' commitment &nbsp;to &nbsp;outreach and growth. <span>The all-women panel was itself a result of progress in this area; the moderator, &nbsp;<a href="http://tokyo.pyladies.com/staff/">Ai Makabi</a>, of&nbsp;</span><span><a href="http://tokyo.pyladies.com/"><i>PyLadies Tokyo</i></a></span><span>, was joined by representatives from&nbsp;<i>Rails Girls</i>,&nbsp;<i>Django Girls</i>, and&nbsp;<i>Women Who Code,&nbsp;</i>to explore ways to recruit additional women and minorities. The effort is clearly bringing results.&nbsp;</span>As one attendee wrote in a <a href="http://chopp.in/clj/2015/10/12/pycon-jp-2015/">Blog Post</a>:</span></div>
</div>
<blockquote class="tr_bq">
<span><span>My first impression about the Python community is its&nbsp;</span><strong>diversity</strong><span>. &nbsp;Beyond gender diversity, I felt Pythonistas (seems to be how to call someone who writes Python) were coming from so many different areas: I met people in the devops world (of course), but also researchers, roboticists, data scientists, linguists, game developers, startup owners, photographers and hackers of all sorts. &nbsp;Great community!</span></span></blockquote>
<div>
<span><span>Rounding out the conference were a poster session, jobs fair, lightning talks, and a children’s workshop. An additional feature of the conference was an official chat session set up in both English and Japanese for participants to communicate with each other (</span><a href="https://gitter.im/pyconjp/pyconjp2015-en"><span>Chat Session</span></a><span><span>)</span><span>.</span></span></span><br />
<span><span><br /></span></span>
<span><span>I'm sure everyone will join me in congratulating the organizers and participants on a successful conference. We're looking forward to PyCon Japan 2016!</span></span></div>
<div>
<span>Slides and videos from conference talks can be viewed <a href="https://pycon.jp/2015/en/reports/slides/">here</a>&nbsp;and&nbsp;<a href="http://www.slideshare.net/takanory/pycon-jp-2015-closing-speech">here</a>. For more photos, see PyCon JP <a href="https://www.flickr.com/photos/pyconjp/albums">Photo Album</a>.</span></div>
<div>
<em><span><span>I would love to hear from readers. Please send feedback, comments, or blog ideas to me at&nbsp;<a href="mailto:msushi@gnosis.cx">msushi@gnosis.cx</a></span><span>.</span></span></em></div>
</div>
<div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?a=f9FvGT-p98M:6msdbbQ5BDg:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?d=yIl2AUoC8zA" border="0" /></a> <a href="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?a=f9FvGT-p98M:6msdbbQ5BDg:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?i=f9FvGT-p98M:6msdbbQ5BDg:-BTjWOF_DHI" border="0" /></a> <a href="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?a=f9FvGT-p98M:6msdbbQ5BDg:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?i=f9FvGT-p98M:6msdbbQ5BDg:F7zBnMyn0Lo" border="0" /></a> <a href="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?a=f9FvGT-p98M:6msdbbQ5BDg:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?i=f9FvGT-p98M:6msdbbQ5BDg:V_sGLiPBpWU" border="0" /></a>
</div><img src="http://feeds.feedburner.com/~r/PythonSoftwareFoundationNews/~4/f9FvGT-p98M" height="1" width="1" alt="" />";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-12T23:33:43+00:00";}s:12:"atom_content";s:6689:"<div dir="ltr">
<div>
<span><span>Last month PyCon Japan took place from October 9 -- 12th at the </span><span><span><a href="http://www.jasso.go.jp/tiec/plazaheisei.html">Tokyo International Exchange Center Plaza Heisei</a>.&nbsp;</span></span><span>The PSF has recently received a report from the Conference Chair, <a href="https://www.youtube.com/watch?v=USPaHaFqM1Y">Takanori Suzuki</a>,&nbsp;and it appears that the conference was a great success.</span><span>&nbsp;</span></span></div>
<div>
<span>As a bit of background, the first PyCon Japan was held in 2011. That conference was a one-day affair with talks comprising three tracks. 247 people attended. Each year since then, PyCon Japan has grown in size and complexity. Last month’s sold-out conference had 602 attendees, with 80 people attending tutorials, and more than 50 staying for a fourth day to participate in Sprints.&nbsp;</span></div>
<div>
<span><br /></span></div>
<div>
<table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container"><tbody>
<tr><td><a href="http://4.bp.blogspot.com/-QlTnr2CNSR8/VkVKncIOdVI/AAAAAAAAJAQ/P7TWyNIow_0/s1600/PyConJapan.tiff"><span><img border="0" height="202" src="http://4.bp.blogspot.com/-QlTnr2CNSR8/VkVKncIOdVI/AAAAAAAAJAQ/P7TWyNIow_0/s320/PyConJapan.tiff" width="320" /></span></a></td></tr>
<tr><td class="tr-caption"><span>Photo Credit: pycon jp</span><br />
<span><br /></span>
<br />
<div>
<span><br /></span></div>
</td></tr>
</tbody></table>
</div>
<div>
<div>
<div>
<span>There were 43 sponsors. Sponsoring at the&nbsp;<q>Diamond</q>&nbsp;level was the Japanese firm,&nbsp;<a href="https://www.blogger.com/(http://www.monotaro.com/">MonotaRo</a>. Other sponsors included&nbsp;<i>PayPal</i>,&nbsp;<i>O'Reilly</i>,&nbsp;<i>CodeIQ</i>,&nbsp;<i>JetBrains</i>,&nbsp;<i>Nikkei</i>, and the Japanese online marketplace,&nbsp;<i><a href="https://angel.co/curama-jp">Curama</a>.</i>&nbsp;The PSF was happy to contribute as a&nbsp;<q>Gold</q>&nbsp;level sponsor.</span></div>
<div>
</div>
<span>A total of 32 talks were given over the two main days of the conference: 11 talks were in English and 21 in Japanese. &nbsp;Topics covered a broad range, from beginner level to advanced, including <i>Pandas</i>, <i>Data Structures</i>, <i>Metrics</i>, <i>Machine Learning</i>, <i>Bayesian Estimation, Translating code into non-English, Combinatorial Optimization</i>, and more.&nbsp;</span><br />
<span><br /></span>
<span>There were two keynotes: one in English by PSF Fellow, <a href="https://hynek.me/about/">Hynek Schlawack</a>,&nbsp;entitled&nbsp;<q><a href="https://speakerdeck.com/hynek/beyond-grep-pycon-jp)">Beyond Grep: Pragmatic Logging and Metrics</a>,</q>&nbsp;and one in Japanese by <a href="https://www.blogger.com/(http://b.hatena.ne.jp/nabinno/haruo-sato/">Haruo Sato</a>,&nbsp;entitled&nbsp;<q><a href="https://www.blogger.com/(https://www.youtube.com/watch?v=RJH8R9_OL8k)">Possibilities of Python</a>,</q></span><br />
<span>which was also the theme of the conference.</span></div>
</div>
<div>
<div>
<span>In addition to the more technical talks, a panel was devoted to&nbsp;<a href="https://pycon.jp/2015/ja/events/panel/">"Diversity and the Future of the Python Community,"</a>&nbsp; demonstrating the organizers' commitment &nbsp;to &nbsp;outreach and growth. <span>The all-women panel was itself a result of progress in this area; the moderator, &nbsp;<a href="http://tokyo.pyladies.com/staff/">Ai Makabi</a>, of&nbsp;</span><span><a href="http://tokyo.pyladies.com/"><i>PyLadies Tokyo</i></a></span><span>, was joined by representatives from&nbsp;<i>Rails Girls</i>,&nbsp;<i>Django Girls</i>, and&nbsp;<i>Women Who Code,&nbsp;</i>to explore ways to recruit additional women and minorities. The effort is clearly bringing results.&nbsp;</span>As one attendee wrote in a <a href="http://chopp.in/clj/2015/10/12/pycon-jp-2015/">Blog Post</a>:</span></div>
</div>
<blockquote class="tr_bq">
<span><span>My first impression about the Python community is its&nbsp;</span><strong>diversity</strong><span>. &nbsp;Beyond gender diversity, I felt Pythonistas (seems to be how to call someone who writes Python) were coming from so many different areas: I met people in the devops world (of course), but also researchers, roboticists, data scientists, linguists, game developers, startup owners, photographers and hackers of all sorts. &nbsp;Great community!</span></span></blockquote>
<div>
<span><span>Rounding out the conference were a poster session, jobs fair, lightning talks, and a children’s workshop. An additional feature of the conference was an official chat session set up in both English and Japanese for participants to communicate with each other (</span><a href="https://gitter.im/pyconjp/pyconjp2015-en"><span>Chat Session</span></a><span><span>)</span><span>.</span></span></span><br />
<span><span><br /></span></span>
<span><span>I'm sure everyone will join me in congratulating the organizers and participants on a successful conference. We're looking forward to PyCon Japan 2016!</span></span></div>
<div>
<span>Slides and videos from conference talks can be viewed <a href="https://pycon.jp/2015/en/reports/slides/">here</a>&nbsp;and&nbsp;<a href="http://www.slideshare.net/takanory/pycon-jp-2015-closing-speech">here</a>. For more photos, see PyCon JP <a href="https://www.flickr.com/photos/pyconjp/albums">Photo Album</a>.</span></div>
<div>
<em><span><span>I would love to hear from readers. Please send feedback, comments, or blog ideas to me at&nbsp;<a href="mailto:msushi@gnosis.cx">msushi@gnosis.cx</a></span><span>.</span></span></em></div>
</div>
<div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?a=f9FvGT-p98M:6msdbbQ5BDg:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?d=yIl2AUoC8zA" border="0" /></a> <a href="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?a=f9FvGT-p98M:6msdbbQ5BDg:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?i=f9FvGT-p98M:6msdbbQ5BDg:-BTjWOF_DHI" border="0" /></a> <a href="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?a=f9FvGT-p98M:6msdbbQ5BDg:F7zBnMyn0Lo"><img src="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?i=f9FvGT-p98M:6msdbbQ5BDg:F7zBnMyn0Lo" border="0" /></a> <a href="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?a=f9FvGT-p98M:6msdbbQ5BDg:V_sGLiPBpWU"><img src="http://feeds.feedburner.com/~ff/PythonSoftwareFoundationNews?i=f9FvGT-p98M:6msdbbQ5BDg:V_sGLiPBpWU" border="0" /></a>
</div><img src="http://feeds.feedburner.com/~r/PythonSoftwareFoundationNews/~4/f9FvGT-p98M" height="1" width="1" alt="" />";}i:10;a:6:{s:5:"about";s:101:"https://www.metachris.com/2015/11/david-beazley-python-concurrency-from-the-ground-up-live-pycon-2015";s:5:"title";s:85:"Chris Hager: David Beazley - Python Concurrency From the Ground Up (LIVE @PyCon 2015)";s:4:"link";s:101:"https://www.metachris.com/2015/11/david-beazley-python-concurrency-from-the-ground-up-live-pycon-2015";s:7:"content";a:1:{s:7:"encoded";s:1788:"<p>Great talk and engaging live coding session “Python Concurrency From the Ground Up” by <a href="https://twitter.com/dabeaz" target="_blank">David Beazley</a> at PyCon 2015! Recommended 47 minutes watch.</p>



<p>A few selected quotes:</p>

<blockquote>The fact that he walked in and did this demo from scratch while keeping the packed room engaged was incredible.﻿</blockquote>

<p>A more comprehensive quote:</p>

<blockquote><p>David Beazley's 2015 PyCon talk on concurrency was one of my favorite talks of the conference, and it was almost all just live coding.</p>

<p>Part of what made that talk compelling was that it took a concept that lots of people find complex/intimidating (how the internals of an asynchronous IO library work) and in ~30 minutes created a full working example in front of a live audience. Writing the code live in front of the audience helps to nail down the central theme of "this stuff isn't actually as scary as it looks".</p></blockquote>

<p>And another one:</p>

<blockquote><p>Being in the crowd during this talk was seriously like being at a rock concert.</p>

<p>Beazley was 'playing' the keyboard like an instrument. Every square inch of floor space had someone sitting or standing. The crowd was incredibly invested - nary an eye nor ear wavered. Even Guido looked on with a hawk eye.</p>

<p>I was in a small circle on the floor of people who had just smoked some amazing herb before the talk. I was hanging on his every word and every expression. I've rarely felt so engaged by a conference talk. I'll never forget this one.</p>

<p>He received a raucous standing ovation that is not evident from the conference video.</p></blockquote>

<p>Reach out to me via <a href="https://twitter.com/metachris" target="_blank">@metachris</a>.</p>";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-12T23:00:00+00:00";}s:12:"atom_content";s:1788:"<p>Great talk and engaging live coding session “Python Concurrency From the Ground Up” by <a href="https://twitter.com/dabeaz" target="_blank">David Beazley</a> at PyCon 2015! Recommended 47 minutes watch.</p>



<p>A few selected quotes:</p>

<blockquote>The fact that he walked in and did this demo from scratch while keeping the packed room engaged was incredible.﻿</blockquote>

<p>A more comprehensive quote:</p>

<blockquote><p>David Beazley's 2015 PyCon talk on concurrency was one of my favorite talks of the conference, and it was almost all just live coding.</p>

<p>Part of what made that talk compelling was that it took a concept that lots of people find complex/intimidating (how the internals of an asynchronous IO library work) and in ~30 minutes created a full working example in front of a live audience. Writing the code live in front of the audience helps to nail down the central theme of "this stuff isn't actually as scary as it looks".</p></blockquote>

<p>And another one:</p>

<blockquote><p>Being in the crowd during this talk was seriously like being at a rock concert.</p>

<p>Beazley was 'playing' the keyboard like an instrument. Every square inch of floor space had someone sitting or standing. The crowd was incredibly invested - nary an eye nor ear wavered. Even Guido looked on with a hawk eye.</p>

<p>I was in a small circle on the floor of people who had just smoked some amazing herb before the talk. I was hanging on his every word and every expression. I've rarely felt so engaged by a conference talk. I'll never forget this one.</p>

<p>He received a raucous standing ovation that is not evident from the conference video.</p></blockquote>

<p>Reach out to me via <a href="https://twitter.com/metachris" target="_blank">@metachris</a>.</p>";}i:11;a:5:{s:5:"about";s:0:"";s:5:"title";s:36:"Carl Chenet: db2twitter 0.2 released";s:7:"content";a:1:{s:7:"encoded";s:593:"db2twitter 0.2 was just released! If you missed my last post about it,  db2twitter automatically extracts fields from your database, use them to feed a template of tweet and send the tweet. db2twitter is developed by and run for LinuxJobs.fr, the job board of th french-speaking Free Software and Opensource community. Github of db2twitter (star <a href="http://carlchenet.com/2015/11/12/db2twitter-0-2-released/" class="more-link">&#8230;</a><img alt="" border="0" src="http://pixel.wp.com/b.gif?host=carlchenet.com&blog=7722010&post=2641&subd=carlchenet&ref=&feed=1" width="1" height="1" />";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-12T18:00:37+00:00";}s:12:"atom_content";s:593:"db2twitter 0.2 was just released! If you missed my last post about it,  db2twitter automatically extracts fields from your database, use them to feed a template of tweet and send the tweet. db2twitter is developed by and run for LinuxJobs.fr, the job board of th french-speaking Free Software and Opensource community. Github of db2twitter (star <a href="http://carlchenet.com/2015/11/12/db2twitter-0-2-released/" class="more-link">&#8230;</a><img alt="" border="0" src="http://pixel.wp.com/b.gif?host=carlchenet.com&blog=7722010&post=2641&subd=carlchenet&ref=&feed=1" width="1" height="1" />";}i:12;a:6:{s:5:"about";s:66:"http://blog.vrplumber.com/b/2015/11/12/pycaribbean-wow-s-tempting/";s:5:"title";s:50:"Mike C. Fletcher: PyCaribbean Wow, That's Tempting";s:4:"link";s:66:"http://blog.vrplumber.com/b/2015/11/12/pycaribbean-wow-s-tempting/";s:7:"content";a:1:{s:7:"encoded";s:328:"<p>Chatting about Python in the warmth and Sunshine in February sounds awesome. If you're interested in speaking, you've got a week to get those proposals in (November 20th). Flights seem to be around $600 to $800 per person from Toronto. More details on the <a href="http://pycaribbean.com/#proposals">PyCaribbean site</a>.</p>";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-12T17:20:02+00:00";}s:12:"atom_content";s:328:"<p>Chatting about Python in the warmth and Sunshine in February sounds awesome. If you're interested in speaking, you've got a week to get those proposals in (November 20th). Flights seem to be around $600 to $800 per person from Toronto. More details on the <a href="http://pycaribbean.com/#proposals">PyCaribbean site</a>.</p>";}i:13;a:6:{s:5:"about";s:57:"http://evennia.blogspot.com/2015/11/mit-uses-evennia.html";s:5:"title";s:26:"Evennia: MIT uses Evennia!";s:4:"link";s:57:"http://evennia.blogspot.com/2015/11/mit-uses-evennia.html";s:7:"content";a:1:{s:7:"encoded";s:5659:"<div class="separator"><a href="http://2.bp.blogspot.com/-FPg1PS8At3k/VkR7vqSz1LI/AAAAAAAAEco/bKSpvhDxLp0/s1600/MIT-Language-Games_0.jpg"><img border="0" height="213" src="http://2.bp.blogspot.com/-FPg1PS8At3k/VkR7vqSz1LI/AAAAAAAAEco/bKSpvhDxLp0/s320/MIT-Language-Games_0.jpg" width="320" /></a></div><span id="goog_567268248"></span><a href="https://www.blogger.com/"></a><span id="goog_567268249"></span>Evennia was recently used as a test bed to train an AI system to attempt to play a MUD as a human would - by only reading and understanding the text on the screen. <br /><br />Researchers at MIT (Massachusetts Institute of Technology) recently presented the paper <i>Language understanding for Text-based games using Deep reinforcement learning </i><a href="http://people.csail.mit.edu/karthikn/pdfs/mud-play15.pdf">(PDF</a>)<i> </i>at a conference on natural language processing. A summary is in the <a href="http://news.mit.edu/2015/learning-language-playing-computer-games-0924#_msocom_1">MIT press release</a>.<br /><br />I was contacted by these fine folks some time ago so I knew they had plans to use Evennia for their research. It's great to see they now have an article out on it! Evennia devs are also mentioned in the acknowledgements - so something for the Evennia dev community to be proud of!&nbsp; <br /><br /><h3>MUDs are tricky </h3>The main complication for an AI playing a MUD is that the computer has no access to the actual game state but must try to surmise how well it's doing only from the text given (same as a human would). The researchers compare the results from a range of deep-learning neural network algorithm that they train to play. <br /><br />To test their AI, the researchers first used Evennia to build a simple training "Home World": a 4-room "house" where the simple goal is to find and eat an apple while refraining to go to sleep. The room descriptions used here were pretty formulaic although not trivial to give a challenge. This they used to train their AI system.<br /><br />They then took this trained neural network and applied it to the real challenge, playing the Evennia <a href="https://github.com/evennia/evennia/wiki/Tutorial%20World%20Introduction">Tutorial World</a>. You can yourself try this out in our demo install or by just running a single command when starting Evennia. They call it "Fantasy World" in the article.<br /><br />The tutorial world has hand-written descriptions and often describes the exits as part of the room text. The article actually makes a comprehensive analysis of the tutorial world, including the available game states and transitions as well as the number of words and number of commands per state. Interesting stuff in itself. I presume the scientists have modified their copy of the tutorial world to provide better metrics for their analysis. <br /><br /><h3>A bridge too far</h3>As far as I understand from the article, the AI does understand to use commands with one or two arguments (like <i>eat apple </i>or the <i>move red-root right</i>), but they note that actually finding the tomb of the fallen hero (the main quest of the tutorial) is too hard for the AI:<br /><br /><blockquote class="tr_bq"><span>[...]However, this is a complex quest that requires the player to memorize game events and perform high-level planning which are beyond the</span><span><span> scope of this current work.</span> </span></blockquote>So instead they evaluate the AI's performance on a more mundane task: Getting across the bridge to the castle. It's not clear to me if the AI actually plays more of the game too or if their test just exposes the AI to the bridge itself. I suspect it <i>does</i> play more due to the examples they use from other rooms; evaluating the bridge-crossing is just a clear-cut metric to use for "success".<br /><br />The MIT press release claims that the AI is also scored on how much health/magic it has, but I don't see that mentioned in the article itself (and the tutorial world only has magic if you find the hero's tomb which they claim they cannot do). <br /><br />The bridge in Evennia's tutorial world is actually a single "room" that takes multiple steps to cross. At every step the room description changes to describe the progress. Random texts will appear as the bridge sways in the wind and various environmental cues are heard and seen. There is also a small chance of falling off the bridge if one lingers too long on it.<br /><br />So although all you really need to do is to walk east repeatedly, I can see why this can be a challenge to a neural network having no mental image of what a bridge is. It can only work off the text it's given at any given time. <br /><br />In the paper, the algorithms are evaluated both on their ability to actually cross the bridge and on how optimal their solution was, for example by not issuing invalid commands to the situation. <br /><br /><h3>Beyond the bridge</h3>The results are that after being trained on the training house setup, the AI <i>will</i> eventually be able to cross the bridge. The particular algorithm proposed also perform slightly better than the comparison ones (and <i>a lot</i> better than simple randomness).<br /><br />So from the perspective of the researchers this seems to be a success. Even so, this reinforces the fact that quite some way to go before an AI can *actually* play a real MUD successfully. Using MUDs for this type of research is a good idea though, and I do hope they expand and continue this line work in the future.<br /><br />Who knows, maybe the AI will even find that ancient tomb eventually!<br /><br /><span><i>Image from MIT news</i></span>";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-12T12:55:27+00:00";}s:12:"atom_content";s:5659:"<div class="separator"><a href="http://2.bp.blogspot.com/-FPg1PS8At3k/VkR7vqSz1LI/AAAAAAAAEco/bKSpvhDxLp0/s1600/MIT-Language-Games_0.jpg"><img border="0" height="213" src="http://2.bp.blogspot.com/-FPg1PS8At3k/VkR7vqSz1LI/AAAAAAAAEco/bKSpvhDxLp0/s320/MIT-Language-Games_0.jpg" width="320" /></a></div><span id="goog_567268248"></span><a href="https://www.blogger.com/"></a><span id="goog_567268249"></span>Evennia was recently used as a test bed to train an AI system to attempt to play a MUD as a human would - by only reading and understanding the text on the screen. <br /><br />Researchers at MIT (Massachusetts Institute of Technology) recently presented the paper <i>Language understanding for Text-based games using Deep reinforcement learning </i><a href="http://people.csail.mit.edu/karthikn/pdfs/mud-play15.pdf">(PDF</a>)<i> </i>at a conference on natural language processing. A summary is in the <a href="http://news.mit.edu/2015/learning-language-playing-computer-games-0924#_msocom_1">MIT press release</a>.<br /><br />I was contacted by these fine folks some time ago so I knew they had plans to use Evennia for their research. It's great to see they now have an article out on it! Evennia devs are also mentioned in the acknowledgements - so something for the Evennia dev community to be proud of!&nbsp; <br /><br /><h3>MUDs are tricky </h3>The main complication for an AI playing a MUD is that the computer has no access to the actual game state but must try to surmise how well it's doing only from the text given (same as a human would). The researchers compare the results from a range of deep-learning neural network algorithm that they train to play. <br /><br />To test their AI, the researchers first used Evennia to build a simple training "Home World": a 4-room "house" where the simple goal is to find and eat an apple while refraining to go to sleep. The room descriptions used here were pretty formulaic although not trivial to give a challenge. This they used to train their AI system.<br /><br />They then took this trained neural network and applied it to the real challenge, playing the Evennia <a href="https://github.com/evennia/evennia/wiki/Tutorial%20World%20Introduction">Tutorial World</a>. You can yourself try this out in our demo install or by just running a single command when starting Evennia. They call it "Fantasy World" in the article.<br /><br />The tutorial world has hand-written descriptions and often describes the exits as part of the room text. The article actually makes a comprehensive analysis of the tutorial world, including the available game states and transitions as well as the number of words and number of commands per state. Interesting stuff in itself. I presume the scientists have modified their copy of the tutorial world to provide better metrics for their analysis. <br /><br /><h3>A bridge too far</h3>As far as I understand from the article, the AI does understand to use commands with one or two arguments (like <i>eat apple </i>or the <i>move red-root right</i>), but they note that actually finding the tomb of the fallen hero (the main quest of the tutorial) is too hard for the AI:<br /><br /><blockquote class="tr_bq"><span>[...]However, this is a complex quest that requires the player to memorize game events and perform high-level planning which are beyond the</span><span><span> scope of this current work.</span> </span></blockquote>So instead they evaluate the AI's performance on a more mundane task: Getting across the bridge to the castle. It's not clear to me if the AI actually plays more of the game too or if their test just exposes the AI to the bridge itself. I suspect it <i>does</i> play more due to the examples they use from other rooms; evaluating the bridge-crossing is just a clear-cut metric to use for "success".<br /><br />The MIT press release claims that the AI is also scored on how much health/magic it has, but I don't see that mentioned in the article itself (and the tutorial world only has magic if you find the hero's tomb which they claim they cannot do). <br /><br />The bridge in Evennia's tutorial world is actually a single "room" that takes multiple steps to cross. At every step the room description changes to describe the progress. Random texts will appear as the bridge sways in the wind and various environmental cues are heard and seen. There is also a small chance of falling off the bridge if one lingers too long on it.<br /><br />So although all you really need to do is to walk east repeatedly, I can see why this can be a challenge to a neural network having no mental image of what a bridge is. It can only work off the text it's given at any given time. <br /><br />In the paper, the algorithms are evaluated both on their ability to actually cross the bridge and on how optimal their solution was, for example by not issuing invalid commands to the situation. <br /><br /><h3>Beyond the bridge</h3>The results are that after being trained on the training house setup, the AI <i>will</i> eventually be able to cross the bridge. The particular algorithm proposed also perform slightly better than the comparison ones (and <i>a lot</i> better than simple randomness).<br /><br />So from the perspective of the researchers this seems to be a success. Even so, this reinforces the fact that quite some way to go before an AI can *actually* play a real MUD successfully. Using MUDs for this type of research is a good idea though, and I do hope they expand and continue this line work in the future.<br /><br />Who knows, maybe the AI will even find that ancient tomb eventually!<br /><br /><span><i>Image from MIT news</i></span>";}i:14;a:6:{s:5:"about";s:63:"http://www.drmaciver.com/2015/11/my-favourite-language-feature/";s:5:"title";s:44:"David MacIver: My favourite language feature";s:4:"link";s:63:"http://www.drmaciver.com/2015/11/my-favourite-language-feature/";s:7:"content";a:1:{s:7:"encoded";s:4572:"<p>I&#8217;ve been writing mostly Python and C for a while. This means that the features I&#8217;m used to are mostly Python ones, because C doesn&#8217;t really have any features so it&#8217;s hard to get used to.</p>
<p>And this means that when I write other languages I&#8217;m surprised because there are things that are ubiquitous in Python that I&#8217;ve forgotten aren&#8217;t ubiquitous everywhere. Most of them aren&#8217;t that important, but there was one that popped out at me that on thinking about I decided that I <em>really</em> liked and thought it was a shame that not every language implemented it.</p>
<p>That feature is named arguments with defaults.</p>
<p>It&#8217;s definitely not a Python specific feature &#8211; there are a bunch of other languages that have it &#8211; but Python is the language where I&#8217;ve really gotten used to how useful they are, and it&#8217;s far from ubiquitous.</p>
<p>I don&#8217;t really like Python&#8217;s implementation of it that much to be honest, but most of the flaws in it are easy enough to work around (and <a href="https://www.python.org/dev/peps/pep-3102/">PEP 3102</a> makes life much better, or would if I didn&#8217;t have to write Python 2 compatible code), and when you do it makes it <em>much</em> easier to create extremely useful and flexible APIs. See my usage in <a href="https://hypothesis.readthedocs.org/en/latest/data.html">hypothesis.strategies</a> for example. e.g. the lists has 6 (ok, 5 really. The first one is only defaulted for legacy reasons) default options, all of which are useful and all of which play well together. Trying to do something similar with overloading or with different function names would be a complete horror, and really the best way to do it without default arguments is some sort of builder object which emulates them.</p>
<p>In my ideal world, I think this is how named arguments with defaults would work:</p>
<ol>
<li>There is a hard separation between named and positional arguments. The names of your arguments are not significant unless you declare them as named arguments, and named arguments cannot be passed positionally. A function may take both positional and named arguments, there&#8217;s just a clear delineation between the two. This is basically essential if you want it to be possible to make forwards compatible APIs.</li>
<li>Named arguments are not required to have defaults.</li>
<li>Positional arguments cannot have defaults (I&#8217;m not heart set on this, but it seems like a feature that is very much of limited utility and it&#8217;s cleaner to not have it)</li>
<li>Defaults arguments are evaluated as expressions in the defining scope (<em>not</em> the calling scope) each time they are used. None of this &#8216;You can&#8217;t use [] as a default argument because it&#8217;s only evaluated once and then you&#8217;re sharing a mutable object&#8217; nonsense from Python.</li>
<li>Default arguments may not depend on other named argument values. Sorry. I know this is useful, but it messes with evaluation order in the calling scope really hard and it just doesn&#8217;t make sense as a feature.</li>
<li>Optional: Default arguments <em>may</em> depend on positional argument values. This seems like an acceptable compromise for the preceding.</li>
</ol>
<p>That&#8217;s pretty much all I have to say on the subject of named arguments with defaults: They&#8217;re great, more APIs should make extensive use of them where possible, and more languages should implement them.</p>
<h3>Runners up</h3>
<p>There are a bunch of other features that I think are great. Some of them made it on to <a href="http://www.drmaciver.com/2015/07/a-wish-list/">my wish list</a> but a lot didn&#8217;t for the same reason they didn&#8217;t claim top place for this post: They&#8217;ve already won. Support isn&#8217;t always ubiquitous, but it&#8217;s close enough that languages that don&#8217;t support them are weird and backwards outliers. Examples include:</p>
<ol>
<li>Namespaces with renaming on import available (If you don&#8217;t have renaming on import then you don&#8217;t have namespaces, you have implementation hiding and are still shoving APIs into the global scope).</li>
<li>Local named and anonymous function definitions (&#8220;lambdas&#8221; or &#8220;closures&#8221;, but also nested functions).</li>
<li>Parametrized types and functions over them (for statically typed languages).</li>
</ol>
<p>I&#8217;d probably take any of those over named functions with default, but fortunately i mostly don&#8217;t have to.</p>";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-12T12:14:48+00:00";}s:12:"atom_content";s:4572:"<p>I&#8217;ve been writing mostly Python and C for a while. This means that the features I&#8217;m used to are mostly Python ones, because C doesn&#8217;t really have any features so it&#8217;s hard to get used to.</p>
<p>And this means that when I write other languages I&#8217;m surprised because there are things that are ubiquitous in Python that I&#8217;ve forgotten aren&#8217;t ubiquitous everywhere. Most of them aren&#8217;t that important, but there was one that popped out at me that on thinking about I decided that I <em>really</em> liked and thought it was a shame that not every language implemented it.</p>
<p>That feature is named arguments with defaults.</p>
<p>It&#8217;s definitely not a Python specific feature &#8211; there are a bunch of other languages that have it &#8211; but Python is the language where I&#8217;ve really gotten used to how useful they are, and it&#8217;s far from ubiquitous.</p>
<p>I don&#8217;t really like Python&#8217;s implementation of it that much to be honest, but most of the flaws in it are easy enough to work around (and <a href="https://www.python.org/dev/peps/pep-3102/">PEP 3102</a> makes life much better, or would if I didn&#8217;t have to write Python 2 compatible code), and when you do it makes it <em>much</em> easier to create extremely useful and flexible APIs. See my usage in <a href="https://hypothesis.readthedocs.org/en/latest/data.html">hypothesis.strategies</a> for example. e.g. the lists has 6 (ok, 5 really. The first one is only defaulted for legacy reasons) default options, all of which are useful and all of which play well together. Trying to do something similar with overloading or with different function names would be a complete horror, and really the best way to do it without default arguments is some sort of builder object which emulates them.</p>
<p>In my ideal world, I think this is how named arguments with defaults would work:</p>
<ol>
<li>There is a hard separation between named and positional arguments. The names of your arguments are not significant unless you declare them as named arguments, and named arguments cannot be passed positionally. A function may take both positional and named arguments, there&#8217;s just a clear delineation between the two. This is basically essential if you want it to be possible to make forwards compatible APIs.</li>
<li>Named arguments are not required to have defaults.</li>
<li>Positional arguments cannot have defaults (I&#8217;m not heart set on this, but it seems like a feature that is very much of limited utility and it&#8217;s cleaner to not have it)</li>
<li>Defaults arguments are evaluated as expressions in the defining scope (<em>not</em> the calling scope) each time they are used. None of this &#8216;You can&#8217;t use [] as a default argument because it&#8217;s only evaluated once and then you&#8217;re sharing a mutable object&#8217; nonsense from Python.</li>
<li>Default arguments may not depend on other named argument values. Sorry. I know this is useful, but it messes with evaluation order in the calling scope really hard and it just doesn&#8217;t make sense as a feature.</li>
<li>Optional: Default arguments <em>may</em> depend on positional argument values. This seems like an acceptable compromise for the preceding.</li>
</ol>
<p>That&#8217;s pretty much all I have to say on the subject of named arguments with defaults: They&#8217;re great, more APIs should make extensive use of them where possible, and more languages should implement them.</p>
<h3>Runners up</h3>
<p>There are a bunch of other features that I think are great. Some of them made it on to <a href="http://www.drmaciver.com/2015/07/a-wish-list/">my wish list</a> but a lot didn&#8217;t for the same reason they didn&#8217;t claim top place for this post: They&#8217;ve already won. Support isn&#8217;t always ubiquitous, but it&#8217;s close enough that languages that don&#8217;t support them are weird and backwards outliers. Examples include:</p>
<ol>
<li>Namespaces with renaming on import available (If you don&#8217;t have renaming on import then you don&#8217;t have namespaces, you have implementation hiding and are still shoving APIs into the global scope).</li>
<li>Local named and anonymous function definitions (&#8220;lambdas&#8221; or &#8220;closures&#8221;, but also nested functions).</li>
<li>Parametrized types and functions over them (for statically typed languages).</li>
</ol>
<p>I&#8217;d probably take any of those over named functions with default, but fortunately i mostly don&#8217;t have to.</p>";}i:15;a:6:{s:5:"about";s:87:"https://www.djangoproject.com/weblog/2015/nov/12/re-election-dsf-board-call-candidates/";s:5:"title";s:64:"Django Weblog: Re-election of the DSF Board: Call for candidates";s:4:"link";s:87:"https://www.djangoproject.com/weblog/2015/nov/12/re-election-dsf-board-call-candidates/";s:7:"content";a:1:{s:7:"encoded";s:3867:"<p>Historically, the board members of the Django Software Foundation have been elected by the DSF membership; however, once elected, they have sat on the board until they chose to stand down. To improve the accountability of the board, last year all board members were elected for one calendar year. The time has now come for the re-election of the board.</p>
<p>The DSF is calling for candidates to stand for election to the DSF board. Two members of the current board have indicated their interest in continuing to serve for the 2016 calendar year; however, the election is open to anyone who wishes to serve on the board.</p>
<p>What does a DSF board member do? DSF Board positions are unpaid volunteer positions. DSF board members are expected to participate in a monthly board teleconference, and follow up on any activities generated by that teleconference. Depending on the business presented to the board, this may result in additional work over the course of the month. The work will usually be administrative and organisational in nature -- for example, managing the financial affairs of the DSF, representing the board in legal discussions, or liaising with groups performing work on the DSF's behalf.</p>
<p>We are making a particular call for someone to fill the role of the President. Russell Keith-Magee has served as DSF President for the last 5 years. However, due to his own personal commitments, Russell has decided to stand down. Russell has done an amazing job over the last 5 years, and the DSF wouldn't be the same without him. The Django Software Foundation would like to thank Russell for his diligent service.</p>
<p>In addition, the DSF board is also looking for someone to fill the role of the Tresurer. Stacey Haysler has done an amazing job over the last year, bringing her professional experience into the DSF. Due to her involvement and work at the DEFNA, Stacey decided to focus on it and step down from the DSF.</p>
<p>The following positions need to be filled for the 2016 calendar year:</p>
<ul class="simple">
<li><strong>President</strong> - Currently held by Russell Keith-Magee (stepping down)</li>
<li><strong>3 Board members</strong> - Currently held by Karen Tracey, Ola Sitarska (stepping down) and Jannis Leidel (stepping down)</li>
<li><strong>Secretary</strong> - Currently held by Andy McKay</li>
<li><strong>Treasurer</strong> - Currently held by Stacey Haysler (stepping down)</li>
</ul>
<p>Once applications for candidacy have been received, the DSF membership will cast votes to select the winning candidates. <a class="reference external" href="https://www.djangoproject.com/foundation/developer-members/">Developer members</a> are individuals appointed by the DSF board in recognition of their service to the Django community. <a class="reference external" href="https://www.djangoproject.com/foundation/corporate-members/">Corporate members</a> are those that have contributed financially to the DSF. If you are interested in becoming a corporate member of the DSF, you can find out more on our <a class="reference external" href="https://www.djangoproject.com/foundation/corporate-membership/">corporate membership</a> page.</p>
<p>To declare your candidacy for a board position, send an email to <a class="reference external" href="mailto:foundation@djangoproject.com">foundation&#64;djangoproject.com</a>, with your name, the position(s) you would like to be considered for, and a one paragraph candidacy statement describing why you should be elected to a DSF board position. This candidacy statement will be distributed to the membership when voting occurs.</p>
<p>The call for candidates closes at 1200 UTC on November 23. If you've got any other questions about the board election process, please <a class="reference external" href="https://www.djangoproject.com/contact/foundation/">get in touch</a>.</p>";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-12T10:00:08+00:00";}s:12:"atom_content";s:3867:"<p>Historically, the board members of the Django Software Foundation have been elected by the DSF membership; however, once elected, they have sat on the board until they chose to stand down. To improve the accountability of the board, last year all board members were elected for one calendar year. The time has now come for the re-election of the board.</p>
<p>The DSF is calling for candidates to stand for election to the DSF board. Two members of the current board have indicated their interest in continuing to serve for the 2016 calendar year; however, the election is open to anyone who wishes to serve on the board.</p>
<p>What does a DSF board member do? DSF Board positions are unpaid volunteer positions. DSF board members are expected to participate in a monthly board teleconference, and follow up on any activities generated by that teleconference. Depending on the business presented to the board, this may result in additional work over the course of the month. The work will usually be administrative and organisational in nature -- for example, managing the financial affairs of the DSF, representing the board in legal discussions, or liaising with groups performing work on the DSF's behalf.</p>
<p>We are making a particular call for someone to fill the role of the President. Russell Keith-Magee has served as DSF President for the last 5 years. However, due to his own personal commitments, Russell has decided to stand down. Russell has done an amazing job over the last 5 years, and the DSF wouldn't be the same without him. The Django Software Foundation would like to thank Russell for his diligent service.</p>
<p>In addition, the DSF board is also looking for someone to fill the role of the Tresurer. Stacey Haysler has done an amazing job over the last year, bringing her professional experience into the DSF. Due to her involvement and work at the DEFNA, Stacey decided to focus on it and step down from the DSF.</p>
<p>The following positions need to be filled for the 2016 calendar year:</p>
<ul class="simple">
<li><strong>President</strong> - Currently held by Russell Keith-Magee (stepping down)</li>
<li><strong>3 Board members</strong> - Currently held by Karen Tracey, Ola Sitarska (stepping down) and Jannis Leidel (stepping down)</li>
<li><strong>Secretary</strong> - Currently held by Andy McKay</li>
<li><strong>Treasurer</strong> - Currently held by Stacey Haysler (stepping down)</li>
</ul>
<p>Once applications for candidacy have been received, the DSF membership will cast votes to select the winning candidates. <a class="reference external" href="https://www.djangoproject.com/foundation/developer-members/">Developer members</a> are individuals appointed by the DSF board in recognition of their service to the Django community. <a class="reference external" href="https://www.djangoproject.com/foundation/corporate-members/">Corporate members</a> are those that have contributed financially to the DSF. If you are interested in becoming a corporate member of the DSF, you can find out more on our <a class="reference external" href="https://www.djangoproject.com/foundation/corporate-membership/">corporate membership</a> page.</p>
<p>To declare your candidacy for a board position, send an email to <a class="reference external" href="mailto:foundation@djangoproject.com">foundation&#64;djangoproject.com</a>, with your name, the position(s) you would like to be considered for, and a one paragraph candidacy statement describing why you should be elected to a DSF board position. This candidacy statement will be distributed to the membership when voting occurs.</p>
<p>The call for candidates closes at 1200 UTC on November 23. If you've got any other questions about the board election process, please <a class="reference external" href="https://www.djangoproject.com/contact/foundation/">get in touch</a>.</p>";}i:16;a:6:{s:5:"about";s:41:"https://zato.io/blog/posts/bst-intro.html";s:5:"title";s:76:"Zato Blog: Controlling Business State Transitions with Zato, Python and REST";s:4:"link";s:41:"https://zato.io/blog/posts/bst-intro.html";s:7:"content";a:1:{s:7:"encoded";s:4870:"<h2 id="introducing-bst">Introducing BST</h2>

<p><a href="https://zato.io/docs/proc/bst/index.html">Zato Business State Transitions (BST)</a> is a newly added extension to the 
<a href="https://zato.io/docs/index.html">core Zato integration platform</a> designed for ESB, SOA, REST, APIs and Cloud Integrations in Python.</p>

<p><center>
<img src="https://zato.io/docs/_images/sample.png" alt="Screenshot" />
</center></p>

<p>BST is a perfect fit for workflow-oriented integrations with multiple applications, Python-based or not, cooperating with a shared
definition of a process, such as ones found in Order Management.</p>

<h2 id="definitions">Definitions</h2>

<p>Definitions of business states and their transitions are written in natural languages, such as English, for instance:</p>
<div class="highlight"><pre><code class="language-text">Orders
------

Objects: Order, Priority order
New: Submitted
Submitted: Ready
Ready: Sent
Sent: Confirmed, Rejected
Rejected: Updated
Updated: Ready
Force stop: Canceled, Timed out
</code></pre></div>
<h2 id="python-api">Python API</h2>

<p>From a Python's programmer perspective, everything boils down to a single <code>with</code> block in
<a href="https://zato.io/docs/intro/esb-soa.html">a Zato service</a> which:</p>

<ul>
<li>enforces that a given transition is correct for a provided business object</li>
<li>executes the block of code</li>
<li>on success, transitions the object to a new state</li>
</ul>
<div class="highlight"><pre><code class="language-python"><span class="c"># Zato</span>
<span class="kn">from</span> <span class="nn">zato.server.service</span> <span class="kn">import</span> <span class="n">Service</span>

<span class="c"># zato-labs</span>
<span class="kn">from</span> <span class="nn">zato_bst</span> <span class="kn">import</span> <span class="n">transition_to</span>

<span class="k">class</span> <span class="nc">MyService</span><span class="p">(</span><span class="n">Service</span><span class="p">):</span>

  <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>

    <span class="k">with</span> <span class="n">transition_to</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s">'Order'</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="s">'ready'</span><span class="p">):</span>

      <span class="c"># Here goes the actual user code</span>
      <span class="k">pass</span>
</code></pre></div>
<h2 id="rest-api">REST API</h2>

<p>External applications, no matter if in Python, Java, .NET or employing any other technology, can always
participate in transitions by using a <a href="https://zato.io/docs/proc/bst/rest-ext.html">BST REST API</a>.</p>

<p>Below curl is used to simulate a sample transition for an object of type Customer whose ID is 2 to a state called
&quot;Consent given&quot; in a hypothetical process of opening a customer account.</p>
<div class="highlight"><pre><code class="language-text">$ cat cust.json
{
 &quot;object_type&quot;:&quot;Customer&quot;,
 &quot;object_id&quot;:&quot;2&quot;,
 &quot;state_new&quot;:&quot;Consent given&quot;
}
$
</code></pre></div><div class="highlight"><pre><code class="language-text">$ curl http://localhost:17010/bst/transition -d @cust.json
{&quot;response&quot;:
 {
  &quot;can_transition&quot;: true,
  &quot;state_old&quot;: null,
  &quot;state_new&quot;: &quot;Consent given&quot;,
  &quot;reason&quot;: &quot;&quot;
  }
}
</code></pre></div>
<p>The full API additionally allows to:</p>

<ul>
<li>confirm a transition is valid before executing it</li>
<li>perform a mass transition of multiple business objects</li>
<li>get history of transitions for a business object</li>
<li>return a list of transitions defined in a <a href="https://zato.io/docs/index.html">Zato cluster</a></li>
</ul>

<h2 id="exports-and-diagramming">Exports and diagramming</h2>

<p>A REST API is also available to export existing BST data to either JSON or diagrams,
including both definitions and run-time information about the state of a BST instance.</p>

<p>Full control over output is offered, including means to specify custom colors, diagram
size or timezones the data should be presented in:</p>

<p><center>
<img src="https://zato.io/docs/_images/cust_current.png" alt="Screenshot" />
</center></p>

<h2 id="summary">Summary</h2>

<p>BST offers new, interesting, means to extend one's SOA or REST environments with a new perspective on how
to approach integrations that are primarily oriented towards workflows built on top of individual APIs and endpoints.</p>

<p><a href="https://zato.io/docs/proc/bst/index.html">Click here</a> to learn more about BST and the <a href="https://zato.io/docs/index.html">the core Zato platform</a>
upon which it's based.</p>";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-12T09:12:00+00:00";}s:12:"atom_content";s:4870:"<h2 id="introducing-bst">Introducing BST</h2>

<p><a href="https://zato.io/docs/proc/bst/index.html">Zato Business State Transitions (BST)</a> is a newly added extension to the 
<a href="https://zato.io/docs/index.html">core Zato integration platform</a> designed for ESB, SOA, REST, APIs and Cloud Integrations in Python.</p>

<p><center>
<img src="https://zato.io/docs/_images/sample.png" alt="Screenshot" />
</center></p>

<p>BST is a perfect fit for workflow-oriented integrations with multiple applications, Python-based or not, cooperating with a shared
definition of a process, such as ones found in Order Management.</p>

<h2 id="definitions">Definitions</h2>

<p>Definitions of business states and their transitions are written in natural languages, such as English, for instance:</p>
<div class="highlight"><pre><code class="language-text">Orders
------

Objects: Order, Priority order
New: Submitted
Submitted: Ready
Ready: Sent
Sent: Confirmed, Rejected
Rejected: Updated
Updated: Ready
Force stop: Canceled, Timed out
</code></pre></div>
<h2 id="python-api">Python API</h2>

<p>From a Python's programmer perspective, everything boils down to a single <code>with</code> block in
<a href="https://zato.io/docs/intro/esb-soa.html">a Zato service</a> which:</p>

<ul>
<li>enforces that a given transition is correct for a provided business object</li>
<li>executes the block of code</li>
<li>on success, transitions the object to a new state</li>
</ul>
<div class="highlight"><pre><code class="language-python"><span class="c"># Zato</span>
<span class="kn">from</span> <span class="nn">zato.server.service</span> <span class="kn">import</span> <span class="n">Service</span>

<span class="c"># zato-labs</span>
<span class="kn">from</span> <span class="nn">zato_bst</span> <span class="kn">import</span> <span class="n">transition_to</span>

<span class="k">class</span> <span class="nc">MyService</span><span class="p">(</span><span class="n">Service</span><span class="p">):</span>

  <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>

    <span class="k">with</span> <span class="n">transition_to</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s">'Order'</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="s">'ready'</span><span class="p">):</span>

      <span class="c"># Here goes the actual user code</span>
      <span class="k">pass</span>
</code></pre></div>
<h2 id="rest-api">REST API</h2>

<p>External applications, no matter if in Python, Java, .NET or employing any other technology, can always
participate in transitions by using a <a href="https://zato.io/docs/proc/bst/rest-ext.html">BST REST API</a>.</p>

<p>Below curl is used to simulate a sample transition for an object of type Customer whose ID is 2 to a state called
&quot;Consent given&quot; in a hypothetical process of opening a customer account.</p>
<div class="highlight"><pre><code class="language-text">$ cat cust.json
{
 &quot;object_type&quot;:&quot;Customer&quot;,
 &quot;object_id&quot;:&quot;2&quot;,
 &quot;state_new&quot;:&quot;Consent given&quot;
}
$
</code></pre></div><div class="highlight"><pre><code class="language-text">$ curl http://localhost:17010/bst/transition -d @cust.json
{&quot;response&quot;:
 {
  &quot;can_transition&quot;: true,
  &quot;state_old&quot;: null,
  &quot;state_new&quot;: &quot;Consent given&quot;,
  &quot;reason&quot;: &quot;&quot;
  }
}
</code></pre></div>
<p>The full API additionally allows to:</p>

<ul>
<li>confirm a transition is valid before executing it</li>
<li>perform a mass transition of multiple business objects</li>
<li>get history of transitions for a business object</li>
<li>return a list of transitions defined in a <a href="https://zato.io/docs/index.html">Zato cluster</a></li>
</ul>

<h2 id="exports-and-diagramming">Exports and diagramming</h2>

<p>A REST API is also available to export existing BST data to either JSON or diagrams,
including both definitions and run-time information about the state of a BST instance.</p>

<p>Full control over output is offered, including means to specify custom colors, diagram
size or timezones the data should be presented in:</p>

<p><center>
<img src="https://zato.io/docs/_images/cust_current.png" alt="Screenshot" />
</center></p>

<h2 id="summary">Summary</h2>

<p>BST offers new, interesting, means to extend one's SOA or REST environments with a new perspective on how
to approach integrations that are primarily oriented towards workflows built on top of individual APIs and endpoints.</p>

<p><a href="https://zato.io/docs/proc/bst/index.html">Click here</a> to learn more about BST and the <a href="https://zato.io/docs/index.html">the core Zato platform</a>
upon which it's based.</p>";}i:17;a:6:{s:5:"about";s:59:"https://glyph.twistedmatrix.com/2015/11/editor-malware.html";s:5:"title";s:44:"Glyph Lefkowitz: Your Text Editor Is Malware";s:4:"link";s:59:"https://glyph.twistedmatrix.com/2015/11/editor-malware.html";s:7:"content";a:1:{s:7:"encoded";s:18873:"<p>Are you a programmer?  Do you use a text editor?  Do you install any 3rd-party
functionality into that text editor?</p>
<p>If you use Vim, you’ve probably installed a few
<a href="http://stackoverflow.com/questions/3051132/install-a-vimball-from-the-command-line">vimballs</a>
from <a href="http://www.vim.org">vim.org</a>, a website only available over HTTP.
Vimballs are fairly opaque; if you’ve installed one, chances are you didn’t
audit the code.</p>
<p>If you use Emacs, you’ve probably installed some packages from
<a href="https://elpa.gnu.org">ELPA</a> or <a href="https://melpa.org/">MELPA</a> using <code>package.el</code>;
in Emacs’s default configuration, ELPA is accessed over HTTP, and until
recently MELPA’s documentation recommended HTTP as well.</p>
<p>When you install un-signed code into your editor that you downloaded over an
unencrypted, unauthenticated transport like HTTP, you might as well be
installing malware.  This is not a joke or exaggeration: you really might
be.<sup id="fnref:1"><a class="footnote-ref" href="http://glyph.twistedmatrix.com/feeds/all.atom.xml#fn:1" rel="footnote">1</a></sup> You have <em>no</em> assurance that you’re not being exploited by someone on
your local network, by someone on your ISP’s network, the NSA, the CIA, or
whoever else.</p>
<p>The solution for Vim is relatively simple: use
<a href="https://github.com/junegunn/vim-plug">vim-plug</a>, which fetches stuff from
GitHub exclusively via HTTPS.  I haven’t audited it conclusively but its
relatively small codebase includes lots of <code>https://</code> and no <code>http://</code> or
<code>git://</code><sup id="fnref:2"><a class="footnote-ref" href="http://glyph.twistedmatrix.com/feeds/all.atom.xml#fn:2" rel="footnote">2</a></sup> that I could see.</p>
<p>I’m relatively proud of my track record of being a
<a href="https://github.com/wbond/package_control/issues/91">staunch</a>
<a href="https://github.com/milkypostman/melpa/issues/2109#issuecomment-132840800">advocate</a>
for improved security in text editor package installation.  I’d like to think I
contributed a little to the fact that MELPA is now available over HTTPS and
instructs you to use HTTPS URLs.</p>
<p>But the situation still isn’t very good in Emacs-land.  Even if you manage to
get your package sources from an authenticated source over HTTPS, it doesn’t
matter, because
<a href="https://debbugs.gnu.org/cgi/bugreport.cgi?bug=21227">Emacs won’t verify TLS</a>.</p>
<p>Although package signing is implemented, practically speaking, none of the
packages are signed.<sup id="fnref:3"><a class="footnote-ref" href="http://glyph.twistedmatrix.com/feeds/all.atom.xml#fn:3" rel="footnote">3</a></sup> Therefore, you absolutely cannot trust package signing
to save you.  Plus, even if the packages <em>were</em> signed, why is it the NSA’s
business <em>which</em> packages you’re installing, anyway?  TLS is shorthand for The
Least Security (that is acceptable); whatever other security mechanisms, like
package signing, are employed, you should always <em>at least</em> have HTTPS.</p>
<p>With that, here’s my unfortunately surprise-filled step-by-step guide to
<em>actually</em> securing Emacs downloads, on Windows, Mac, and Linux.</p>
<h1>Step 1: Make Sure Your Package Sources Are HTTPS Only</h1>
<p>By default, Emacs ships with its <code>package-archives</code> list as <code>'(("gnu"
. "http://elpa.gnu.org/packages/"))</code>, which is obviously no good.  You will
want to both add MELPA (which you surely have done anyway, since it’s where all
the actually useful packages are) and change the ELPA URL itself to be HTTPS.
Use <code>M-x customize-variable</code> to change <code>package-archives</code> to:</p>
<table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span class="o">`</span><span class="p">((</span><span class="s">&quot;gnu&quot;</span> <span class="o">.</span> <span class="s">&quot;https://elpa.gnu.org/packages/&quot;</span><span class="p">)</span>
  <span class="p">(</span><span class="s">&quot;melpa&quot;</span> <span class="o">.</span> <span class="s">&quot;https://melpa.org/packages/&quot;</span><span class="p">))</span>
</pre></div>
</td></tr></table>

<h1>Step 2: Turn On TLS Trust Checking</h1>
<p>There’s another custom variable in Emacs, <code>tls-checktrust</code>, which checks trust
on TLS connections.  Go ahead and turn that on, again, via <code>M-x
customize-variable tls-checktrust</code>.</p>
<h1>Step 3: Set Your Trust Roots</h1>
<p>Now that you’ve told Emacs to check that the peer’s certificate is valid, Emacs
can’t successfully fetch HTTPS URLs any more, because Emacs does not distribute
trust root certificates.  Although the set of cabforum certificates are already
probably on your computer in
<a href="https://twistedmatrix.com/trac/ticket/5446">various</a>
<a href="https://twistedmatrix.com/trac/ticket/6372">forms</a>, you still have to acquire
them in a format usable by Emacs somehow.  There are a variety of ways, but in
the interests of brevity and cross-platform compatibility, my preferred
mechanism is to get
<a href="https://pypi.python.org/pypi/certifi">the <code>certifi</code> package from PyPI</a>, with
<code>python -m pip install --user certifi</code> or similar.  (A tutorial on installing
Python packages is a little out of scope for this post, but hopefully
<a href="https://pip2014.com">my little website about this</a> will help you get started.)</p>
<p>At this point, <code>M-x customize-variable</code> fails us, and we need to start just
writing elisp code; we need to set <code>tls-program</code> to a string computed from the
output of running a program, and if we want this to work on Windows we can’t
use Bourne shell escapes.  Instead, do something like this in your <code>.emacs</code> or
wherever you like to put your start-up elisp:<sup id="fnref:4"><a class="footnote-ref" href="http://glyph.twistedmatrix.com/feeds/all.atom.xml#fn:4" rel="footnote">4</a></sup></p>
<table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">trustfile</span>
       <span class="p">(</span><span class="nv">replace-regexp-in-string</span>
        <span class="s">&quot;\\\\&quot;</span> <span class="s">&quot;/&quot;</span>
        <span class="p">(</span><span class="nv">replace-regexp-in-string</span>
         <span class="s">&quot;\n&quot;</span> <span class="s">&quot;&quot;</span>
         <span class="p">(</span><span class="nv">shell-command-to-string</span> <span class="s">&quot;python -m certifi&quot;</span><span class="p">)))))</span>
  <span class="p">(</span><span class="k">setq</span> <span class="nv">tls-program</span>
        <span class="p">(</span><span class="nb">list</span>
         <span class="p">(</span><span class="nb">format</span> <span class="s">&quot;gnutls-cli%s --x509cafile %s -p %%p %%h&quot;</span>
                 <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">eq</span> <span class="nv">window-system</span> <span class="ss">'w32</span><span class="p">)</span> <span class="s">&quot;.exe&quot;</span> <span class="s">&quot;&quot;</span><span class="p">)</span> <span class="nv">trustfile</span><span class="p">))))</span>
</pre></div>
</td></tr></table>

<p>This will run <code>gnutls-cli</code> on UNIX, and <code>gnutls-cli.exe</code> on Windows.</p>
<p>You’ll need to install the <code>gnutls-cli</code> command line tool, which of course
varies per platform:</p>
<ul>
<li>On OS X, of course, Homebrew is the best way to go about this: <code>brew install
  gnutls</code> will install it.</li>
<li>On Windows, the only way I know of to get GnuTLS <em>itself</em> over TLS is to go
  directly to
  <a href="https://ftp.heanet.ie/mirrors/ftp.gnupg.org/gcrypt/gnutls/w32/">this mirror</a>.
  Download one of these binaries and unzip it next to Emacs in its <code>bin</code>
  directory.</li>
<li>On Debian (or derivatives), <code>apt-get install gnutls-bin</code></li>
<li>On Fedora (or derivatives), <code>yum install gnutls-utils</code></li>
</ul>
<p>Great!  Now we’ve got all the pieces we need: a tool to make TLS connections,
certificates to verify against, and Emacs configuration to make it do those
things.  We’re done, right?</p>
<p>Wrong!</p>
<h1>Step 4: TRUST NO ONE</h1>
<p>It turns out there are <em>two</em> ways to tell Emacs to really <em>actually</em> really
secure the connection (really), but before I tell you the second one or why you
need it, let’s first construct a little test to see if the connection is being
properly secured.  If we make a bad connection, we want it to fail.  Let’s make
sure it does.</p>
<p>This little snippet of elisp will use the helpful
<a href="https://badssl.com">BadSSL.com</a> site to give you some known-bad and known-good
certificates (assuming nobody’s snooping on your connection):</p>
<table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">bad-hosts</span>
       <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">bad</span>
             <span class="nv">in</span> <span class="o">`</span><span class="p">(</span><span class="s">&quot;https://wrong.host.badssl.com/&quot;</span>
                  <span class="s">&quot;https://self-signed.badssl.com/&quot;</span><span class="p">)</span>
             <span class="k">if</span> <span class="p">(</span><span class="nv">condition-case</span> <span class="nv">e</span>
                    <span class="p">(</span><span class="nv">url-retrieve</span>
                     <span class="nv">bad</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">retrieved</span><span class="p">)</span> <span class="no">t</span><span class="p">))</span>
                  <span class="p">(</span><span class="nb">error</span> <span class="no">nil</span><span class="p">))</span>
             <span class="nv">collect</span> <span class="nv">bad</span><span class="p">)))</span>
  <span class="p">(</span><span class="k">if</span> <span class="nv">bad-hosts</span>
      <span class="p">(</span><span class="nb">error</span> <span class="p">(</span><span class="nb">format</span> <span class="s">&quot;tls misconfigured; retrieved %s ok&quot;</span>
                     <span class="nv">bad-hosts</span><span class="p">))</span>
    <span class="p">(</span><span class="nv">url-retrieve</span> <span class="s">&quot;https://badssl.com&quot;</span>
                  <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">retrieved</span><span class="p">)</span> <span class="no">t</span><span class="p">))))</span>
</pre></div>
</td></tr></table>

<p>If you evaluate it and you get an error, either your trust roots aren’t set up
right and you can’t connect to a valid site, or Emacs is still blithely
trusting bad certificates.  Why might it do that?</p>
<h1>Step 5: Configure the <em>Other</em> TLS Verifier</h1>
<p>One of Emacs’s compile-time options is whether to link in GnuTLS or not.  If
GnuTLS is <em>not</em> linked in, it will use whatever TLS program you give it (which
might be <code>gnutls-cli</code> or <code>openssl s_client</code>, but since only the most recent
version of <code>openssl s_client</code> can even attempt to verify certificates, I’d
recommend against it).  That is what’s configured via <code>tls-checktrust</code> and
<code>tls-program</code> above.</p>
<p>However, if GnuTLS <em>is</em> compiled in, it will <em>totally ignore</em> those custom
variables, and honor a different set: <code>gnutls-verify-error</code> and
<code>gnutls-trustfiles</code>.  To make matters worse, installing the packages which
supply the <code>gnutls-cli</code> program <em>also</em> install the packages which might satisfy
Emacs’s dynamic linking against the GnuTLS library, which means this code path
could get silently turned on because you tried to activate the other one.</p>
<p>To give these variables the correct values as well, we can re-visit the
previous trust setup:</p>
<table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">trustfile</span>
       <span class="p">(</span><span class="nv">replace-regexp-in-string</span>
        <span class="s">&quot;\\\\&quot;</span> <span class="s">&quot;/&quot;</span>
        <span class="p">(</span><span class="nv">replace-regexp-in-string</span>
         <span class="s">&quot;\n&quot;</span> <span class="s">&quot;&quot;</span>
         <span class="p">(</span><span class="nv">shell-command-to-string</span> <span class="s">&quot;python -m certifi&quot;</span><span class="p">)))))</span>
  <span class="p">(</span><span class="k">setq</span> <span class="nv">tls-program</span>
        <span class="p">(</span><span class="nb">list</span>
         <span class="p">(</span><span class="nb">format</span> <span class="s">&quot;gnutls-cli%s --x509cafile %s -p %%p %%h&quot;</span>
                 <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">eq</span> <span class="nv">window-system</span> <span class="ss">'w32</span><span class="p">)</span> <span class="s">&quot;.exe&quot;</span> <span class="s">&quot;&quot;</span><span class="p">)</span> <span class="nv">trustfile</span><span class="p">)))</span>
  <span class="p">(</span><span class="k">setq</span> <span class="nv">gnutls-verify-error</span> <span class="no">t</span><span class="p">)</span>
  <span class="p">(</span><span class="k">setq</span> <span class="nv">gnutls-trustfiles</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">trustfile</span><span class="p">)))</span>
</pre></div>
</td></tr></table>

<p><em>Now</em> it ought to be set up properly.  Try the example again from Step 4 and it
ought to work.  It probably will.  Except, um...</p>
<h1>Appendix A: Windows is Weird</h1>
<p>Presently, the official Windows builds of Emacs seem to be linked against
version 3.3 of GnuTLS rather than the latest 3.4.  You might need to download
the latest micro-version of 3.3 instead.  As far as I can tell, it’s <em>supposed</em>
to work with the command-line tools (and maybe it will for you) but for me, for
some reason, Emacs could not parse <code>gnutls-cli.exe</code>’s output no matter what I
did.  This does not appear to be a universal experience, others have reported
success; your mileage may vary.</p>
<h1>Conclusion</h1>
<p>We nerds sometimes mock the “normals” for not being as security-savvy as we
are.  Even if we’re considerate enough not to voice these reactions, when we
hear someone got malware on their Windows machine, we think “should have used a
UNIX, not Windows”.  Or “should have been up to date on your patches”, or
something along those lines.</p>
<p>Yet, nerdy tools that download and execute code - Emacs in particular - are
shockingly careless about running arbitrary unverified code from the Internet.
And we are often equally shockingly careless to use them, when we should know
better.</p>
<p>If you’re an Emacs user and you didn’t fully understand this post, or you
couldn’t get parts of it to work, <em>stop using <code>package.el</code> until you can get
the hang of it</em>.  Get a friend to help you get your environment configured
properly.  Since a disproportionate number of Emacs users are programmers or
sysadmins, <em>you are a high-value target</em>, and you are risking not only your own
safety but that of your users if you don’t double-check that your editor
packages are coming from at least cursorily authenticated sources.</p>
<p>If you use another programmer’s text editor or nerdy development tool that is
routinely installing software onto your system, <em>make sure</em> that if it’s <em>at
least</em> securing those installations with properly verified TLS.</p>
<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p>Technically speaking of course you might <em>always</em> be installing malware;
no defense is perfect.  And HTTPS is a fairly weak one at that.  But is
<em>significantly</em> stronger than “no defense at all”.&#160;<a class="footnote-backref" href="http://glyph.twistedmatrix.com/feeds/all.atom.xml#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
<li id="fn:2">
<p>Never, ever, clone a repository using <code>git://</code> URLs.  As explained
<a href="http://www.git-scm.com/docs/git-clone#_git_urls_a_id_urls_a">in the documentation</a>:
“<strong>The native transport (i.e. git:// URL) does no authentication and should
be used with caution on unsecured networks.</strong>”.  You might have heard that
git uses a “cryptographic hash function” and thought that had something to
do with security: it doesn’t.  If you want security you need
<a href="http://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work">signed commits</a>,
and even then you can
<a href="http://mikegerwitz.com/papers/git-horror-story.html">never really be sure</a>.&#160;<a class="footnote-backref" href="http://glyph.twistedmatrix.com/feeds/all.atom.xml#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text">&#8617;</a></p>
</li>
<li id="fn:3">
<p>Plus, MELPA accepts packages on the (plain-text-only) Wiki, which may be
edited by anyone, and from CVS servers, although
<a href="https://github.com/milkypostman/melpa/issues/2342">they’d like to stop that</a>.
You should probably be <em>less</em> worried about this, because that’s a link
between two datacenters, than about the link between you and MELPA, which
is residential or business internet at best, and coffee-shop WiFi at worst.
But still maybe be a <em>bit</em> worried about it and go comment on that bug.&#160;<a class="footnote-backref" href="http://glyph.twistedmatrix.com/feeds/all.atom.xml#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text">&#8617;</a></p>
</li>
<li id="fn:4">
<p>Yes, that <code>let</code> is a hint that this is about to get more interesting...&#160;<a class="footnote-backref" href="http://glyph.twistedmatrix.com/feeds/all.atom.xml#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text">&#8617;</a></p>
</li>
</ol>
</div>";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-12T08:51:00+00:00";}s:12:"atom_content";s:18873:"<p>Are you a programmer?  Do you use a text editor?  Do you install any 3rd-party
functionality into that text editor?</p>
<p>If you use Vim, you’ve probably installed a few
<a href="http://stackoverflow.com/questions/3051132/install-a-vimball-from-the-command-line">vimballs</a>
from <a href="http://www.vim.org">vim.org</a>, a website only available over HTTP.
Vimballs are fairly opaque; if you’ve installed one, chances are you didn’t
audit the code.</p>
<p>If you use Emacs, you’ve probably installed some packages from
<a href="https://elpa.gnu.org">ELPA</a> or <a href="https://melpa.org/">MELPA</a> using <code>package.el</code>;
in Emacs’s default configuration, ELPA is accessed over HTTP, and until
recently MELPA’s documentation recommended HTTP as well.</p>
<p>When you install un-signed code into your editor that you downloaded over an
unencrypted, unauthenticated transport like HTTP, you might as well be
installing malware.  This is not a joke or exaggeration: you really might
be.<sup id="fnref:1"><a class="footnote-ref" href="http://glyph.twistedmatrix.com/feeds/all.atom.xml#fn:1" rel="footnote">1</a></sup> You have <em>no</em> assurance that you’re not being exploited by someone on
your local network, by someone on your ISP’s network, the NSA, the CIA, or
whoever else.</p>
<p>The solution for Vim is relatively simple: use
<a href="https://github.com/junegunn/vim-plug">vim-plug</a>, which fetches stuff from
GitHub exclusively via HTTPS.  I haven’t audited it conclusively but its
relatively small codebase includes lots of <code>https://</code> and no <code>http://</code> or
<code>git://</code><sup id="fnref:2"><a class="footnote-ref" href="http://glyph.twistedmatrix.com/feeds/all.atom.xml#fn:2" rel="footnote">2</a></sup> that I could see.</p>
<p>I’m relatively proud of my track record of being a
<a href="https://github.com/wbond/package_control/issues/91">staunch</a>
<a href="https://github.com/milkypostman/melpa/issues/2109#issuecomment-132840800">advocate</a>
for improved security in text editor package installation.  I’d like to think I
contributed a little to the fact that MELPA is now available over HTTPS and
instructs you to use HTTPS URLs.</p>
<p>But the situation still isn’t very good in Emacs-land.  Even if you manage to
get your package sources from an authenticated source over HTTPS, it doesn’t
matter, because
<a href="https://debbugs.gnu.org/cgi/bugreport.cgi?bug=21227">Emacs won’t verify TLS</a>.</p>
<p>Although package signing is implemented, practically speaking, none of the
packages are signed.<sup id="fnref:3"><a class="footnote-ref" href="http://glyph.twistedmatrix.com/feeds/all.atom.xml#fn:3" rel="footnote">3</a></sup> Therefore, you absolutely cannot trust package signing
to save you.  Plus, even if the packages <em>were</em> signed, why is it the NSA’s
business <em>which</em> packages you’re installing, anyway?  TLS is shorthand for The
Least Security (that is acceptable); whatever other security mechanisms, like
package signing, are employed, you should always <em>at least</em> have HTTPS.</p>
<p>With that, here’s my unfortunately surprise-filled step-by-step guide to
<em>actually</em> securing Emacs downloads, on Windows, Mac, and Linux.</p>
<h1>Step 1: Make Sure Your Package Sources Are HTTPS Only</h1>
<p>By default, Emacs ships with its <code>package-archives</code> list as <code>'(("gnu"
. "http://elpa.gnu.org/packages/"))</code>, which is obviously no good.  You will
want to both add MELPA (which you surely have done anyway, since it’s where all
the actually useful packages are) and change the ELPA URL itself to be HTTPS.
Use <code>M-x customize-variable</code> to change <code>package-archives</code> to:</p>
<table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span class="o">`</span><span class="p">((</span><span class="s">&quot;gnu&quot;</span> <span class="o">.</span> <span class="s">&quot;https://elpa.gnu.org/packages/&quot;</span><span class="p">)</span>
  <span class="p">(</span><span class="s">&quot;melpa&quot;</span> <span class="o">.</span> <span class="s">&quot;https://melpa.org/packages/&quot;</span><span class="p">))</span>
</pre></div>
</td></tr></table>

<h1>Step 2: Turn On TLS Trust Checking</h1>
<p>There’s another custom variable in Emacs, <code>tls-checktrust</code>, which checks trust
on TLS connections.  Go ahead and turn that on, again, via <code>M-x
customize-variable tls-checktrust</code>.</p>
<h1>Step 3: Set Your Trust Roots</h1>
<p>Now that you’ve told Emacs to check that the peer’s certificate is valid, Emacs
can’t successfully fetch HTTPS URLs any more, because Emacs does not distribute
trust root certificates.  Although the set of cabforum certificates are already
probably on your computer in
<a href="https://twistedmatrix.com/trac/ticket/5446">various</a>
<a href="https://twistedmatrix.com/trac/ticket/6372">forms</a>, you still have to acquire
them in a format usable by Emacs somehow.  There are a variety of ways, but in
the interests of brevity and cross-platform compatibility, my preferred
mechanism is to get
<a href="https://pypi.python.org/pypi/certifi">the <code>certifi</code> package from PyPI</a>, with
<code>python -m pip install --user certifi</code> or similar.  (A tutorial on installing
Python packages is a little out of scope for this post, but hopefully
<a href="https://pip2014.com">my little website about this</a> will help you get started.)</p>
<p>At this point, <code>M-x customize-variable</code> fails us, and we need to start just
writing elisp code; we need to set <code>tls-program</code> to a string computed from the
output of running a program, and if we want this to work on Windows we can’t
use Bourne shell escapes.  Instead, do something like this in your <code>.emacs</code> or
wherever you like to put your start-up elisp:<sup id="fnref:4"><a class="footnote-ref" href="http://glyph.twistedmatrix.com/feeds/all.atom.xml#fn:4" rel="footnote">4</a></sup></p>
<table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">trustfile</span>
       <span class="p">(</span><span class="nv">replace-regexp-in-string</span>
        <span class="s">&quot;\\\\&quot;</span> <span class="s">&quot;/&quot;</span>
        <span class="p">(</span><span class="nv">replace-regexp-in-string</span>
         <span class="s">&quot;\n&quot;</span> <span class="s">&quot;&quot;</span>
         <span class="p">(</span><span class="nv">shell-command-to-string</span> <span class="s">&quot;python -m certifi&quot;</span><span class="p">)))))</span>
  <span class="p">(</span><span class="k">setq</span> <span class="nv">tls-program</span>
        <span class="p">(</span><span class="nb">list</span>
         <span class="p">(</span><span class="nb">format</span> <span class="s">&quot;gnutls-cli%s --x509cafile %s -p %%p %%h&quot;</span>
                 <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">eq</span> <span class="nv">window-system</span> <span class="ss">'w32</span><span class="p">)</span> <span class="s">&quot;.exe&quot;</span> <span class="s">&quot;&quot;</span><span class="p">)</span> <span class="nv">trustfile</span><span class="p">))))</span>
</pre></div>
</td></tr></table>

<p>This will run <code>gnutls-cli</code> on UNIX, and <code>gnutls-cli.exe</code> on Windows.</p>
<p>You’ll need to install the <code>gnutls-cli</code> command line tool, which of course
varies per platform:</p>
<ul>
<li>On OS X, of course, Homebrew is the best way to go about this: <code>brew install
  gnutls</code> will install it.</li>
<li>On Windows, the only way I know of to get GnuTLS <em>itself</em> over TLS is to go
  directly to
  <a href="https://ftp.heanet.ie/mirrors/ftp.gnupg.org/gcrypt/gnutls/w32/">this mirror</a>.
  Download one of these binaries and unzip it next to Emacs in its <code>bin</code>
  directory.</li>
<li>On Debian (or derivatives), <code>apt-get install gnutls-bin</code></li>
<li>On Fedora (or derivatives), <code>yum install gnutls-utils</code></li>
</ul>
<p>Great!  Now we’ve got all the pieces we need: a tool to make TLS connections,
certificates to verify against, and Emacs configuration to make it do those
things.  We’re done, right?</p>
<p>Wrong!</p>
<h1>Step 4: TRUST NO ONE</h1>
<p>It turns out there are <em>two</em> ways to tell Emacs to really <em>actually</em> really
secure the connection (really), but before I tell you the second one or why you
need it, let’s first construct a little test to see if the connection is being
properly secured.  If we make a bad connection, we want it to fail.  Let’s make
sure it does.</p>
<p>This little snippet of elisp will use the helpful
<a href="https://badssl.com">BadSSL.com</a> site to give you some known-bad and known-good
certificates (assuming nobody’s snooping on your connection):</p>
<table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">bad-hosts</span>
       <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">bad</span>
             <span class="nv">in</span> <span class="o">`</span><span class="p">(</span><span class="s">&quot;https://wrong.host.badssl.com/&quot;</span>
                  <span class="s">&quot;https://self-signed.badssl.com/&quot;</span><span class="p">)</span>
             <span class="k">if</span> <span class="p">(</span><span class="nv">condition-case</span> <span class="nv">e</span>
                    <span class="p">(</span><span class="nv">url-retrieve</span>
                     <span class="nv">bad</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">retrieved</span><span class="p">)</span> <span class="no">t</span><span class="p">))</span>
                  <span class="p">(</span><span class="nb">error</span> <span class="no">nil</span><span class="p">))</span>
             <span class="nv">collect</span> <span class="nv">bad</span><span class="p">)))</span>
  <span class="p">(</span><span class="k">if</span> <span class="nv">bad-hosts</span>
      <span class="p">(</span><span class="nb">error</span> <span class="p">(</span><span class="nb">format</span> <span class="s">&quot;tls misconfigured; retrieved %s ok&quot;</span>
                     <span class="nv">bad-hosts</span><span class="p">))</span>
    <span class="p">(</span><span class="nv">url-retrieve</span> <span class="s">&quot;https://badssl.com&quot;</span>
                  <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">retrieved</span><span class="p">)</span> <span class="no">t</span><span class="p">))))</span>
</pre></div>
</td></tr></table>

<p>If you evaluate it and you get an error, either your trust roots aren’t set up
right and you can’t connect to a valid site, or Emacs is still blithely
trusting bad certificates.  Why might it do that?</p>
<h1>Step 5: Configure the <em>Other</em> TLS Verifier</h1>
<p>One of Emacs’s compile-time options is whether to link in GnuTLS or not.  If
GnuTLS is <em>not</em> linked in, it will use whatever TLS program you give it (which
might be <code>gnutls-cli</code> or <code>openssl s_client</code>, but since only the most recent
version of <code>openssl s_client</code> can even attempt to verify certificates, I’d
recommend against it).  That is what’s configured via <code>tls-checktrust</code> and
<code>tls-program</code> above.</p>
<p>However, if GnuTLS <em>is</em> compiled in, it will <em>totally ignore</em> those custom
variables, and honor a different set: <code>gnutls-verify-error</code> and
<code>gnutls-trustfiles</code>.  To make matters worse, installing the packages which
supply the <code>gnutls-cli</code> program <em>also</em> install the packages which might satisfy
Emacs’s dynamic linking against the GnuTLS library, which means this code path
could get silently turned on because you tried to activate the other one.</p>
<p>To give these variables the correct values as well, we can re-visit the
previous trust setup:</p>
<table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">trustfile</span>
       <span class="p">(</span><span class="nv">replace-regexp-in-string</span>
        <span class="s">&quot;\\\\&quot;</span> <span class="s">&quot;/&quot;</span>
        <span class="p">(</span><span class="nv">replace-regexp-in-string</span>
         <span class="s">&quot;\n&quot;</span> <span class="s">&quot;&quot;</span>
         <span class="p">(</span><span class="nv">shell-command-to-string</span> <span class="s">&quot;python -m certifi&quot;</span><span class="p">)))))</span>
  <span class="p">(</span><span class="k">setq</span> <span class="nv">tls-program</span>
        <span class="p">(</span><span class="nb">list</span>
         <span class="p">(</span><span class="nb">format</span> <span class="s">&quot;gnutls-cli%s --x509cafile %s -p %%p %%h&quot;</span>
                 <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">eq</span> <span class="nv">window-system</span> <span class="ss">'w32</span><span class="p">)</span> <span class="s">&quot;.exe&quot;</span> <span class="s">&quot;&quot;</span><span class="p">)</span> <span class="nv">trustfile</span><span class="p">)))</span>
  <span class="p">(</span><span class="k">setq</span> <span class="nv">gnutls-verify-error</span> <span class="no">t</span><span class="p">)</span>
  <span class="p">(</span><span class="k">setq</span> <span class="nv">gnutls-trustfiles</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">trustfile</span><span class="p">)))</span>
</pre></div>
</td></tr></table>

<p><em>Now</em> it ought to be set up properly.  Try the example again from Step 4 and it
ought to work.  It probably will.  Except, um...</p>
<h1>Appendix A: Windows is Weird</h1>
<p>Presently, the official Windows builds of Emacs seem to be linked against
version 3.3 of GnuTLS rather than the latest 3.4.  You might need to download
the latest micro-version of 3.3 instead.  As far as I can tell, it’s <em>supposed</em>
to work with the command-line tools (and maybe it will for you) but for me, for
some reason, Emacs could not parse <code>gnutls-cli.exe</code>’s output no matter what I
did.  This does not appear to be a universal experience, others have reported
success; your mileage may vary.</p>
<h1>Conclusion</h1>
<p>We nerds sometimes mock the “normals” for not being as security-savvy as we
are.  Even if we’re considerate enough not to voice these reactions, when we
hear someone got malware on their Windows machine, we think “should have used a
UNIX, not Windows”.  Or “should have been up to date on your patches”, or
something along those lines.</p>
<p>Yet, nerdy tools that download and execute code - Emacs in particular - are
shockingly careless about running arbitrary unverified code from the Internet.
And we are often equally shockingly careless to use them, when we should know
better.</p>
<p>If you’re an Emacs user and you didn’t fully understand this post, or you
couldn’t get parts of it to work, <em>stop using <code>package.el</code> until you can get
the hang of it</em>.  Get a friend to help you get your environment configured
properly.  Since a disproportionate number of Emacs users are programmers or
sysadmins, <em>you are a high-value target</em>, and you are risking not only your own
safety but that of your users if you don’t double-check that your editor
packages are coming from at least cursorily authenticated sources.</p>
<p>If you use another programmer’s text editor or nerdy development tool that is
routinely installing software onto your system, <em>make sure</em> that if it’s <em>at
least</em> securing those installations with properly verified TLS.</p>
<div class="footnote">
<hr />
<ol>
<li id="fn:1">
<p>Technically speaking of course you might <em>always</em> be installing malware;
no defense is perfect.  And HTTPS is a fairly weak one at that.  But is
<em>significantly</em> stronger than “no defense at all”.&#160;<a class="footnote-backref" href="http://glyph.twistedmatrix.com/feeds/all.atom.xml#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
<li id="fn:2">
<p>Never, ever, clone a repository using <code>git://</code> URLs.  As explained
<a href="http://www.git-scm.com/docs/git-clone#_git_urls_a_id_urls_a">in the documentation</a>:
“<strong>The native transport (i.e. git:// URL) does no authentication and should
be used with caution on unsecured networks.</strong>”.  You might have heard that
git uses a “cryptographic hash function” and thought that had something to
do with security: it doesn’t.  If you want security you need
<a href="http://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work">signed commits</a>,
and even then you can
<a href="http://mikegerwitz.com/papers/git-horror-story.html">never really be sure</a>.&#160;<a class="footnote-backref" href="http://glyph.twistedmatrix.com/feeds/all.atom.xml#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text">&#8617;</a></p>
</li>
<li id="fn:3">
<p>Plus, MELPA accepts packages on the (plain-text-only) Wiki, which may be
edited by anyone, and from CVS servers, although
<a href="https://github.com/milkypostman/melpa/issues/2342">they’d like to stop that</a>.
You should probably be <em>less</em> worried about this, because that’s a link
between two datacenters, than about the link between you and MELPA, which
is residential or business internet at best, and coffee-shop WiFi at worst.
But still maybe be a <em>bit</em> worried about it and go comment on that bug.&#160;<a class="footnote-backref" href="http://glyph.twistedmatrix.com/feeds/all.atom.xml#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text">&#8617;</a></p>
</li>
<li id="fn:4">
<p>Yes, that <code>let</code> is a hint that this is about to get more interesting...&#160;<a class="footnote-backref" href="http://glyph.twistedmatrix.com/feeds/all.atom.xml#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text">&#8617;</a></p>
</li>
</ol>
</div>";}i:18;a:6:{s:5:"about";s:81:"http://gc-taylor.com/blog/2015/11/11/paypal-python-123-released-maintainer-needed";s:5:"title";s:64:"Greg Taylor: paypal-python 1.2.3 released (+ maintainer needed!)";s:4:"link";s:81:"http://gc-taylor.com/blog/2015/11/11/paypal-python-123-released-maintainer-needed";s:7:"content";a:1:{s:7:"encoded";s:818:"<p>To help silence some over-aggressive logging within what is an otherwise handled exception, I have cut <a target="_blank" href="https://pypi.python.org/pypi/paypal/">paypal-python</a> 1.2.3 and released to PyPi.</p><p>paypal-python is for use with the oldschool <a target="_blank" href="https://developer.paypal.com/docs/classic/api/endpoints/">NVP API</a>.</p><h2>Maintainer(s) needed!</h2><p dir="ltr">I have zero interest in maintaining this package anymore. If anyone who uses paypal-python is interested in stepping up and taking the lead, please get in touch via the issue tracker or the <a target="_blank" href="http://gc-taylor.com/contact/">Contact me</a> page on my site.</p><p dir="ltr">Otherwise, this may be the end of the road for future releases! 1.2.3 is such a nice version number to end it on.</p>";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-12T06:51:51+00:00";}s:12:"atom_content";s:818:"<p>To help silence some over-aggressive logging within what is an otherwise handled exception, I have cut <a target="_blank" href="https://pypi.python.org/pypi/paypal/">paypal-python</a> 1.2.3 and released to PyPi.</p><p>paypal-python is for use with the oldschool <a target="_blank" href="https://developer.paypal.com/docs/classic/api/endpoints/">NVP API</a>.</p><h2>Maintainer(s) needed!</h2><p dir="ltr">I have zero interest in maintaining this package anymore. If anyone who uses paypal-python is interested in stepping up and taking the lead, please get in touch via the issue tracker or the <a target="_blank" href="http://gc-taylor.com/contact/">Contact me</a> page on my site.</p><p dir="ltr">Otherwise, this may be the end of the road for future releases! 1.2.3 is such a nice version number to end it on.</p>";}i:19;a:6:{s:5:"about";s:110:"http://inventwithpython.com/blog/2015/09/21/automate-the-boring-stuff-with-python-online-course-now-available/";s:5:"title";s:98:"Invent with Python: &quot;Automate the Boring Stuff with Python&quot; online course now available!";s:4:"link";s:110:"http://inventwithpython.com/blog/2015/09/21/automate-the-boring-stuff-with-python-online-course-now-available/";s:7:"content";a:1:{s:7:"encoded";s:673:"<p>For the last few months I've been putting together an online course that follows my latest (and <a href="https://automatetheboringstuff.com">free</a>) book, "Automate the Boring Stuff with Python". <strike>You can sign up for free (until October 12th) with the discount code BORING_FOR_FREE:</strike></p>
<p>Update: The free code has expired, but this 50% off code will work indefinitely:</p>
<p><a href="https://www.udemy.com/automate/?couponCode=HALF_OFF">Sign up for the Udemy course for 50% off.</a></p>
<p>The first 15 videos are also <a href="https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW">freely available on YouTube</a>.</p>";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-12T05:45:57+00:00";}s:12:"atom_content";s:673:"<p>For the last few months I've been putting together an online course that follows my latest (and <a href="https://automatetheboringstuff.com">free</a>) book, "Automate the Boring Stuff with Python". <strike>You can sign up for free (until October 12th) with the discount code BORING_FOR_FREE:</strike></p>
<p>Update: The free code has expired, but this 50% off code will work indefinitely:</p>
<p><a href="https://www.udemy.com/automate/?couponCode=HALF_OFF">Sign up for the Udemy course for 50% off.</a></p>
<p>The first 15 videos are also <a href="https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW">freely available on YouTube</a>.</p>";}i:20;a:6:{s:5:"about";s:76:"http://blog.vrplumber.com/b/2015/11/11/going-try-appveyor-building-releases/";s:5:"title";s:61:"Mike C. Fletcher: Going to try AppVeyor for building releases";s:4:"link";s:76:"http://blog.vrplumber.com/b/2015/11/11/going-try-appveyor-building-releases/";s:7:"content";a:1:{s:7:"encoded";s:315:"<p>Got hard-stalled trying to get the laptop configured for building all of the various versions of Python to get the binary packages released. So I think I'll try using AppVeyor to build the releases. It's free for OS projects, and it would be nice not to have to pay attention to the compiler setups any more.</p>";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-11T20:24:36+00:00";}s:12:"atom_content";s:315:"<p>Got hard-stalled trying to get the laptop configured for building all of the various versions of Python to get the binary packages released. So I think I'll try using AppVeyor to build the releases. It's free for OS projects, and it would be nice not to have to pay attention to the compiler setups any more.</p>";}i:21;a:6:{s:5:"about";s:44:"http://www.peterbe.com/plog/whatsdeployed.io";s:5:"title";s:30:"Peter Bengtsson: Whatsdeployed";s:4:"link";s:44:"http://www.peterbe.com/plog/whatsdeployed.io";s:7:"content";a:1:{s:7:"encoded";s:2044:"<p><a href="http://whatsdeployed.io">Whatsdeployed</a> was a tool I developed for my work at Mozilla. I think many other organizations can benefit from using it too. </p>
<p>So, on many sites, what we do when deploying a site, is that we note which git sha was used and write that to a file which is then exposed via the web server. Like <a href="https://air.mozilla.org/media/revision">this for example</a>. If you know that sha and what's at the tip of the master branch on the project's GitHub page, you can build up an interesting dashboard that allows you to see what's available and what's been deployed.  </p>
<p><a href="http://d1ac1bzf3lrf3c.cloudfront.net/static/cache/93/2f/932f2c2fd165b4bef8e382e1850e3b51.jpg"><img class="floatright" alt="Sample Whatsdeployed screen for the Mozilla Socorro project" src="http://d1ac1bzf3lrf3c.cloudfront.net/static/cache/4f/f2/4ff2d0df2a88c31e4b61fb0e9b8e4419.jpg" height="163" width="230" /></a><br />
The other really useful case is when you have more than just one environment. For example, you might have a <a href="https://air-dev.allizom.org/media/revision">dev</a>, <a href="https://air.allizom.org/media/revision">stage</a> and <a href="https://air.mozilla.org/media/revision">prod</a> environment and, always lastly, the master branch on GitHub. Now you can see what code has been shipped on prod versus your staging environment <a href="http://whatsdeployed.io/?owner=mozilla&repo=socorro&name[]=Stage&url[]=https://crash-stats.allizom.org/status/revision/&name[]=Prod&url[]=https://crash-stats.mozilla.com/status/revision/">for example</a>.  </p>
<p>This is one of those far too few projects that you build quickly one Friday afternoon and it turns out to be surprisingly useful to a lot of people. I for one, check various projects like this several times per day.  </p>
<p>The code is <a href="https://github.com/peterbe/whatsdeployed">on GitHub</a> and it's basically a tiny bit of Flask with some jQuery doing a couple of AJAX requests. If you enjoy it and use it, please share.</p>";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-11T17:33:26+00:00";}s:12:"atom_content";s:2044:"<p><a href="http://whatsdeployed.io">Whatsdeployed</a> was a tool I developed for my work at Mozilla. I think many other organizations can benefit from using it too. </p>
<p>So, on many sites, what we do when deploying a site, is that we note which git sha was used and write that to a file which is then exposed via the web server. Like <a href="https://air.mozilla.org/media/revision">this for example</a>. If you know that sha and what's at the tip of the master branch on the project's GitHub page, you can build up an interesting dashboard that allows you to see what's available and what's been deployed.  </p>
<p><a href="http://d1ac1bzf3lrf3c.cloudfront.net/static/cache/93/2f/932f2c2fd165b4bef8e382e1850e3b51.jpg"><img class="floatright" alt="Sample Whatsdeployed screen for the Mozilla Socorro project" src="http://d1ac1bzf3lrf3c.cloudfront.net/static/cache/4f/f2/4ff2d0df2a88c31e4b61fb0e9b8e4419.jpg" height="163" width="230" /></a><br />
The other really useful case is when you have more than just one environment. For example, you might have a <a href="https://air-dev.allizom.org/media/revision">dev</a>, <a href="https://air.allizom.org/media/revision">stage</a> and <a href="https://air.mozilla.org/media/revision">prod</a> environment and, always lastly, the master branch on GitHub. Now you can see what code has been shipped on prod versus your staging environment <a href="http://whatsdeployed.io/?owner=mozilla&repo=socorro&name[]=Stage&url[]=https://crash-stats.allizom.org/status/revision/&name[]=Prod&url[]=https://crash-stats.mozilla.com/status/revision/">for example</a>.  </p>
<p>This is one of those far too few projects that you build quickly one Friday afternoon and it turns out to be surprisingly useful to a lot of people. I for one, check various projects like this several times per day.  </p>
<p>The code is <a href="https://github.com/peterbe/whatsdeployed">on GitHub</a> and it's basically a tiny bit of Flask with some jQuery doing a couple of AJAX requests. If you enjoy it and use it, please share.</p>";}i:22;a:6:{s:5:"about";s:48:"http://nuitka.net/posts/nuitka-release-0516.html";s:5:"title";s:32:"Kay Hayen: Nuitka Release 0.5.16";s:4:"link";s:48:"http://nuitka.net/posts/nuitka-release-0516.html";s:7:"content";a:1:{s:7:"encoded";s:8159:"<div><p>This is to inform you about the new stable release of <a class="reference external" href="http://nuitka.net">Nuitka</a>. It is the extremely compatible Python compiler. Please see the page <a class="reference external" href="http://nuitka.net/pages/overview.html">"What is Nuitka?"</a> for an overview.</p>
<p>This is a maintenance release, largely intended to put out improved support for
new platforms and minor corrections. It should improve the speed for standalone
mode, and compilation in general for some use cases, but this is mostly to clean
up open ends.</p>
<div class="section" id="bug-fixes">
<h2>Bug Fixes</h2>
<ul>
<li><p class="first">Fix, the <tt class="docutils literal">len</tt> built-in could give false values for dictionary and set
creations with the same element.</p>
<pre class="code python"><a name="rest_code_fb3c87f6c6df436fb1b42504fdbc1714-1"></a><span class="c"># This was falsely optimized to 2 even if "a is b and a == b" was true.</span>
<a name="rest_code_fb3c87f6c6df436fb1b42504fdbc1714-2"></a><span class="nb">len</span><span class="p">({</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">})</span>
</pre></li>
<li><p class="first">Python: Fix, the <tt class="docutils literal">gi_running</tt> attribute of generators is no longer an <tt class="docutils literal">int</tt>,
but <tt class="docutils literal">bool</tt> instead.</p>
</li>
<li><p class="first">Python3: Fix, the <tt class="docutils literal">int</tt> built-in with two arguments, value and base, raised
<tt class="docutils literal">UnicodeDecodeError</tt> instead of <tt class="docutils literal">ValueError</tt> for illegal bytes given as
value.</p>
</li>
<li><p class="first">Python3: Using <tt class="docutils literal">tokenize.open</tt> to read source code, instead of reading
manually and decoding from <tt class="docutils literal">tokenize.detect_encoding</tt>, this handles corner
cases more compatible.</p>
</li>
<li><p class="first">Fix, the PyLint warnings plug-in could crash in some cases, make sure it's
more robust.</p>
</li>
<li><p class="first">Windows: Fix, the combination of AnaConda Python, MinGW 64 bits and mere
acceleration was not working. <a class="reference external" href="http://bugs.nuitka.net/issue254">Issue#254</a>.</p>
</li>
<li><p class="first">Standalone: Preserve not only namespace packages created by <tt class="docutils literal">.pth</tt> files,
but also make the imports done by them. This makes it more compatible with
uses of it in Fedora 22.</p>
</li>
<li><p class="first">Standalone: The extension modules could be duplicated, turned this into an
error and cache finding them during compile time and during early import
resolution to avoid duplication.</p>
</li>
<li><p class="first">Standalone: Handle "not found" from <tt class="docutils literal">ldd</tt> output, on some systems not all
the libraries wanted are accessible for every library.</p>
</li>
<li><p class="first">Python3.5: Fixed support for namespace packages, these were not yet working
for that version yet.</p>
</li>
<li><p class="first">Python3.5: Fixes lack of support for unpacking in normal <tt class="docutils literal">tuple</tt>, <tt class="docutils literal">list</tt>,
and <tt class="docutils literal">set</tt> creations.</p>
<pre class="code python"><a name="rest_code_77dd1eb668e04848a1608690c5c12b09-1"></a><span class="p">[</span><span class="o">*</span><span class="n">a</span><span class="p">]</span> <span class="c"># this has become legal in 3.5 and now works too.</span>
</pre><p>Now also gives compatible <tt class="docutils literal">SyntaxError</tt> for earlier versions. Python2 was
good already.</p>
</li>
<li><p class="first">Python3.5: Fix, need to reduce compiled functions to <tt class="docutils literal">__qualname__</tt> value,
rather than just <tt class="docutils literal">__name__</tt> or else pickling methods doesn't work.</p>
</li>
<li><p class="first">Python3.5: Fix, added <tt class="docutils literal">gi_yieldfrom</tt> attribute to generator objects.</p>
</li>
<li><p class="first">Windows: Fixed harmless warnings for Visual Studio 2015 in <tt class="docutils literal"><span class="pre">--debug</span></tt> mode.</p>
</li>
</ul>
</div>
<div class="section" id="optimization">
<h2>Optimization</h2>
<ul class="simple">
<li>Re-formulate <tt class="docutils literal">exec</tt> and <tt class="docutils literal">eval</tt> to default to <tt class="docutils literal">globals()</tt> as the default
for the locals dictionary in modules.</li>
<li>The <tt class="docutils literal">try</tt> node was making a description of nodes moved to the outside when
shrinking its scope, which was using a lot of time, just to not be output, now
these can be postponed.</li>
<li>Refactored how freezing of bytecode works. Uncompiled modules are now explicit
nodes too, and in the registry. We only have one or the other of it, avoiding
to compile both.</li>
</ul>
</div>
<div class="section" id="tests">
<h2>Tests</h2>
<ul class="simple">
<li>When <tt class="docutils literal">strace</tt> or <tt class="docutils literal">dtruss</tt> are not found, given proper error message, so
people know what to do.</li>
<li>The doctests extracted and then generated for CPython3 test suites were not
printing the expressions of the doctest, leading to largely decreased test
coverage here.</li>
<li>The CPython 3.4 test suite is now also using common runner code, and avoids
ignoring all Nuitka warnings, instead more white listing was added.</li>
<li>Started to run CPython 3.5 test suite almost completely, but coroutines are
blocking some parts of that, so these tests that use this feature are
currently skipped.</li>
<li>Removed more CPython tests that access the network and are generally useless
to testing Nuitka.</li>
<li>When comparing outputs, normalize typical temporary file names used on posix
systems.</li>
<li>Coverage tests have made some progress, and some changes were made due to its
results.</li>
<li>Added test to cover too complex code module of <tt class="docutils literal">idna</tt> module.</li>
<li>Added Python3.5 only test for unpacking variants.</li>
</ul>
</div>
<div class="section" id="cleanups">
<h2>Cleanups</h2>
<ul class="simple">
<li>Prepare plug-in interface to allow suppression of import warnings to access
the node doing it, making the import node is accessible.</li>
<li>Have dedicated class function body object, which is a specialization of the
function body node base class. This allowed removing class specific code from
that class.</li>
<li>The use of "win_target" as a scons parameter was useless. Make more consistent
use of it as a flag indicator in the scons file.</li>
<li>Compiled types were mixing uses of <tt class="docutils literal">compiled_</tt> prefixes, something with
a space, sometimes with an underscore.</li>
</ul>
</div>
<div class="section" id="organizational">
<h2>Organizational</h2>
<ul class="simple">
<li>Improved support for Python3.5 missing compatibility with new language
features.</li>
<li>Updated the Developer Manual with changes that SSA is now a fact.</li>
<li>Added support for Python3.5 Windows MSI downloads.</li>
<li>Added repository for Ubuntu Wily (15.10) for download. Removed Ubuntu Utopic
package download, no longer supported by Ubuntu.</li>
<li>Added repository with RPM packages for Fedora 22.</li>
</ul>
</div>
<div class="section" id="summary">
<h2>Summary</h2>
<p>So this release is mostly to lower the technical debt incurred that holds it
back from supporting making more interesting changes. Upcoming releases may
have continue that trend for some time.</p>
<p>This release is mostly about catching up with Python3.5, to make sure we did
not miss anything important. The new function body variants will make it easier
to implement coroutines, and help with optimization and compatibility problems
that remain for Python3 classes.</p>
<p>Ultimately it will be nice to require a lot less checks for when function inline
is going to be acceptable. Also code generation will need a continued push to
use the new structure in preparation for making type specific code generation
a reality.</p>
</div></div>";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-11T16:39:00+00:00";}s:12:"atom_content";s:8159:"<div><p>This is to inform you about the new stable release of <a class="reference external" href="http://nuitka.net">Nuitka</a>. It is the extremely compatible Python compiler. Please see the page <a class="reference external" href="http://nuitka.net/pages/overview.html">"What is Nuitka?"</a> for an overview.</p>
<p>This is a maintenance release, largely intended to put out improved support for
new platforms and minor corrections. It should improve the speed for standalone
mode, and compilation in general for some use cases, but this is mostly to clean
up open ends.</p>
<div class="section" id="bug-fixes">
<h2>Bug Fixes</h2>
<ul>
<li><p class="first">Fix, the <tt class="docutils literal">len</tt> built-in could give false values for dictionary and set
creations with the same element.</p>
<pre class="code python"><a name="rest_code_fb3c87f6c6df436fb1b42504fdbc1714-1"></a><span class="c"># This was falsely optimized to 2 even if "a is b and a == b" was true.</span>
<a name="rest_code_fb3c87f6c6df436fb1b42504fdbc1714-2"></a><span class="nb">len</span><span class="p">({</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">})</span>
</pre></li>
<li><p class="first">Python: Fix, the <tt class="docutils literal">gi_running</tt> attribute of generators is no longer an <tt class="docutils literal">int</tt>,
but <tt class="docutils literal">bool</tt> instead.</p>
</li>
<li><p class="first">Python3: Fix, the <tt class="docutils literal">int</tt> built-in with two arguments, value and base, raised
<tt class="docutils literal">UnicodeDecodeError</tt> instead of <tt class="docutils literal">ValueError</tt> for illegal bytes given as
value.</p>
</li>
<li><p class="first">Python3: Using <tt class="docutils literal">tokenize.open</tt> to read source code, instead of reading
manually and decoding from <tt class="docutils literal">tokenize.detect_encoding</tt>, this handles corner
cases more compatible.</p>
</li>
<li><p class="first">Fix, the PyLint warnings plug-in could crash in some cases, make sure it's
more robust.</p>
</li>
<li><p class="first">Windows: Fix, the combination of AnaConda Python, MinGW 64 bits and mere
acceleration was not working. <a class="reference external" href="http://bugs.nuitka.net/issue254">Issue#254</a>.</p>
</li>
<li><p class="first">Standalone: Preserve not only namespace packages created by <tt class="docutils literal">.pth</tt> files,
but also make the imports done by them. This makes it more compatible with
uses of it in Fedora 22.</p>
</li>
<li><p class="first">Standalone: The extension modules could be duplicated, turned this into an
error and cache finding them during compile time and during early import
resolution to avoid duplication.</p>
</li>
<li><p class="first">Standalone: Handle "not found" from <tt class="docutils literal">ldd</tt> output, on some systems not all
the libraries wanted are accessible for every library.</p>
</li>
<li><p class="first">Python3.5: Fixed support for namespace packages, these were not yet working
for that version yet.</p>
</li>
<li><p class="first">Python3.5: Fixes lack of support for unpacking in normal <tt class="docutils literal">tuple</tt>, <tt class="docutils literal">list</tt>,
and <tt class="docutils literal">set</tt> creations.</p>
<pre class="code python"><a name="rest_code_77dd1eb668e04848a1608690c5c12b09-1"></a><span class="p">[</span><span class="o">*</span><span class="n">a</span><span class="p">]</span> <span class="c"># this has become legal in 3.5 and now works too.</span>
</pre><p>Now also gives compatible <tt class="docutils literal">SyntaxError</tt> for earlier versions. Python2 was
good already.</p>
</li>
<li><p class="first">Python3.5: Fix, need to reduce compiled functions to <tt class="docutils literal">__qualname__</tt> value,
rather than just <tt class="docutils literal">__name__</tt> or else pickling methods doesn't work.</p>
</li>
<li><p class="first">Python3.5: Fix, added <tt class="docutils literal">gi_yieldfrom</tt> attribute to generator objects.</p>
</li>
<li><p class="first">Windows: Fixed harmless warnings for Visual Studio 2015 in <tt class="docutils literal"><span class="pre">--debug</span></tt> mode.</p>
</li>
</ul>
</div>
<div class="section" id="optimization">
<h2>Optimization</h2>
<ul class="simple">
<li>Re-formulate <tt class="docutils literal">exec</tt> and <tt class="docutils literal">eval</tt> to default to <tt class="docutils literal">globals()</tt> as the default
for the locals dictionary in modules.</li>
<li>The <tt class="docutils literal">try</tt> node was making a description of nodes moved to the outside when
shrinking its scope, which was using a lot of time, just to not be output, now
these can be postponed.</li>
<li>Refactored how freezing of bytecode works. Uncompiled modules are now explicit
nodes too, and in the registry. We only have one or the other of it, avoiding
to compile both.</li>
</ul>
</div>
<div class="section" id="tests">
<h2>Tests</h2>
<ul class="simple">
<li>When <tt class="docutils literal">strace</tt> or <tt class="docutils literal">dtruss</tt> are not found, given proper error message, so
people know what to do.</li>
<li>The doctests extracted and then generated for CPython3 test suites were not
printing the expressions of the doctest, leading to largely decreased test
coverage here.</li>
<li>The CPython 3.4 test suite is now also using common runner code, and avoids
ignoring all Nuitka warnings, instead more white listing was added.</li>
<li>Started to run CPython 3.5 test suite almost completely, but coroutines are
blocking some parts of that, so these tests that use this feature are
currently skipped.</li>
<li>Removed more CPython tests that access the network and are generally useless
to testing Nuitka.</li>
<li>When comparing outputs, normalize typical temporary file names used on posix
systems.</li>
<li>Coverage tests have made some progress, and some changes were made due to its
results.</li>
<li>Added test to cover too complex code module of <tt class="docutils literal">idna</tt> module.</li>
<li>Added Python3.5 only test for unpacking variants.</li>
</ul>
</div>
<div class="section" id="cleanups">
<h2>Cleanups</h2>
<ul class="simple">
<li>Prepare plug-in interface to allow suppression of import warnings to access
the node doing it, making the import node is accessible.</li>
<li>Have dedicated class function body object, which is a specialization of the
function body node base class. This allowed removing class specific code from
that class.</li>
<li>The use of "win_target" as a scons parameter was useless. Make more consistent
use of it as a flag indicator in the scons file.</li>
<li>Compiled types were mixing uses of <tt class="docutils literal">compiled_</tt> prefixes, something with
a space, sometimes with an underscore.</li>
</ul>
</div>
<div class="section" id="organizational">
<h2>Organizational</h2>
<ul class="simple">
<li>Improved support for Python3.5 missing compatibility with new language
features.</li>
<li>Updated the Developer Manual with changes that SSA is now a fact.</li>
<li>Added support for Python3.5 Windows MSI downloads.</li>
<li>Added repository for Ubuntu Wily (15.10) for download. Removed Ubuntu Utopic
package download, no longer supported by Ubuntu.</li>
<li>Added repository with RPM packages for Fedora 22.</li>
</ul>
</div>
<div class="section" id="summary">
<h2>Summary</h2>
<p>So this release is mostly to lower the technical debt incurred that holds it
back from supporting making more interesting changes. Upcoming releases may
have continue that trend for some time.</p>
<p>This release is mostly about catching up with Python3.5, to make sure we did
not miss anything important. The new function body variants will make it easier
to implement coroutines, and help with optimization and compatibility problems
that remain for Python3 classes.</p>
<p>Ultimately it will be nice to require a lot less checks for when function inline
is going to be acceptable. Also code generation will need a continued push to
use the new structure in preparation for making type specific code generation
a reality.</p>
</div></div>";}i:23;a:6:{s:5:"about";s:80:"http://blog.vrplumber.com/b/2015/11/11/lazy-calculated-integer-sizes-deprecated/";s:5:"title";s:58:"Mike C. Fletcher: Lazy-calculated Integer Sizes Deprecated";s:4:"link";s:80:"http://blog.vrplumber.com/b/2015/11/11/lazy-calculated-integer-sizes-deprecated/";s:7:"content";a:1:{s:7:"encoded";s:630:"<p>So there's a bit of code in PyOpenGL that is now producing deprecation warnings. In essence, we have a type that is a "run-time lookup" integer. So when you have an element that is of unknown size, you lookup that value via some function. That function is often OpenGL-context-dependent. As of latest Numpy that's now producing deprecation warnings, as you're no longer allowed to pass in an object-with-__int__ as a dimension on a zeros() call.</p>
<p>Update: and it turns out that I already dealt with this in the accelerate module, it's only the testing of the non-accelerated release (thanks tox) that revealed the bug.</p>";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-11T16:05:15+00:00";}s:12:"atom_content";s:630:"<p>So there's a bit of code in PyOpenGL that is now producing deprecation warnings. In essence, we have a type that is a "run-time lookup" integer. So when you have an element that is of unknown size, you lookup that value via some function. That function is often OpenGL-context-dependent. As of latest Numpy that's now producing deprecation warnings, as you're no longer allowed to pass in an object-with-__int__ as a dimension on a zeros() call.</p>
<p>Update: and it turns out that I already dealt with this in the accelerate module, it's only the testing of the non-accelerated release (thanks tox) that revealed the bug.</p>";}i:24;a:6:{s:5:"about";s:54:"http://feedproxy.google.com/~r/Pycharm/~3/ICuERkYpkRs/";s:5:"title";s:38:"PyCharm: PyCharm 5.0.1 update released";s:4:"link";s:54:"http://feedproxy.google.com/~r/Pycharm/~3/ICuERkYpkRs/";s:7:"content";a:1:{s:7:"encoded";s:1963:"<p>Just one week after the PyCharm 5 release, we bring you a bug-fix update, PyCharm 5.0.1, <a href="http://www.jetbrains.com/pycharm/download/">available from the download page</a>. It will also be available shortly as a patch update from within the IDE (from PyCharm 5.0 only).</p>
<p>Some notable highlights of this update include:</p>
<ul>
<li>a fix for hangs on opening context menus (<a href="https://youtrack.jetbrains.com/issue/PY-17113">PY-17113</a>)</li>
<li>a fix for tool windows not being hidden automatically (<a href="https://youtrack.jetbrains.com/issue/IDEA-146684">IDEA-146684</a>)</li>
<li>Python 3.5 support fixes (<a href="https://youtrack.jetbrains.com/issue/PY-17282">PY-17282</a>)</li>
<li>a fix for wrong encodings (<a href="https://youtrack.jetbrains.com/issue/PY-17568">PY-17568</a>)</li>
<li>a fix for code inspections performance problems (<a href="https://youtrack.jetbrains.com/issue/PY-17356">PY-17356</a>)</li>
<li>a fix for Docstring support (<a href="https://youtrack.jetbrains.com/issue/PY-17470">PY-17470</a>)</li>
<li>a fix in the debugger for Attach to Process (<a href="https://youtrack.jetbrains.com/issue/PY-17465">PY-17465</a>)</li>
<li>a GAE support fix (<a href="https://youtrack.jetbrains.com/issue/PY-17473">PY-17473</a>)</li>
<li>and more</li>
</ul>
<p>For further details on the bug-fixes and changes, please consult the <a href="https://confluence.jetbrains.com/display/PYH/PyCharm+143.595+Release+Notes">Release Notes</a>.</p>
<p>As usual, please report any problems you found in our <a href="http://youtrack.jetbrains.com/issues/PY">issue tracker</a>.</p>
<p>If you would like to discuss your experience with PyCharm, we look forward to your feedback in the comments to this blog post and on <a href="https://twitter.com/pycharm">twitter</a>.</p>
<p><em>Develop with Pleasure!</em><br />
<em> -PyCharm team</em></p>
<img src="http://feeds.feedburner.com/~r/Pycharm/~4/ICuERkYpkRs" height="1" width="1" alt="" />";}s:2:"dc";a:1:{s:4:"date";s:25:"2015-11-11T15:20:23+00:00";}s:12:"atom_content";s:1963:"<p>Just one week after the PyCharm 5 release, we bring you a bug-fix update, PyCharm 5.0.1, <a href="http://www.jetbrains.com/pycharm/download/">available from the download page</a>. It will also be available shortly as a patch update from within the IDE (from PyCharm 5.0 only).</p>
<p>Some notable highlights of this update include:</p>
<ul>
<li>a fix for hangs on opening context menus (<a href="https://youtrack.jetbrains.com/issue/PY-17113">PY-17113</a>)</li>
<li>a fix for tool windows not being hidden automatically (<a href="https://youtrack.jetbrains.com/issue/IDEA-146684">IDEA-146684</a>)</li>
<li>Python 3.5 support fixes (<a href="https://youtrack.jetbrains.com/issue/PY-17282">PY-17282</a>)</li>
<li>a fix for wrong encodings (<a href="https://youtrack.jetbrains.com/issue/PY-17568">PY-17568</a>)</li>
<li>a fix for code inspections performance problems (<a href="https://youtrack.jetbrains.com/issue/PY-17356">PY-17356</a>)</li>
<li>a fix for Docstring support (<a href="https://youtrack.jetbrains.com/issue/PY-17470">PY-17470</a>)</li>
<li>a fix in the debugger for Attach to Process (<a href="https://youtrack.jetbrains.com/issue/PY-17465">PY-17465</a>)</li>
<li>a GAE support fix (<a href="https://youtrack.jetbrains.com/issue/PY-17473">PY-17473</a>)</li>
<li>and more</li>
</ul>
<p>For further details on the bug-fixes and changes, please consult the <a href="https://confluence.jetbrains.com/display/PYH/PyCharm+143.595+Release+Notes">Release Notes</a>.</p>
<p>As usual, please report any problems you found in our <a href="http://youtrack.jetbrains.com/issues/PY">issue tracker</a>.</p>
<p>If you would like to discuss your experience with PyCharm, we look forward to your feedback in the comments to this blog post and on <a href="https://twitter.com/pycharm">twitter</a>.</p>
<p><em>Develop with Pleasure!</em><br />
<em> -PyCharm team</em></p>
<img src="http://feeds.feedburner.com/~r/Pycharm/~4/ICuERkYpkRs" height="1" width="1" alt="" />";}}s:7:"channel";a:6:{s:5:"title";s:13:"Planet Python";s:4:"link";s:24:"http://planetpython.org/";s:11:"description";s:40:"Planet Python - http://planetpython.org/";s:5:"items";s:5:"
		
	";s:9:"items_seq";s:103:"
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		";s:7:"tagline";s:40:"Planet Python - http://planetpython.org/";}s:9:"textinput";a:0:{}s:5:"image";a:0:{}s:9:"feed_type";s:3:"RSS";s:12:"feed_version";s:3:"1.0";s:5:"stack";a:0:{}s:9:"inchannel";b:0;s:6:"initem";b:0;s:9:"incontent";b:0;s:11:"intextinput";b:0;s:7:"inimage";b:0;s:13:"current_field";s:0:"";s:17:"current_namespace";b:0;s:5:"ERROR";s:0:"";s:19:"_CONTENT_CONSTRUCTS";a:6:{i:0;s:7:"content";i:1;s:7:"summary";i:2;s:4:"info";i:3;s:5:"title";i:4;s:7:"tagline";i:5;s:9:"copyright";}s:13:"last_modified";s:31:"Sat, 14 Nov 2015 10:49:41 GMT
";s:4:"etag";s:18:""564711c5-45972"
";}