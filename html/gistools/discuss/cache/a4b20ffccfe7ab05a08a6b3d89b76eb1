O:9:"magpierss":20:{s:6:"parser";i:0;s:12:"current_item";a:0:{}s:5:"items";a:15:{i:0;a:10:{s:5:"title";s:26:"Custom data in Google Maps";s:4:"link";s:79:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/archive/2005/05/11/23.aspx";s:7:"pubdate";s:29:"Thu, 12 May 2005 02:37:00 GMT";s:4:"guid";s:39:"53332bb2-7758-437e-86ab-e8e36e8e971d:23";s:2:"dc";a:1:{s:7:"creator";s:5:"admin";}s:5:"slash";a:1:{s:8:"comments";s:1:"1";}s:8:"comments";s:69:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/comments/23.aspx";s:3:"wfw";a:1:{s:10:"commentrss";s:78:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/commentrss.aspx?PostID=23";}s:11:"description";s:2376:"<P>Finally got the custom data sample working. Below is a demo of a custom GM layer “spec” embedded in the main street layer (click on 'land parcels'). It was built from an ArcMap MXD file that uses data from an ArcSDE server. The map tiles were exported and then saved in a SQLServer database as binary data with another table holding both attributes and pointers into the data. This was done to cut down on the large amount of redundant tiles at closer scales. The tile loader compares an MD5 hash of the pixel data against other stored tiles and then either records the existing pointer or creates a new one. This reduced data storage considerably but is variable depending on the complexity of your map symbology. </P>
<P>On the client, the outgoing url is patched with an aspx page url that accepts the same parameters that are passed to the google servers for their street maps. Sticking to the GM spec should make integrating tiles in other apps reasonably easy in the future.</P><IFRAME src="http://12.144.53.33/portal/Maps/GMap.aspx" frameBorder="0" width="475" scrolling="no" height="475"></IFRAME>
<P></P>
<P><BR>The loader can use any MXD file in any projection as long as the data is geographically located within North America, although it wouldn’t be hard to change it for future GM locations. </P>
<P>Problems thus far:<BR>1)&nbsp;Runtime Labeling is an issue since the placement algorithms tend to cause overlapping at the edges of the tiles (I may have a solution to this). Annotations should not be a problem.<BR>2)&nbsp;Performance – clearly the tiles do not populate as fast as googles but this is primarily a hardware resource issue. Additionally, there are several asp.net and sqlserver optimizations that have not been done yet. Going forward, it should scale well over multiple web servers. 
<P>I have several future additions for both the client and server side of things, I’ll write about them later on. Also, next Tuesday (May 17th) I’ll be on the web services panel at Pennsylvania GIS conference. Feel free to stop by&nbsp;and chat about all things GIS…</P>
<P>&nbsp;</P>
<P>Listening To: <A href="http://music.msn.com/artist/?artist=16241961">Modest Mouse - Tundra/Desert - This Is A Long Drive For Someone With Nothing To Think About</A></P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=23" width="1" height="1">";s:7:"summary";s:2376:"<P>Finally got the custom data sample working. Below is a demo of a custom GM layer “spec” embedded in the main street layer (click on 'land parcels'). It was built from an ArcMap MXD file that uses data from an ArcSDE server. The map tiles were exported and then saved in a SQLServer database as binary data with another table holding both attributes and pointers into the data. This was done to cut down on the large amount of redundant tiles at closer scales. The tile loader compares an MD5 hash of the pixel data against other stored tiles and then either records the existing pointer or creates a new one. This reduced data storage considerably but is variable depending on the complexity of your map symbology. </P>
<P>On the client, the outgoing url is patched with an aspx page url that accepts the same parameters that are passed to the google servers for their street maps. Sticking to the GM spec should make integrating tiles in other apps reasonably easy in the future.</P><IFRAME src="http://12.144.53.33/portal/Maps/GMap.aspx" frameBorder="0" width="475" scrolling="no" height="475"></IFRAME>
<P></P>
<P><BR>The loader can use any MXD file in any projection as long as the data is geographically located within North America, although it wouldn’t be hard to change it for future GM locations. </P>
<P>Problems thus far:<BR>1)&nbsp;Runtime Labeling is an issue since the placement algorithms tend to cause overlapping at the edges of the tiles (I may have a solution to this). Annotations should not be a problem.<BR>2)&nbsp;Performance – clearly the tiles do not populate as fast as googles but this is primarily a hardware resource issue. Additionally, there are several asp.net and sqlserver optimizations that have not been done yet. Going forward, it should scale well over multiple web servers. 
<P>I have several future additions for both the client and server side of things, I’ll write about them later on. Also, next Tuesday (May 17th) I’ll be on the web services panel at Pennsylvania GIS conference. Feel free to stop by&nbsp;and chat about all things GIS…</P>
<P>&nbsp;</P>
<P>Listening To: <A href="http://music.msn.com/artist/?artist=16241961">Modest Mouse - Tundra/Desert - This Is A Long Drive For Someone With Nothing To Think About</A></P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=23" width="1" height="1">";}i:1;a:10:{s:5:"title";s:16:"More Google Maps";s:4:"link";s:79:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/archive/2005/05/01/18.aspx";s:7:"pubdate";s:29:"Sun, 01 May 2005 19:24:00 GMT";s:4:"guid";s:39:"53332bb2-7758-437e-86ab-e8e36e8e971d:18";s:2:"dc";a:1:{s:7:"creator";s:5:"admin";}s:5:"slash";a:1:{s:8:"comments";s:1:"3";}s:8:"comments";s:69:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/comments/18.aspx";s:3:"wfw";a:1:{s:10:"commentrss";s:78:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/commentrss.aspx?PostID=18";}s:11:"description";s:3860:"<P>I spent some more time looking into how Google Maps (GM) works and more importantly, how you can integrate your own data into its display. The vast majority of what I found came from these two sites: <A href="http://69.90.152.144/collab/GoogleMapsHacking">GoogleMapsHacking</A> and <A href="http://stuff.rancidbacon.com/gmaps-standalone/">gmaps-standalone </A>. Serious kudos to these fellas (oh, and the Google Maps team for putting it together in the first place)</P>
<P>Putting aside the obvious unknowns about Google’s future business plans for GM, the platform itself is incredibly flexible when consuming arbitrary data feeds. After working with it for awhile and after using some of the other 3rd party sites, it’s clear that you could use just the base tools to visualize all of your point data. The smooth scrolling and fast refresh (via the pre-rendered tiles) is amazingly intuitive and more user friendly then the traditional online maps. This is not what I expected when I first saw GM however, since that time, I have found myself attempting to dynamically drag the static maps found on other online sites with regrettably little effect.</P>
<P>Below is a sample embedded GM that uses a custom RESTful web service (yea, just a .Net aspx page with querystrings) containing Tax information from New Jersey (already online and publicly available). What’s different is the use of tax parcel polygons (well, their centroids) as the anchor point for the GM info popup instead of the traditional geocoding result. In the case of the SDL Office link, the anchor point is directly on top of the building whereas the GM result for that address puts it out in the intersection of the cross streets. Clearly, displaying info popups using more accurate GIS data has endless possibilities.<BR><IFRAME src="http://12.144.53.34/portal/Maps/SDLGMaps.aspx" frameBorder="0" width="475" scrolling="no" height="475"></IFRAME></P>
<P>What could be done:<BR>1) Pre-rendered custom tile maps – the GM script contains methods for working with custom tile sets (aka specs, _GOOGLE_MAPS_SPEC or _KEYHOLE_SPEC). It should be possible to pre-render an MXD file at certain scales and then store them in a BLOB fields in the db. A custom HTTPHandler could then pull the relevant tile on the fly. You could also provide an API to refresh tiles based on an extent so that edited GIS data could quickly get into the cache.<BR>2) One time analysis overlays – I’d really like to have runtime rendered map images displayed over the existing tiles. </P>
<P><BR>This is just a quickly hacked up sample, in the future I’ll show you a much improved UI for searching and mapping lots more municipal data using some of the cool ASP.NET 2 features. We are currently tracking near real time feeds of data from our clients into a centralized portal on our servers, the ultimate goal of which is to provide online access to this very local dataset. Merge replication between dozens of distinct sites is where I’ve spent the majority of my time the past 3 months. Replicating this data to and from the portal is a much larger task then mapping it, so I’ll also get into this process in a later post.</P>
<P><BR>It’s unclear to me how any of this benefits Google. Since you are not feeding your data through their servers or positioning any of their AdSense goo, it pretty much comes down to using their (very clever) javascript and map tiles for free. Compare this to what is charged by other 3rd parties for use of their data or APIs and a market disconnect becomes evident. It will be interesting to see where this goes in the future…<BR></P>
<P>Listening To: <A href="http://music.msn.com/album/?album=10454757">Radiohead – the National Anthem – Kid A</A></P>
<P>&nbsp;</P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=18" width="1" height="1">";s:7:"summary";s:3860:"<P>I spent some more time looking into how Google Maps (GM) works and more importantly, how you can integrate your own data into its display. The vast majority of what I found came from these two sites: <A href="http://69.90.152.144/collab/GoogleMapsHacking">GoogleMapsHacking</A> and <A href="http://stuff.rancidbacon.com/gmaps-standalone/">gmaps-standalone </A>. Serious kudos to these fellas (oh, and the Google Maps team for putting it together in the first place)</P>
<P>Putting aside the obvious unknowns about Google’s future business plans for GM, the platform itself is incredibly flexible when consuming arbitrary data feeds. After working with it for awhile and after using some of the other 3rd party sites, it’s clear that you could use just the base tools to visualize all of your point data. The smooth scrolling and fast refresh (via the pre-rendered tiles) is amazingly intuitive and more user friendly then the traditional online maps. This is not what I expected when I first saw GM however, since that time, I have found myself attempting to dynamically drag the static maps found on other online sites with regrettably little effect.</P>
<P>Below is a sample embedded GM that uses a custom RESTful web service (yea, just a .Net aspx page with querystrings) containing Tax information from New Jersey (already online and publicly available). What’s different is the use of tax parcel polygons (well, their centroids) as the anchor point for the GM info popup instead of the traditional geocoding result. In the case of the SDL Office link, the anchor point is directly on top of the building whereas the GM result for that address puts it out in the intersection of the cross streets. Clearly, displaying info popups using more accurate GIS data has endless possibilities.<BR><IFRAME src="http://12.144.53.34/portal/Maps/SDLGMaps.aspx" frameBorder="0" width="475" scrolling="no" height="475"></IFRAME></P>
<P>What could be done:<BR>1) Pre-rendered custom tile maps – the GM script contains methods for working with custom tile sets (aka specs, _GOOGLE_MAPS_SPEC or _KEYHOLE_SPEC). It should be possible to pre-render an MXD file at certain scales and then store them in a BLOB fields in the db. A custom HTTPHandler could then pull the relevant tile on the fly. You could also provide an API to refresh tiles based on an extent so that edited GIS data could quickly get into the cache.<BR>2) One time analysis overlays – I’d really like to have runtime rendered map images displayed over the existing tiles. </P>
<P><BR>This is just a quickly hacked up sample, in the future I’ll show you a much improved UI for searching and mapping lots more municipal data using some of the cool ASP.NET 2 features. We are currently tracking near real time feeds of data from our clients into a centralized portal on our servers, the ultimate goal of which is to provide online access to this very local dataset. Merge replication between dozens of distinct sites is where I’ve spent the majority of my time the past 3 months. Replicating this data to and from the portal is a much larger task then mapping it, so I’ll also get into this process in a later post.</P>
<P><BR>It’s unclear to me how any of this benefits Google. Since you are not feeding your data through their servers or positioning any of their AdSense goo, it pretty much comes down to using their (very clever) javascript and map tiles for free. Compare this to what is charged by other 3rd parties for use of their data or APIs and a market disconnect becomes evident. It will be interesting to see where this goes in the future…<BR></P>
<P>Listening To: <A href="http://music.msn.com/album/?album=10454757">Radiohead – the National Anthem – Kid A</A></P>
<P>&nbsp;</P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=18" width="1" height="1">";}i:2;a:10:{s:5:"title";s:17:"ArcEngine Dialogs";s:4:"link";s:79:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/archive/2005/04/19/17.aspx";s:7:"pubdate";s:29:"Tue, 19 Apr 2005 23:35:00 GMT";s:4:"guid";s:39:"53332bb2-7758-437e-86ab-e8e36e8e971d:17";s:2:"dc";a:1:{s:7:"creator";s:5:"admin";}s:5:"slash";a:1:{s:8:"comments";s:1:"1";}s:8:"comments";s:69:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/comments/17.aspx";s:3:"wfw";a:1:{s:10:"commentrss";s:78:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/commentrss.aspx?PostID=17";}s:11:"description";s:6096:"<P>ArcEngine is a new product from ESRI that allows developers to embed the core of ArcObjects into their own desktop applications. In the past, you could accomplish the same thing if ArcGIS was already installed on the target machine. The obvious downside is the need for your client to purchase individual ArcMap seats. With ArcEngine, you can distribute just the core engine along with your product (or have your client install the AE runtime) and benefit from the reduced cost when compared to a full blown ArcGIS seat.</P>
<P>Out of the box functionality in the ArcEngine SDK includes some very helpful controls that developers can use to build standalone GIS applications. These include a MapControl, a PageLayoutControl, a TOC (Table of Contents) and a Toolbar control that buddies with the MapControl to provide a UI for the ITools of the map. Traditionally, developer based components like MapObjects only shipped with the Map control so ESRI has stepped up what it is offering, which is great news. </P>
<P>One of the basic tenets of AE is that it only exposes the underlying components of ArcGIS (Display, Carto, Geometry, Output etc.) and not the user interface that is employed by ArcMap. Granted, the controls mentioned above fall into the UI category, however they are considered by most to be core elements and necessary for most standalone GIS applications. The TOC and toolbar are new additions so it will be interesting to see what ESRI provides in future releases.</P>
<P>So all is good, you get industrial strength components at a reasonable price. Simple, targeted applications usually run just fine with what comes out of the box.&nbsp; However, medium to complex applications may need to provide UI access to the underlying components. In these cases, it makes the most sense to mimic the existing ArcMap dialogs (DisplayUI, CartoUI, OutputUI etc.) so that users who are already familiar with ArcMap don’t need to be retrained. </P>
<P>In Q305, we are porting a large MapObjects application over to ArcEngine and many of these UI components will be necessary. As of today, it does not look like ArcEngine will include any of the Dialogs or IPropertyPages that make up the bulk of the UI in ArcMap. Additionally, I was not able to find any 3rd party developers building replacements for use in ArcEngine. Which only leaves one real option, that is, recode the UI pieces ourselves (which I really hate to do, since there are perfectly good ones in the **UI binaries). Reinventing the wheel is rarely a good idea but in this case, I really can’t see how to provide the functionality we want without doing so, especially given the pockets of ArcMap experts within our client/user organizations. Building new dialogs with similar functionality but a different layout&nbsp;would most likely confuse everyone, cloning the existing ones seems like the most logical choice.</P>
<P>In developing our spec for the Q3 release (and I use the term “spec” very lightly here, we are a small shop), we identified the initial UI elements we would need for ArcEngine. The majority of them are in DisplayUI but there are others in CartoUI, OutputUI and Framework. So to get an “order of magnitude” for the project, I started with the DisplayUI dialogs and property pages. Here is the SymbolSelector implemented in .Net:</P><IMG src="/SDL/Public/Images/SymbolSelector.png"></IMG> 
<P>To make transitioning from existing AO code easier, I decided to keep the interfaces identical to those in the real binaries. For instance, the code below will open the AEDisplayUI ColorPalette simply by switching the using statement at the top of your codepage from ESRI.ArcGIS.DisplayUI to SDL.ArcEngine.DisplayUI. </P>
<P><BR><CODE>&nbsp;using SDL.ArcEngine.DisplayUI;</CODE></P>
<P><CODE><BR>&nbsp;IColorPalette cp = new ColorPalette();<BR>&nbsp;Rectangle rect = this.RectangleToScreen(cmdColor.Bounds);<BR>&nbsp;tagRECT r = new tagRECT();<BR>&nbsp;r.left = rect.Left;<BR>&nbsp;r.top = rect.Top;<BR>&nbsp;r.right = rect.Right;<BR>&nbsp;r.bottom = rect.Bottom;</CODE></P>
<P><CODE>&nbsp;if (cp.TrackPopupMenu(ref r, _Color, false, this.Handle.ToInt32())) <BR>&nbsp;{<BR>&nbsp;&nbsp;_Color = cp.Color;<BR>&nbsp;&nbsp;picColor.Invalidate();<BR>&nbsp;}</CODE></P><IMG src="/SDL/Public/Images/ColorPalette.png"></IMG> 
<P>Here’s some other implementations so far:</P>
<P><a href="http://www.spatialdatalogic.com/sdl/public/images/SymbolSelector2.png">SymbolSelector</A></P>
<P><a href="http://www.spatialdatalogic.com/sdl/public/images/ColorSelector.png">ColorSelector</A></P>
<P><BR>Difficulties thus far:<BR>1) ServerStyleGallery – I swear there are gremlins in this class. I’ll need to get to the bottom of the random crashes since the style gallery powers much of DisplayUI. (SP2 did not help)</P>
<P>2) IPropertyPage / IPropertyPageSite / ISpecifyPropertyPage – Simply put, .Net does not support them at all and in general, ArcObjects makes massive use of this pattern. Wiring up a suitable implementation is possible but we really don’t have custom PropertyPages and since the very PropertyPages we want are not installed by ArcEngine, adding support for them would only help in 3rd party and custom implementations. I suppose this will come in to play more with CartoUI but for now, I’ll be implementing each relevant page as a UserControl. The main interface will be the same, how it is sited on the hWnd will be different.</P>
<P>&nbsp;</P>
<P>Going forward I will report back on the progress of the project. I suspect I’ll run into many pitfalls but all in all, it’s a very doable task…just tedious. If it’s successful, we may package the whole thing up as a commercial product that would include the full source code. If anyone is interested, feel free to contact me directly using the link at the top of the page.</P>
<P><BR>HTH<BR>Listening To: <A href="http://music.msn.com/album/?album=10343079">Built to Spill – Carry the Zero – Keep It Like a Secret</A><BR></P></CODE><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=17" width="1" height="1">";s:7:"summary";s:6096:"<P>ArcEngine is a new product from ESRI that allows developers to embed the core of ArcObjects into their own desktop applications. In the past, you could accomplish the same thing if ArcGIS was already installed on the target machine. The obvious downside is the need for your client to purchase individual ArcMap seats. With ArcEngine, you can distribute just the core engine along with your product (or have your client install the AE runtime) and benefit from the reduced cost when compared to a full blown ArcGIS seat.</P>
<P>Out of the box functionality in the ArcEngine SDK includes some very helpful controls that developers can use to build standalone GIS applications. These include a MapControl, a PageLayoutControl, a TOC (Table of Contents) and a Toolbar control that buddies with the MapControl to provide a UI for the ITools of the map. Traditionally, developer based components like MapObjects only shipped with the Map control so ESRI has stepped up what it is offering, which is great news. </P>
<P>One of the basic tenets of AE is that it only exposes the underlying components of ArcGIS (Display, Carto, Geometry, Output etc.) and not the user interface that is employed by ArcMap. Granted, the controls mentioned above fall into the UI category, however they are considered by most to be core elements and necessary for most standalone GIS applications. The TOC and toolbar are new additions so it will be interesting to see what ESRI provides in future releases.</P>
<P>So all is good, you get industrial strength components at a reasonable price. Simple, targeted applications usually run just fine with what comes out of the box.&nbsp; However, medium to complex applications may need to provide UI access to the underlying components. In these cases, it makes the most sense to mimic the existing ArcMap dialogs (DisplayUI, CartoUI, OutputUI etc.) so that users who are already familiar with ArcMap don’t need to be retrained. </P>
<P>In Q305, we are porting a large MapObjects application over to ArcEngine and many of these UI components will be necessary. As of today, it does not look like ArcEngine will include any of the Dialogs or IPropertyPages that make up the bulk of the UI in ArcMap. Additionally, I was not able to find any 3rd party developers building replacements for use in ArcEngine. Which only leaves one real option, that is, recode the UI pieces ourselves (which I really hate to do, since there are perfectly good ones in the **UI binaries). Reinventing the wheel is rarely a good idea but in this case, I really can’t see how to provide the functionality we want without doing so, especially given the pockets of ArcMap experts within our client/user organizations. Building new dialogs with similar functionality but a different layout&nbsp;would most likely confuse everyone, cloning the existing ones seems like the most logical choice.</P>
<P>In developing our spec for the Q3 release (and I use the term “spec” very lightly here, we are a small shop), we identified the initial UI elements we would need for ArcEngine. The majority of them are in DisplayUI but there are others in CartoUI, OutputUI and Framework. So to get an “order of magnitude” for the project, I started with the DisplayUI dialogs and property pages. Here is the SymbolSelector implemented in .Net:</P><IMG src="/SDL/Public/Images/SymbolSelector.png"></IMG> 
<P>To make transitioning from existing AO code easier, I decided to keep the interfaces identical to those in the real binaries. For instance, the code below will open the AEDisplayUI ColorPalette simply by switching the using statement at the top of your codepage from ESRI.ArcGIS.DisplayUI to SDL.ArcEngine.DisplayUI. </P>
<P><BR><CODE>&nbsp;using SDL.ArcEngine.DisplayUI;</CODE></P>
<P><CODE><BR>&nbsp;IColorPalette cp = new ColorPalette();<BR>&nbsp;Rectangle rect = this.RectangleToScreen(cmdColor.Bounds);<BR>&nbsp;tagRECT r = new tagRECT();<BR>&nbsp;r.left = rect.Left;<BR>&nbsp;r.top = rect.Top;<BR>&nbsp;r.right = rect.Right;<BR>&nbsp;r.bottom = rect.Bottom;</CODE></P>
<P><CODE>&nbsp;if (cp.TrackPopupMenu(ref r, _Color, false, this.Handle.ToInt32())) <BR>&nbsp;{<BR>&nbsp;&nbsp;_Color = cp.Color;<BR>&nbsp;&nbsp;picColor.Invalidate();<BR>&nbsp;}</CODE></P><IMG src="/SDL/Public/Images/ColorPalette.png"></IMG> 
<P>Here’s some other implementations so far:</P>
<P><a href="http://www.spatialdatalogic.com/sdl/public/images/SymbolSelector2.png">SymbolSelector</A></P>
<P><a href="http://www.spatialdatalogic.com/sdl/public/images/ColorSelector.png">ColorSelector</A></P>
<P><BR>Difficulties thus far:<BR>1) ServerStyleGallery – I swear there are gremlins in this class. I’ll need to get to the bottom of the random crashes since the style gallery powers much of DisplayUI. (SP2 did not help)</P>
<P>2) IPropertyPage / IPropertyPageSite / ISpecifyPropertyPage – Simply put, .Net does not support them at all and in general, ArcObjects makes massive use of this pattern. Wiring up a suitable implementation is possible but we really don’t have custom PropertyPages and since the very PropertyPages we want are not installed by ArcEngine, adding support for them would only help in 3rd party and custom implementations. I suppose this will come in to play more with CartoUI but for now, I’ll be implementing each relevant page as a UserControl. The main interface will be the same, how it is sited on the hWnd will be different.</P>
<P>&nbsp;</P>
<P>Going forward I will report back on the progress of the project. I suspect I’ll run into many pitfalls but all in all, it’s a very doable task…just tedious. If it’s successful, we may package the whole thing up as a commercial product that would include the full source code. If anyone is interested, feel free to contact me directly using the link at the top of the page.</P>
<P><BR>HTH<BR>Listening To: <A href="http://music.msn.com/album/?album=10343079">Built to Spill – Carry the Zero – Keep It Like a Secret</A><BR></P></CODE><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=17" width="1" height="1">";}i:3;a:10:{s:5:"title";s:34:"Google Maps and Craigslist Housing";s:4:"link";s:79:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/archive/2005/04/12/16.aspx";s:7:"pubdate";s:29:"Tue, 12 Apr 2005 17:33:00 GMT";s:4:"guid";s:39:"53332bb2-7758-437e-86ab-e8e36e8e971d:16";s:2:"dc";a:1:{s:7:"creator";s:5:"admin";}s:5:"slash";a:1:{s:8:"comments";s:1:"0";}s:8:"comments";s:69:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/comments/16.aspx";s:3:"wfw";a:1:{s:10:"commentrss";s:78:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/commentrss.aspx?PostID=16";}s:11:"description";s:437:"<P>this is really cool: <A href="http://www.paulrademacher.com/housing/">http://www.paulrademacher.com/housing/</A></P>
<P>I really like how they altered the balloon tips to include the house photos.</P>
<P>&nbsp;</P>
<P>Listening to: <A href="http://music.msn.com/album/?album=29444983">Muse - Absolution - Stockholm Syndrome</A></P>
<P>&nbsp;</P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=16" width="1" height="1">";s:7:"summary";s:437:"<P>this is really cool: <A href="http://www.paulrademacher.com/housing/">http://www.paulrademacher.com/housing/</A></P>
<P>I really like how they altered the balloon tips to include the house photos.</P>
<P>&nbsp;</P>
<P>Listening to: <A href="http://music.msn.com/album/?album=29444983">Muse - Absolution - Stockholm Syndrome</A></P>
<P>&nbsp;</P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=16" width="1" height="1">";}i:4;a:10:{s:5:"title";s:16:"Off to O'Connors";s:4:"link";s:79:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/archive/2005/03/17/14.aspx";s:7:"pubdate";s:29:"Thu, 17 Mar 2005 19:54:00 GMT";s:4:"guid";s:39:"53332bb2-7758-437e-86ab-e8e36e8e971d:14";s:2:"dc";a:1:{s:7:"creator";s:5:"admin";}s:5:"slash";a:1:{s:8:"comments";s:1:"0";}s:8:"comments";s:69:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/comments/14.aspx";s:3:"wfw";a:1:{s:10:"commentrss";s:78:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/commentrss.aspx?PostID=14";}s:11:"description";s:322:"<P><IMG src="/SDL/Public/Images/guiness_pint_sm.jpg"></IMG> </P>
<P>Happy St. Patrick's Day! </P>
<P>Listening to: <A href="http://music.msn.com/artist/?artist=16074588">The Pogues - Blue Heaven - Peace and Love</A></P>
<P>&nbsp;</P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=14" width="1" height="1">";s:7:"summary";s:322:"<P><IMG src="/SDL/Public/Images/guiness_pint_sm.jpg"></IMG> </P>
<P>Happy St. Patrick's Day! </P>
<P>Listening to: <A href="http://music.msn.com/artist/?artist=16074588">The Pogues - Blue Heaven - Peace and Love</A></P>
<P>&nbsp;</P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=14" width="1" height="1">";}i:5;a:10:{s:5:"title";s:33:"ArcGIS Server In-Process Redirect";s:4:"link";s:79:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/archive/2005/03/02/13.aspx";s:7:"pubdate";s:29:"Thu, 03 Mar 2005 01:49:00 GMT";s:4:"guid";s:39:"53332bb2-7758-437e-86ab-e8e36e8e971d:13";s:2:"dc";a:1:{s:7:"creator";s:5:"admin";}s:5:"slash";a:1:{s:8:"comments";s:1:"0";}s:8:"comments";s:69:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/comments/13.aspx";s:3:"wfw";a:1:{s:10:"commentrss";s:78:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/commentrss.aspx?PostID=13";}s:11:"description";s:10635:"<P><IMG src="/SDL/Public/Images/nyc_sm.jpg"></IMG> </P>
<P>When programming ArcGIS Server, there are two methods for interacting with the IServerObject objects inside the container processes (SOCs). The traditional way is to request proxies from the IServerContext object that point to the real objects running inside the SOC. At the very least, all subsequent calls through the proxies are cross process and more likely in larger setups, cross machine as well. The second method is to use IServerContext.CreateObject to spawn a COM object directly in the SOC process. Usually, a coarse grain call would then kick off some lengthy operation that executes in-process with the IServerObject in the SOC. For performance reasons, the second method is preferable when many fine grain calls are required (e.g. iterate a feature cursor) since the marshalling penalty can be quite expensive in many situations.</P>
<P>In practice, both ease of development and performance concerns are covered using one of these two methods, giving the developer choice and flexibility. However, I always wished there was an intermediate&nbsp;technique that merged the best of both methods. I wanted a way to write code directly in an ASPX or ASMX page and interact with the IServerObject (and all of the ancillary ArcObjects classes) without the need for the proxies. Easier said then done but drawing from experience gained in redirecting Remoting calls at the sink level, the lack of in-process execution always left me wanting more from the AGS subsystem. So, after a brief discussion at the BPC, I decided to put together a working model that attempts to accomplish these goals.</P>
<P>How can we actually do both? Clearly we cannot bring the SOC objects to our code running in IIS, so the only answer is to move our code to the SOC process and execute it there. This is essentially what the second method does except the code must be self contained COM objects and worse off, the binary that holds the class is locked until the SOC is restarted. This is akin to classic ASP in that COM objects were locked until IIS was stopped. This was problematic enough that MS redesigned the loading process in ASP.NET, using intermediate binaries instead of those dropped in the “bin” folder by a developer [1]. This allows for on-the-fly recompiles of all your code, a very handy feature during development (and even during production where business rules are in constant flux)</P>
<P>Using how ASP.NET deals with local code as a model, we can build a subsystem on top of AGS that forwards the code at runtime to the SOCs. We then need to invoke the proper method in the SOC with the appropriate call properties (e.g. call context) initiated in ASP.NET. This includes input parameters, results, debug/trace statements and potential exceptions. All of this is possible, the real tricky part is the efficient packing of a holder object in the SOC to both instanciate and execute the proper method. For performance reasons, this packing and creation of the in-memory assemblies should only happen once per SOC (per ASPNET compile lifetime), even when new IServerContexts are created on the fly and are meant to be both distinct and short-lived in nature. </P>
<P><BR>Here is code similar to that found in the ArcGIS Server Admin Guide (Chapter 4)</P>
<P><CODE>&nbsp;&nbsp;[WebMethod]<BR>&nbsp;&nbsp;public string TestWithProxy()<BR>&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;string result = " ?;<BR>&nbsp;&nbsp;&nbsp;IServerConnection sc = new ServerConnectionClass();<BR>&nbsp;&nbsp;&nbsp;sc.Connect(@"localhost");<BR>&nbsp;&nbsp;&nbsp;IServerObjectManager som = sc.ServerObjectManager;<BR>&nbsp;&nbsp;&nbsp;IServerContext ctx = som.CreateServerContext("Test", "MapServer");<BR>&nbsp;&nbsp;&nbsp;</P>
<P>&nbsp;&nbsp;&nbsp;int start = Environment.TickCount;<BR>&nbsp;&nbsp;&nbsp;IMapServer map = ctx.ServerObject as IMapServer;<BR>&nbsp;&nbsp;&nbsp;IMapServerObjects mapobj = map as IMapServerObjects;<BR>&nbsp;&nbsp;&nbsp;IMap fgmap = mapobj.get_Map("Layers");</P>
<P>&nbsp;&nbsp;&nbsp;IFeatureLayer flyr = fgmap.get_Layer(0) as IFeatureLayer;<BR>&nbsp;&nbsp;&nbsp;IFeatureClass fc = flyr.FeatureClass;</P>
<P>&nbsp;&nbsp;&nbsp;// create the query using the current extent of the map<BR>&nbsp;&nbsp;&nbsp;ISpatialFilter sf = ctx.CreateObject("esriGeoDatabase.SpatialFilter")<BR>&nbsp;&nbsp;&nbsp;&nbsp;as ISpatialFilter;<BR>&nbsp;&nbsp;&nbsp;sf.SpatialRel = esriSpatialRelEnum.esriSpatialRelIntersects;<BR>&nbsp;&nbsp;&nbsp;sf.GeometryField = fc.ShapeFieldName;<BR>&nbsp;&nbsp;&nbsp;sf.Geometry = null;<BR>&nbsp;&nbsp;&nbsp;// execute the query and loop through the results<BR>&nbsp;&nbsp;&nbsp;IFeature f;<BR>&nbsp;&nbsp;&nbsp;IArea area;<BR>&nbsp;&nbsp;&nbsp;double dTotalArea = 0.0;<BR>&nbsp;&nbsp;&nbsp;IFeatureCursor fcursor = fc.Search(sf,true);<BR>&nbsp;&nbsp;&nbsp;while ((f = fcursor.NextFeature()) != null)<BR>&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;area = f.Shape as IArea;<BR>&nbsp;&nbsp;&nbsp;&nbsp;dTotalArea += area.Area;<BR>&nbsp;&nbsp;&nbsp;}</P>
<P>&nbsp;&nbsp;&nbsp;ctx.ReleaseContext();</P>
<P><BR>&nbsp;&nbsp;&nbsp;int end = Environment.TickCount;<BR>&nbsp;&nbsp;&nbsp;result = "Area: " + dTotalArea + " " + (end - start) + " ms";<BR>&nbsp;&nbsp;&nbsp;return result;<BR>&nbsp;&nbsp;}</CODE></P>
<P>&nbsp;</P>
<P>This is the same code using&nbsp;a second&nbsp;method body that is redirected into the container. The second method "RemoteTest" is actually executed in the SOC process pointed to by the IServerContext. The AGSRedirect.Current.Invoke() call handles the details of packing and invoking the method body in the remote process. Debug statements are returned and exceptions rethrown (if necessary)&nbsp;in the calling process (IIS/ASPNET)</P>
<P><CODE>&nbsp;&nbsp;[WebMethod]<BR>&nbsp;&nbsp;public string TestWithRedirect()<BR>&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;IServerConnection sc = new ServerConnectionClass();<BR>&nbsp;&nbsp;&nbsp;sc.Connect(@"localhost");<BR>&nbsp;&nbsp;&nbsp;IServerObjectManager som = sc.ServerObjectManager;<BR>&nbsp;&nbsp;&nbsp;IServerContext ctx = som.CreateServerContext("Test", "MapServer");</P>
<P>&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;RemoteTestDelegate dlg = new RemoteTestDelegate(RemoteTest);<BR>&nbsp;&nbsp;&nbsp;object res = AGSRedirect.Current.Invoke(ctx, dlg, ctx);&nbsp;</P>
<P>&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;ctx.ReleaseContext();</P>
<P>&nbsp;&nbsp;&nbsp;return res.ToString();</P>
<P>&nbsp;&nbsp;}</P>
<P>&nbsp;&nbsp;private delegate string RemoteTestDelegate(IServerContext ctx);<BR>&nbsp;&nbsp;public string RemoteTest(ESRI.ArcGIS.Server.IServerContext ctx)<BR>&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;int start = Environment.TickCount;<BR>&nbsp;&nbsp;&nbsp;IServerObject so = ctx.ServerObject;<BR>&nbsp;&nbsp;&nbsp;IMapServer ms = so as IMapServer;<BR>&nbsp;&nbsp;&nbsp;IMapServer map = ctx.ServerObject as IMapServer;<BR>&nbsp;&nbsp;&nbsp;IMapServerObjects mapobj = map as IMapServerObjects;<BR>&nbsp;&nbsp;&nbsp;IMap fgmap = mapobj.get_Map("Layers");</P>
<P>&nbsp;&nbsp;&nbsp;IFeatureLayer flyr = fgmap.get_Layer(0) as IFeatureLayer;<BR>&nbsp;&nbsp;&nbsp;IFeatureClass fc = flyr.FeatureClass;</P>
<P>&nbsp;&nbsp;&nbsp;// create the query using the current extent of the map<BR>&nbsp;&nbsp;&nbsp;ISpatialFilter sf = new SpatialFilterClass();<BR>&nbsp;&nbsp;&nbsp;sf.SpatialRel = esriSpatialRelEnum.esriSpatialRelIntersects;<BR>&nbsp;&nbsp;&nbsp;sf.GeometryField = fc.ShapeFieldName;<BR>&nbsp;&nbsp;&nbsp;sf.Geometry = null;<BR>&nbsp;&nbsp;&nbsp;// execute the query and loop through the results<BR>&nbsp;&nbsp;&nbsp;IFeature f;<BR>&nbsp;&nbsp;&nbsp;IArea area;<BR>&nbsp;&nbsp;&nbsp;double dTotalArea = 0.0;<BR>&nbsp;&nbsp;&nbsp;IFeatureCursor fcursor = fc.Search(sf,true);<BR>&nbsp;&nbsp;&nbsp;while ((f = fcursor.NextFeature()) != null)<BR>&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;area = f.Shape as IArea;<BR>&nbsp;&nbsp;&nbsp;&nbsp;dTotalArea += area.Area;<BR>&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;int end = Environment.TickCount;<BR>&nbsp;&nbsp;&nbsp;return "Area: " + dTotalArea + " " + (end - start) + " ms";&nbsp;&nbsp;&nbsp;</P>
<P>&nbsp;&nbsp;}</P>
<P></CODE><BR>Here are&nbsp;the rough results (single machine for IIS and SOCs, cross machine calls will undoubtedly add time to the proxy calls)</P>
<P>#Features&nbsp;&nbsp;&nbsp;&nbsp;Proxies&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Redirect<BR>15&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;220ms&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;160ms<BR>2600&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.2sec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.5sec<BR>200K&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;212sec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;102sec</P>
<P><BR>Benefits:<BR>-&nbsp;Ease of development, write code directly in your ASPX or ASMX codepage<BR>-&nbsp;Recompile on the fly, no locking files in the SOCs<BR>-&nbsp;Use the same syntax as Desktop development (e.g. the familiar ‘new’ keyword for object creation etc.)<BR>-&nbsp;Performance – your code executes in the same process/same thread as the IServerObject. Depending on your code’s functionality and the size of your dataset, this is either trivial or enormous</P>
<P>Requirements:<BR>-&nbsp;Works with .Net code only (although something similar could be done for Java)<BR>-&nbsp;AGSIPR must be installed on calling machines (usually the web servers) and on all of the SOCs. </P>
<P>Future considerations:<BR>-&nbsp;Packing of all SOCs at startup instead of during the initial call<BR>-&nbsp;Dependency packing for more complex code<BR>-&nbsp;Better debugging and tracing<BR>-&nbsp;Auto-wiring of the IServerContext/IServerObject within a redirected call’s scope. Right now it needs to be passed as a parameter (if it’s necessary in your code).<BR>-&nbsp;The .Net 2.0 Anonymous Methods syntax would be both cool and useful in this scenario</P>
<P>So, AGSIPR is not a replacement&nbsp;for traditional methods of interacting with ArcGIS Server, its merely an extra tool in the programming toolbox to help in certain situations. </P>
<P><a href="http://www.spatialdatalogic.com/sdl/Public/Downloads/AGSIPRSetup.zip">Download AGSIPR Beta</A></P>
<P><BR>[1] – granted this only works for .Net assemblies and not COM ones but the stigma of locked files was enough for them to devise both an intermediary file for on-the-fly compiles and a shadow load system for precompiled ones. <BR></P>
<P>HTH<BR>Listening to: <A href="http://music.msn.com/album/?album=10636039">Snow Patrol - Run</A></P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=13" width="1" height="1">";s:7:"summary";s:10635:"<P><IMG src="/SDL/Public/Images/nyc_sm.jpg"></IMG> </P>
<P>When programming ArcGIS Server, there are two methods for interacting with the IServerObject objects inside the container processes (SOCs). The traditional way is to request proxies from the IServerContext object that point to the real objects running inside the SOC. At the very least, all subsequent calls through the proxies are cross process and more likely in larger setups, cross machine as well. The second method is to use IServerContext.CreateObject to spawn a COM object directly in the SOC process. Usually, a coarse grain call would then kick off some lengthy operation that executes in-process with the IServerObject in the SOC. For performance reasons, the second method is preferable when many fine grain calls are required (e.g. iterate a feature cursor) since the marshalling penalty can be quite expensive in many situations.</P>
<P>In practice, both ease of development and performance concerns are covered using one of these two methods, giving the developer choice and flexibility. However, I always wished there was an intermediate&nbsp;technique that merged the best of both methods. I wanted a way to write code directly in an ASPX or ASMX page and interact with the IServerObject (and all of the ancillary ArcObjects classes) without the need for the proxies. Easier said then done but drawing from experience gained in redirecting Remoting calls at the sink level, the lack of in-process execution always left me wanting more from the AGS subsystem. So, after a brief discussion at the BPC, I decided to put together a working model that attempts to accomplish these goals.</P>
<P>How can we actually do both? Clearly we cannot bring the SOC objects to our code running in IIS, so the only answer is to move our code to the SOC process and execute it there. This is essentially what the second method does except the code must be self contained COM objects and worse off, the binary that holds the class is locked until the SOC is restarted. This is akin to classic ASP in that COM objects were locked until IIS was stopped. This was problematic enough that MS redesigned the loading process in ASP.NET, using intermediate binaries instead of those dropped in the “bin” folder by a developer [1]. This allows for on-the-fly recompiles of all your code, a very handy feature during development (and even during production where business rules are in constant flux)</P>
<P>Using how ASP.NET deals with local code as a model, we can build a subsystem on top of AGS that forwards the code at runtime to the SOCs. We then need to invoke the proper method in the SOC with the appropriate call properties (e.g. call context) initiated in ASP.NET. This includes input parameters, results, debug/trace statements and potential exceptions. All of this is possible, the real tricky part is the efficient packing of a holder object in the SOC to both instanciate and execute the proper method. For performance reasons, this packing and creation of the in-memory assemblies should only happen once per SOC (per ASPNET compile lifetime), even when new IServerContexts are created on the fly and are meant to be both distinct and short-lived in nature. </P>
<P><BR>Here is code similar to that found in the ArcGIS Server Admin Guide (Chapter 4)</P>
<P><CODE>&nbsp;&nbsp;[WebMethod]<BR>&nbsp;&nbsp;public string TestWithProxy()<BR>&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;string result = " ?;<BR>&nbsp;&nbsp;&nbsp;IServerConnection sc = new ServerConnectionClass();<BR>&nbsp;&nbsp;&nbsp;sc.Connect(@"localhost");<BR>&nbsp;&nbsp;&nbsp;IServerObjectManager som = sc.ServerObjectManager;<BR>&nbsp;&nbsp;&nbsp;IServerContext ctx = som.CreateServerContext("Test", "MapServer");<BR>&nbsp;&nbsp;&nbsp;</P>
<P>&nbsp;&nbsp;&nbsp;int start = Environment.TickCount;<BR>&nbsp;&nbsp;&nbsp;IMapServer map = ctx.ServerObject as IMapServer;<BR>&nbsp;&nbsp;&nbsp;IMapServerObjects mapobj = map as IMapServerObjects;<BR>&nbsp;&nbsp;&nbsp;IMap fgmap = mapobj.get_Map("Layers");</P>
<P>&nbsp;&nbsp;&nbsp;IFeatureLayer flyr = fgmap.get_Layer(0) as IFeatureLayer;<BR>&nbsp;&nbsp;&nbsp;IFeatureClass fc = flyr.FeatureClass;</P>
<P>&nbsp;&nbsp;&nbsp;// create the query using the current extent of the map<BR>&nbsp;&nbsp;&nbsp;ISpatialFilter sf = ctx.CreateObject("esriGeoDatabase.SpatialFilter")<BR>&nbsp;&nbsp;&nbsp;&nbsp;as ISpatialFilter;<BR>&nbsp;&nbsp;&nbsp;sf.SpatialRel = esriSpatialRelEnum.esriSpatialRelIntersects;<BR>&nbsp;&nbsp;&nbsp;sf.GeometryField = fc.ShapeFieldName;<BR>&nbsp;&nbsp;&nbsp;sf.Geometry = null;<BR>&nbsp;&nbsp;&nbsp;// execute the query and loop through the results<BR>&nbsp;&nbsp;&nbsp;IFeature f;<BR>&nbsp;&nbsp;&nbsp;IArea area;<BR>&nbsp;&nbsp;&nbsp;double dTotalArea = 0.0;<BR>&nbsp;&nbsp;&nbsp;IFeatureCursor fcursor = fc.Search(sf,true);<BR>&nbsp;&nbsp;&nbsp;while ((f = fcursor.NextFeature()) != null)<BR>&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;area = f.Shape as IArea;<BR>&nbsp;&nbsp;&nbsp;&nbsp;dTotalArea += area.Area;<BR>&nbsp;&nbsp;&nbsp;}</P>
<P>&nbsp;&nbsp;&nbsp;ctx.ReleaseContext();</P>
<P><BR>&nbsp;&nbsp;&nbsp;int end = Environment.TickCount;<BR>&nbsp;&nbsp;&nbsp;result = "Area: " + dTotalArea + " " + (end - start) + " ms";<BR>&nbsp;&nbsp;&nbsp;return result;<BR>&nbsp;&nbsp;}</CODE></P>
<P>&nbsp;</P>
<P>This is the same code using&nbsp;a second&nbsp;method body that is redirected into the container. The second method "RemoteTest" is actually executed in the SOC process pointed to by the IServerContext. The AGSRedirect.Current.Invoke() call handles the details of packing and invoking the method body in the remote process. Debug statements are returned and exceptions rethrown (if necessary)&nbsp;in the calling process (IIS/ASPNET)</P>
<P><CODE>&nbsp;&nbsp;[WebMethod]<BR>&nbsp;&nbsp;public string TestWithRedirect()<BR>&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;IServerConnection sc = new ServerConnectionClass();<BR>&nbsp;&nbsp;&nbsp;sc.Connect(@"localhost");<BR>&nbsp;&nbsp;&nbsp;IServerObjectManager som = sc.ServerObjectManager;<BR>&nbsp;&nbsp;&nbsp;IServerContext ctx = som.CreateServerContext("Test", "MapServer");</P>
<P>&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;RemoteTestDelegate dlg = new RemoteTestDelegate(RemoteTest);<BR>&nbsp;&nbsp;&nbsp;object res = AGSRedirect.Current.Invoke(ctx, dlg, ctx);&nbsp;</P>
<P>&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;ctx.ReleaseContext();</P>
<P>&nbsp;&nbsp;&nbsp;return res.ToString();</P>
<P>&nbsp;&nbsp;}</P>
<P>&nbsp;&nbsp;private delegate string RemoteTestDelegate(IServerContext ctx);<BR>&nbsp;&nbsp;public string RemoteTest(ESRI.ArcGIS.Server.IServerContext ctx)<BR>&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;int start = Environment.TickCount;<BR>&nbsp;&nbsp;&nbsp;IServerObject so = ctx.ServerObject;<BR>&nbsp;&nbsp;&nbsp;IMapServer ms = so as IMapServer;<BR>&nbsp;&nbsp;&nbsp;IMapServer map = ctx.ServerObject as IMapServer;<BR>&nbsp;&nbsp;&nbsp;IMapServerObjects mapobj = map as IMapServerObjects;<BR>&nbsp;&nbsp;&nbsp;IMap fgmap = mapobj.get_Map("Layers");</P>
<P>&nbsp;&nbsp;&nbsp;IFeatureLayer flyr = fgmap.get_Layer(0) as IFeatureLayer;<BR>&nbsp;&nbsp;&nbsp;IFeatureClass fc = flyr.FeatureClass;</P>
<P>&nbsp;&nbsp;&nbsp;// create the query using the current extent of the map<BR>&nbsp;&nbsp;&nbsp;ISpatialFilter sf = new SpatialFilterClass();<BR>&nbsp;&nbsp;&nbsp;sf.SpatialRel = esriSpatialRelEnum.esriSpatialRelIntersects;<BR>&nbsp;&nbsp;&nbsp;sf.GeometryField = fc.ShapeFieldName;<BR>&nbsp;&nbsp;&nbsp;sf.Geometry = null;<BR>&nbsp;&nbsp;&nbsp;// execute the query and loop through the results<BR>&nbsp;&nbsp;&nbsp;IFeature f;<BR>&nbsp;&nbsp;&nbsp;IArea area;<BR>&nbsp;&nbsp;&nbsp;double dTotalArea = 0.0;<BR>&nbsp;&nbsp;&nbsp;IFeatureCursor fcursor = fc.Search(sf,true);<BR>&nbsp;&nbsp;&nbsp;while ((f = fcursor.NextFeature()) != null)<BR>&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;area = f.Shape as IArea;<BR>&nbsp;&nbsp;&nbsp;&nbsp;dTotalArea += area.Area;<BR>&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;int end = Environment.TickCount;<BR>&nbsp;&nbsp;&nbsp;return "Area: " + dTotalArea + " " + (end - start) + " ms";&nbsp;&nbsp;&nbsp;</P>
<P>&nbsp;&nbsp;}</P>
<P></CODE><BR>Here are&nbsp;the rough results (single machine for IIS and SOCs, cross machine calls will undoubtedly add time to the proxy calls)</P>
<P>#Features&nbsp;&nbsp;&nbsp;&nbsp;Proxies&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Redirect<BR>15&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;220ms&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;160ms<BR>2600&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.2sec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.5sec<BR>200K&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;212sec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;102sec</P>
<P><BR>Benefits:<BR>-&nbsp;Ease of development, write code directly in your ASPX or ASMX codepage<BR>-&nbsp;Recompile on the fly, no locking files in the SOCs<BR>-&nbsp;Use the same syntax as Desktop development (e.g. the familiar ‘new’ keyword for object creation etc.)<BR>-&nbsp;Performance – your code executes in the same process/same thread as the IServerObject. Depending on your code’s functionality and the size of your dataset, this is either trivial or enormous</P>
<P>Requirements:<BR>-&nbsp;Works with .Net code only (although something similar could be done for Java)<BR>-&nbsp;AGSIPR must be installed on calling machines (usually the web servers) and on all of the SOCs. </P>
<P>Future considerations:<BR>-&nbsp;Packing of all SOCs at startup instead of during the initial call<BR>-&nbsp;Dependency packing for more complex code<BR>-&nbsp;Better debugging and tracing<BR>-&nbsp;Auto-wiring of the IServerContext/IServerObject within a redirected call’s scope. Right now it needs to be passed as a parameter (if it’s necessary in your code).<BR>-&nbsp;The .Net 2.0 Anonymous Methods syntax would be both cool and useful in this scenario</P>
<P>So, AGSIPR is not a replacement&nbsp;for traditional methods of interacting with ArcGIS Server, its merely an extra tool in the programming toolbox to help in certain situations. </P>
<P><a href="http://www.spatialdatalogic.com/sdl/Public/Downloads/AGSIPRSetup.zip">Download AGSIPR Beta</A></P>
<P><BR>[1] – granted this only works for .Net assemblies and not COM ones but the stigma of locked files was enough for them to devise both an intermediary file for on-the-fly compiles and a shadow load system for precompiled ones. <BR></P>
<P>HTH<BR>Listening to: <A href="http://music.msn.com/album/?album=10636039">Snow Patrol - Run</A></P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=13" width="1" height="1">";}i:6;a:10:{s:5:"title";s:15:"RootKitRevealer";s:4:"link";s:79:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/archive/2005/02/23/12.aspx";s:7:"pubdate";s:29:"Wed, 23 Feb 2005 18:44:00 GMT";s:4:"guid";s:39:"53332bb2-7758-437e-86ab-e8e36e8e971d:12";s:2:"dc";a:1:{s:7:"creator";s:5:"admin";}s:5:"slash";a:1:{s:8:"comments";s:1:"0";}s:8:"comments";s:69:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/comments/12.aspx";s:3:"wfw";a:1:{s:10:"commentrss";s:78:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/commentrss.aspx?PostID=12";}s:11:"description";s:2008:"<P><IMG src="/SDL/Public/Images/rain_rain_sm.jpg"></IMG> </P>
<P>Trojans and other malware are a scourge inflicting countless unsuspecting users. However, discipline and a rigorous scanning cycle can keep your machine clean and in the clear. Good anti-virus software, good anti-spyware software and well configured firewall are your best bet in combating the black hats (and their spam sending customers).</P>
<P>Enter the “stealth driver” and all previous bets are off. An entrenched <A href="http://www.rootkit.com/">root kit </A>is almost impossible to spot and ever harder to fully remove. The good kits live in Kernel Mode, silently manipulating API calls from User Mode applications querying about the file system or registry. They wedge themselves between the OS and all its running applications. In short, Norton, SpyBot, McAffee, SpySweeper and even the new MS AntiSpyware tools don’t even know they exist. The most malicious communicate with the outside world using rogue, transient websites with embedded html commands. A clean bill of health from your malware software and a firewall that only sees HTTP traffic, what more could the average computer user hope for? Unfortunately, the machine is completely rooted, giving the remote hacker ultimate control over everything. </P>
<P>A week ago, security guru <A href="http://www.schneier.com/blog/archives/2005/02/ghostbuster.html">Bruce Schneider pointed out </A>an ingenious MS Research project with a novel process for exposing a root kit. Yesterday, SysInternals released a (FREE!) <A href="http://www.sysinternals.com/ntw2k/freeware/rootkitreveal.shtml">RootKitRevealer</A> that seems to take a similar approach. Running this utility should be standard practice for any sysop out there.<BR></P>
<P>Listening To: <A href="http://music.msn.com/album/?album=10559602">Beck</A> <A href="http://music.msn.com/album/?album=10559602">- Paper Tiger</A></P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=12" width="1" height="1">";s:7:"summary";s:2008:"<P><IMG src="/SDL/Public/Images/rain_rain_sm.jpg"></IMG> </P>
<P>Trojans and other malware are a scourge inflicting countless unsuspecting users. However, discipline and a rigorous scanning cycle can keep your machine clean and in the clear. Good anti-virus software, good anti-spyware software and well configured firewall are your best bet in combating the black hats (and their spam sending customers).</P>
<P>Enter the “stealth driver” and all previous bets are off. An entrenched <A href="http://www.rootkit.com/">root kit </A>is almost impossible to spot and ever harder to fully remove. The good kits live in Kernel Mode, silently manipulating API calls from User Mode applications querying about the file system or registry. They wedge themselves between the OS and all its running applications. In short, Norton, SpyBot, McAffee, SpySweeper and even the new MS AntiSpyware tools don’t even know they exist. The most malicious communicate with the outside world using rogue, transient websites with embedded html commands. A clean bill of health from your malware software and a firewall that only sees HTTP traffic, what more could the average computer user hope for? Unfortunately, the machine is completely rooted, giving the remote hacker ultimate control over everything. </P>
<P>A week ago, security guru <A href="http://www.schneier.com/blog/archives/2005/02/ghostbuster.html">Bruce Schneider pointed out </A>an ingenious MS Research project with a novel process for exposing a root kit. Yesterday, SysInternals released a (FREE!) <A href="http://www.sysinternals.com/ntw2k/freeware/rootkitreveal.shtml">RootKitRevealer</A> that seems to take a similar approach. Running this utility should be standard practice for any sysop out there.<BR></P>
<P>Listening To: <A href="http://music.msn.com/album/?album=10559602">Beck</A> <A href="http://music.msn.com/album/?album=10559602">- Paper Tiger</A></P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=12" width="1" height="1">";}i:7;a:10:{s:5:"title";s:28:"ESRI Developer Network (EDN)";s:4:"link";s:79:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/archive/2005/02/20/11.aspx";s:7:"pubdate";s:29:"Sun, 20 Feb 2005 16:51:00 GMT";s:4:"guid";s:39:"53332bb2-7758-437e-86ab-e8e36e8e971d:11";s:2:"dc";a:1:{s:7:"creator";s:5:"admin";}s:5:"slash";a:1:{s:8:"comments";s:1:"0";}s:8:"comments";s:69:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/comments/11.aspx";s:3:"wfw";a:1:{s:10:"commentrss";s:78:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/commentrss.aspx?PostID=11";}s:11:"description";s:1906:"<P><IMG src="/SDL/Public/Images/EDN_globe-logo.gif"></IMG> </P>
<P><A href="http://edn.esri.com">ESRI Developer Network</A></P>
<P>ESRI formally launched their Developer Network this past week at the 2005 BPC in Palm Springs. Looks to be an incredible deal for anyone interested in starting an advanced GIS development project without spending enormous amounts of money up front. The program is modeled after Microsoft’s MSDN Universal and is geared towards any developer, not just ESRI Business Partners.</P>
<P>The package includes a website that will include forums, downloads, articles and developer weblogs. The forums backdoor into ESRI’s existing support forums which IMO is a good idea, the last thing we need is a second place to look for answers. </P>
<P>&nbsp;The software comes packaged in a nice binder (it’s not vaporware either, I saw it in person) that includes CDs for all of the major development products. New CDs are sent out when available, assuming you keep your annual subscription up to date. You can request as many authorization files as you need, so as a single developer that has multiple desktops/servers, you are free to put the software on all of them.</P>
<P>The included products are ArcGIS Server (all extensions), ArcIMS (no extensions, something about 3rd party royalties), ArcSDE, ArcEngine SDK and 100K credits for ArcWeb services. That’s an incredible amount of software for $1500 a year. Granted, its only for development and demos but still, many of these products were never developed for by small/medium shops specifically because their initial price tag was just too high. Overall, I think this is great move by ESRI, it’s win-win for everyone.<BR></P>
<P>Listening To: <A href="http://music.msn.com/album/?album=10457702">death cab for cutie - Photobooth</A></P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=11" width="1" height="1">";s:7:"summary";s:1906:"<P><IMG src="/SDL/Public/Images/EDN_globe-logo.gif"></IMG> </P>
<P><A href="http://edn.esri.com">ESRI Developer Network</A></P>
<P>ESRI formally launched their Developer Network this past week at the 2005 BPC in Palm Springs. Looks to be an incredible deal for anyone interested in starting an advanced GIS development project without spending enormous amounts of money up front. The program is modeled after Microsoft’s MSDN Universal and is geared towards any developer, not just ESRI Business Partners.</P>
<P>The package includes a website that will include forums, downloads, articles and developer weblogs. The forums backdoor into ESRI’s existing support forums which IMO is a good idea, the last thing we need is a second place to look for answers. </P>
<P>&nbsp;The software comes packaged in a nice binder (it’s not vaporware either, I saw it in person) that includes CDs for all of the major development products. New CDs are sent out when available, assuming you keep your annual subscription up to date. You can request as many authorization files as you need, so as a single developer that has multiple desktops/servers, you are free to put the software on all of them.</P>
<P>The included products are ArcGIS Server (all extensions), ArcIMS (no extensions, something about 3rd party royalties), ArcSDE, ArcEngine SDK and 100K credits for ArcWeb services. That’s an incredible amount of software for $1500 a year. Granted, its only for development and demos but still, many of these products were never developed for by small/medium shops specifically because their initial price tag was just too high. Overall, I think this is great move by ESRI, it’s win-win for everyone.<BR></P>
<P>Listening To: <A href="http://music.msn.com/album/?album=10457702">death cab for cutie - Photobooth</A></P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=11" width="1" height="1">";}i:8;a:10:{s:5:"title";s:19:"CommunityServer 1.0";s:4:"link";s:79:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/archive/2005/02/20/10.aspx";s:7:"pubdate";s:29:"Sun, 20 Feb 2005 16:30:00 GMT";s:4:"guid";s:39:"53332bb2-7758-437e-86ab-e8e36e8e971d:10";s:2:"dc";a:1:{s:7:"creator";s:5:"admin";}s:5:"slash";a:1:{s:8:"comments";s:1:"0";}s:8:"comments";s:69:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/comments/10.aspx";s:3:"wfw";a:1:{s:10:"commentrss";s:78:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/commentrss.aspx?PostID=10";}s:11:"description";s:728:"<P><IMG src="/SDL/Public/Images/subway_sm.jpg"></IMG> </P>
<P>Upgraded this site to CommunityServer 1.0. Pretty simple process, much easier then Beta1 to the first Release Candidate. Now using the PoinsonIvy-Air theme for the skin, I'll see if I still like it in a few days.</P>
<P>Try out CS for yourself here <A href="http://www.communityServer.org">www.communityServer.org</A></P>
<P>Listening To: <A href="http://music.msn.com/album/?album=10423498">death cab for cutie - </A><A href="http://music.msn.com/album/?album=10423498">Company Calls Epilogue<FONT></FONT></A></P>
<P><FONT><FONT face="Times New Roman"></FONT></FONT>&nbsp;</P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=10" width="1" height="1">";s:7:"summary";s:728:"<P><IMG src="/SDL/Public/Images/subway_sm.jpg"></IMG> </P>
<P>Upgraded this site to CommunityServer 1.0. Pretty simple process, much easier then Beta1 to the first Release Candidate. Now using the PoinsonIvy-Air theme for the skin, I'll see if I still like it in a few days.</P>
<P>Try out CS for yourself here <A href="http://www.communityServer.org">www.communityServer.org</A></P>
<P>Listening To: <A href="http://music.msn.com/album/?album=10423498">death cab for cutie - </A><A href="http://music.msn.com/album/?album=10423498">Company Calls Epilogue<FONT></FONT></A></P>
<P><FONT><FONT face="Times New Roman"></FONT></FONT>&nbsp;</P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=10" width="1" height="1">";}i:9;a:10:{s:5:"title";s:7:"GeoBlog";s:4:"link";s:78:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/archive/2005/02/06/9.aspx";s:7:"pubdate";s:29:"Sun, 06 Feb 2005 15:07:00 GMT";s:4:"guid";s:38:"53332bb2-7758-437e-86ab-e8e36e8e971d:9";s:2:"dc";a:1:{s:7:"creator";s:5:"admin";}s:5:"slash";a:1:{s:8:"comments";s:1:"0";}s:8:"comments";s:68:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/comments/9.aspx";s:3:"wfw";a:1:{s:10:"commentrss";s:77:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/commentrss.aspx?PostID=9";}s:11:"description";s:844:"<P><A href="http://blogs.msdn.com/cthota/">Chandu Thota</A> has updated <A href="http://blogs.msdn.com/cthota/archive/2005/02/05/367929.aspx">his cool BlogMap project.</A>&nbsp;</P>
<P>Here's my <A href="http://www.csthota.com/blogmap/blogapi.ashx?method=blogmap&amp;feed=http://www.spatialdatalogic.com/CS/blogs/brian_flood/rss.aspx&amp;height=350&amp;width=350&amp;label=Brian Flood">link</A></P>
<P><FONT><IMG alt="my blogmap" src="http://www.csthota.com/blogmap/blogapi.ashx?method=blogmap&amp;feed=http://www.spatialdatalogic.com/CS/blogs/brian_flood/rss.aspx&amp;height=350&amp;width=350&amp;label=Brian Flood"></FONT></P>
<P>HTH<BR>Listening to: <A href="http://music.msn.com/album/?album=10635553">Wilco - Spiders</A></P>
<P><FONT></FONT>&nbsp;</P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=9" width="1" height="1">";s:7:"summary";s:844:"<P><A href="http://blogs.msdn.com/cthota/">Chandu Thota</A> has updated <A href="http://blogs.msdn.com/cthota/archive/2005/02/05/367929.aspx">his cool BlogMap project.</A>&nbsp;</P>
<P>Here's my <A href="http://www.csthota.com/blogmap/blogapi.ashx?method=blogmap&amp;feed=http://www.spatialdatalogic.com/CS/blogs/brian_flood/rss.aspx&amp;height=350&amp;width=350&amp;label=Brian Flood">link</A></P>
<P><FONT><IMG alt="my blogmap" src="http://www.csthota.com/blogmap/blogapi.ashx?method=blogmap&amp;feed=http://www.spatialdatalogic.com/CS/blogs/brian_flood/rss.aspx&amp;height=350&amp;width=350&amp;label=Brian Flood"></FONT></P>
<P>HTH<BR>Listening to: <A href="http://music.msn.com/album/?album=10635553">Wilco - Spiders</A></P>
<P><FONT></FONT>&nbsp;</P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=9" width="1" height="1">";}i:10;a:10:{s:5:"title";s:27:"Background Processing Redux";s:4:"link";s:78:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/archive/2005/02/03/8.aspx";s:7:"pubdate";s:29:"Fri, 04 Feb 2005 04:28:00 GMT";s:4:"guid";s:38:"53332bb2-7758-437e-86ab-e8e36e8e971d:8";s:2:"dc";a:1:{s:7:"creator";s:5:"admin";}s:5:"slash";a:1:{s:8:"comments";s:1:"0";}s:8:"comments";s:68:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/comments/8.aspx";s:3:"wfw";a:1:{s:10:"commentrss";s:77:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/commentrss.aspx?PostID=8";}s:11:"description";s:2220:"<P><IMG src="/SDL/Public/Images/stormynight_sm.jpg"></IMG>&nbsp;</P>
<P>In the previous post on background processing in ArcMap, the example code left the responsibility of passing opaque tokens to the background worker was left up to the implementor. This was flexible but somewhat tedious when figuring out what was needed in the worker. Specifically, the example I posted showed how to re-open a FeatureClass and work directly with raw data inside it. But what if more then just the data source was needed, how can you work directly with say, an IFeatureLayer with all of it’s joins, labeling, symbology and other user manipulated properties. Shane Boucvalt contacted me about doing just that, access to the the ILayers from the worker. The workaround we came up with was to serialize the ILayer’s state by using an IGxLayer and then re-open this file inside the worker. This is a far more elegant design, it allows the&nbsp;base worker class to totally abstract away the serialize/deserialize code needed to re-open the classes and their factories. So, I reworked the BackgroundWorker base class to include all of this functionality transparently. Far more functional and a lot easier to use. </P>
<P>When creating your worker in ArcMap, simply pass your ILayer into the worker:</P>
<P><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyFeatureProcessor mfp = new MyFeatureProcessor();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mfp.AddLayer(doc.FocusMap.get_Layer(1)); //pass in your ILayer here</CODE></P>
<P>Inside your worker’s Run() method, you can reference the ILayer from the base class</P>
<P><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ILayer pLayer = this.GetLayer(0);</CODE></P>
<P>That’s it, the creation/saving/reopening of the IGxLayer is handled automatically in the base class. Also, you can pass as many ILayer as you want and then loop over them in your worker. </P>
<P><BR>new <a href="http://www.spatialdatalogic.com/sdl/Public/Downloads/BackgroundWorker2.zip">BackgroundWorker code</A></P>
<P></P>
<P>HTH<BR>Listening to: <A href="http://music.msn.com/album/?album=10020502">The Stone Roses - Fools Gold</A></P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=8" width="1" height="1">";s:7:"summary";s:2220:"<P><IMG src="/SDL/Public/Images/stormynight_sm.jpg"></IMG>&nbsp;</P>
<P>In the previous post on background processing in ArcMap, the example code left the responsibility of passing opaque tokens to the background worker was left up to the implementor. This was flexible but somewhat tedious when figuring out what was needed in the worker. Specifically, the example I posted showed how to re-open a FeatureClass and work directly with raw data inside it. But what if more then just the data source was needed, how can you work directly with say, an IFeatureLayer with all of it’s joins, labeling, symbology and other user manipulated properties. Shane Boucvalt contacted me about doing just that, access to the the ILayers from the worker. The workaround we came up with was to serialize the ILayer’s state by using an IGxLayer and then re-open this file inside the worker. This is a far more elegant design, it allows the&nbsp;base worker class to totally abstract away the serialize/deserialize code needed to re-open the classes and their factories. So, I reworked the BackgroundWorker base class to include all of this functionality transparently. Far more functional and a lot easier to use. </P>
<P>When creating your worker in ArcMap, simply pass your ILayer into the worker:</P>
<P><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyFeatureProcessor mfp = new MyFeatureProcessor();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mfp.AddLayer(doc.FocusMap.get_Layer(1)); //pass in your ILayer here</CODE></P>
<P>Inside your worker’s Run() method, you can reference the ILayer from the base class</P>
<P><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ILayer pLayer = this.GetLayer(0);</CODE></P>
<P>That’s it, the creation/saving/reopening of the IGxLayer is handled automatically in the base class. Also, you can pass as many ILayer as you want and then loop over them in your worker. </P>
<P><BR>new <a href="http://www.spatialdatalogic.com/sdl/Public/Downloads/BackgroundWorker2.zip">BackgroundWorker code</A></P>
<P></P>
<P>HTH<BR>Listening to: <A href="http://music.msn.com/album/?album=10020502">The Stone Roses - Fools Gold</A></P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=8" width="1" height="1">";}i:11;a:10:{s:5:"title";s:31:"Background Processing in ArcMap";s:4:"link";s:78:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/archive/2004/12/17/7.aspx";s:7:"pubdate";s:29:"Fri, 17 Dec 2004 22:25:00 GMT";s:4:"guid";s:38:"53332bb2-7758-437e-86ab-e8e36e8e971d:7";s:2:"dc";a:1:{s:7:"creator";s:5:"admin";}s:5:"slash";a:1:{s:8:"comments";s:1:"0";}s:8:"comments";s:68:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/comments/7.aspx";s:3:"wfw";a:1:{s:10:"commentrss";s:77:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/commentrss.aspx?PostID=7";}s:11:"description";s:10794:"<P><IMG src="/SDL/Public/Images/sunlight_sm.jpg"></IMG>&nbsp;<BR>I’ve seen several posts on the <A href="http://forums.esri.com/forums.asp?c=93">ESRI support forums</A> regarding ArcMap (and ArcObjects in general) not using the total processing power of user’s workstations, particularly when multiple paths of execution are possible (SMP, hyper-threading or the soon to be available dual/multi-core CPUs). The issue at hand is that ArcObjects is fundamentally a single threaded design, nearly all of the underlying classes and all of the most compelling ones, are marked apartment threaded (STA) in the registry. By default, they are all going to run on the main UI thread that is powering everything else in the application. Most times this is the correct design however there are many other instances where some long running process would be better suited on a background thread, periodically passing progress, errors and completion back to the main thread. An end user can continue working with the main UI while geoprocessing, custom code or printing is executing concurrently in the background. </P>
<P>There is a <A href="http://www.gotw.ca/publications/concurrency-ddj.htm">good article by Herb Sutter </A>that postulates that the age of “faster CPUs equates to faster applications” is done and gone, any gains going into the future will be based on concurrent programming models. </P>
<P>“Starting today, the performance lunch isn’t free any more. Sure, there will continue to be generally applicable performance gains that everyone can pick up, thanks mainly to cache size improvements. But if you want your application to benefit from the continued exponential throughput advances in new processors, it will need to be a well-written concurrent (usually multithreaded) application. And that’s easier said than done, because not all problems are inherently parallelizable and because concurrent programming is hard.”</P>
<P>From an ArcMap perspective, use of background threads may be single best way in the future to increase overall performance of your application. Easier said then done, but a trend that cannot be ignored, especially with the ever growing size of geospatial data being collected and analyzed today.<BR></P>
<P>&nbsp;</P>
<P>Since the release of 9.0, you can safely start up background threads and run code against the singleton objects that caused problems in the 8.x codebase. By moving the singletons to per thread as opposed to per process, we can now efficiently spin up something like a IWorkspaceFactory object and then access the feature classes that are spawned from it. In 8.x, this would not have been possible because the factory object would have been pinned to the primary UI thread. Thankfully, this is not an issue anymore. </P>
<P>Given the change above, the key now is re-starting these factory singletons on your worker thread and then accessing the feature classes and layers from the new factories. This is critical, everything will eventually fail/deadlock if you attempt to pass interface pointers from the main thread to your worker thread. You must restart these objects on your worker thread so you can safely (and efficiently!) access their methods/properties and all of the objects that spawn from them. This makes it a little tedious when designing your workers but through some formalized patterns and helper methods, it should be pretty painless moving forward. Below is a sample BackgroundWorker class that can be used as a starting point for designing your own workers. </P>
<P>The <a href="http://www.spatialdatalogic.com/sdl/Public/Downloads/BackgroundWorker.zip">BackgroundWorker class </A>handles the creation and lifetime of the thread and more importantly, the dispatching of events (Progress, Cancelled, Completed, Error) to the main UI thread. A class that derives from BackgroundWorker only has to override the Run virtual method and periodically pump progress messages. Here is a sample worker that iterates a Feature class and total area, you would presumably do something a little more interesting.</P>
<P><code>&nbsp;public class MyFeatureProcessor:BackgroundWorker<BR>&nbsp;{<BR>&nbsp;&nbsp;<BR>&nbsp;&nbsp;private string _WorkspaceProgID;<BR>&nbsp;&nbsp;private IPropertySet _PS;<BR>&nbsp;&nbsp;private string _FeatureClassName;<BR>&nbsp;</P>
<P><BR>&nbsp;&nbsp;//================<BR>&nbsp;&nbsp;//ctor<BR>&nbsp;&nbsp;public MyFeatureProcessor(<BR>&nbsp;&nbsp;&nbsp;string WorkspaceProgID, <BR>&nbsp;&nbsp;&nbsp;IPropertySet ps, <BR>&nbsp;&nbsp;&nbsp;string featureClassName)<BR>&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;_WorkspaceProgID = WorkspaceProgID;<BR>&nbsp;&nbsp;&nbsp;_PS = ps;<BR>&nbsp;&nbsp;&nbsp;_FeatureClassName = featureClassName;<BR>&nbsp;&nbsp;}<BR>&nbsp;&nbsp;//================</P>
<P>&nbsp;</P>
<P>&nbsp;&nbsp;protected override void Run()<BR>&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;//This method is run on the background thread<BR>&nbsp;&nbsp;&nbsp;//the default is STA, which is needed for all ArcObjects<BR>&nbsp;&nbsp;&nbsp;try <BR>&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;//Re-open the IFeatureClassName object on this thread<BR>&nbsp;&nbsp;&nbsp;&nbsp;//This is *critical*, a passed IFeatureClass from the primary<BR>&nbsp;&nbsp;&nbsp;&nbsp;//thread will eventually fail/deadlock from this thread<BR>&nbsp;&nbsp;&nbsp;&nbsp;Type comType=Type.GetTypeFromProgID(_WorkspaceProgID);<BR>&nbsp;&nbsp;&nbsp;&nbsp;IWorkspaceFactory wf = (IWorkspaceFactory)Activator.CreateInstance(comType);<BR>&nbsp;&nbsp;&nbsp;&nbsp;IWorkspace ws = wf.Open(_PS, 0);<BR>&nbsp;&nbsp;&nbsp;&nbsp;IFeatureWorkspace fws = ws as IFeatureWorkspace;<BR>&nbsp;&nbsp;&nbsp;&nbsp;IFeatureClass fc = fws.OpenFeatureClass(_FeatureClassName);<BR>&nbsp;&nbsp;&nbsp;&nbsp;</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;//during lengthy operations like opening, give the <BR>&nbsp;&nbsp;&nbsp;&nbsp;//user a chance to Cancel<BR>&nbsp;&nbsp;&nbsp;&nbsp;if (this.IsCancelled) <BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.OnCancelled();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<BR>&nbsp;&nbsp;&nbsp;&nbsp;}</P>
<P><BR>&nbsp;&nbsp;&nbsp;&nbsp;//===================<BR>&nbsp;&nbsp;&nbsp;&nbsp;//start our main processing loop<BR>&nbsp;&nbsp;&nbsp;&nbsp;//Every 25 records, inform the caller<BR>&nbsp;&nbsp;&nbsp;&nbsp;int cnt = 0;<BR>&nbsp;&nbsp;&nbsp;&nbsp;int total = 0;<BR>&nbsp;&nbsp;&nbsp;&nbsp;double totalArea = 0;</P>
<P><BR>&nbsp;&nbsp;&nbsp;&nbsp;//get all records<BR>&nbsp;&nbsp;&nbsp;&nbsp;IFeatureCursor cursor = null;<BR>&nbsp;&nbsp;&nbsp;&nbsp;cursor = fc.Search(null, false);<BR>&nbsp;&nbsp;&nbsp;&nbsp;IFeature feature = cursor.NextFeature();<BR>&nbsp;&nbsp;&nbsp;&nbsp;while (feature != null) <BR>&nbsp;&nbsp;&nbsp;&nbsp;{</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//================<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//do something a bit more compelling then summing area<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IArea area = (IArea)feature.Shape;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalArea += area.Area;&nbsp;&nbsp;&nbsp;&nbsp;</P>
<P><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//================<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//next record<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total++;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cnt++;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (cnt &gt; 25) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//you may want to pass a percentage for a progressbar<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.OnProgress("Features: " + total + " Area: " + totalArea, total);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cnt = 0;</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (this.IsCancelled) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.OnCancelled();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feature = cursor.NextFeature();<BR>&nbsp;&nbsp;&nbsp;&nbsp;}</P>
<P><BR>&nbsp;&nbsp;&nbsp;&nbsp;//Completion<BR>&nbsp;&nbsp;&nbsp;&nbsp;this.OnCompleted(true);</P>
<P>&nbsp;&nbsp;&nbsp;} <BR>&nbsp;&nbsp;&nbsp;catch (Exception exp) <BR>&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;this.OnError(exp.Message);<BR>&nbsp;&nbsp;&nbsp;}</P>
<P>&nbsp;&nbsp;}</P>
<P><BR>&nbsp;}</P>
<P>&nbsp;</code></P>
<P><BR>Usage from an ArcMap ICommand or from code would look something like the following:</P>
<P><code>&nbsp;IMxApplication mxapp = m_app as IMxApplication;<BR>&nbsp;IMxDocument doc = m_app.Document as IMxDocument;</P>
<P>&nbsp;//Get opaque handles to the featureclass and its workspace<BR>&nbsp;IGeoFeatureLayer gfl = (IGeoFeatureLayer)doc.FocusMap.get_Layer(1);<BR>&nbsp;IDataset ds = (IDataset)gfl.DisplayFeatureClass;<BR>&nbsp;IDatasetName dsn = (IDatasetName)ds.FullName;<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;//create a background processor<BR>&nbsp;MyFeatureProcessor mfp = new MyFeatureProcessor(<BR>&nbsp;&nbsp;dsn.WorkspaceName.WorkspaceFactoryProgID,<BR>&nbsp;&nbsp;dsn.WorkspaceName.ConnectionProperties,<BR>&nbsp;&nbsp;dsn.Name);</P>
<P>&nbsp;//sink the events<BR>&nbsp;mfp.Error +=new SDL.Client.BackgroundWorker.ErrorHandler(mfp_Error);<BR>&nbsp;mfp.Progress +=new SDL.Client.BackgroundWorker.ProgressHandler(mfp_Progress);<BR>&nbsp;mfp.Completed +=new SDL.Client.BackgroundWorker.CompletedHandler(mfp_Completed);</P>
<P>&nbsp;//Inform ArcMap that we have a background thread running<BR>&nbsp;IMultiThreadedApplication mta = (IMultiThreadedApplication)mxapp;<BR>&nbsp;mta.RegisterThreadManager((IDllThreadManager)mfp);</P>
<P>&nbsp;//start it up<BR>&nbsp;mfp.Start();</P>
<P>&nbsp;</code></P>
<P>This is a good start but more work needs to be done to bulletproof the entire process. Additionally, opening featureclasses from different threads may be problematic with file based layers like shapefiles and coverages, especially when you want to write back changes. PersonalGDBs and ArcSDE databases should work fine with write operations. Most of all, be very aware that threading in general is deceivingly difficult topic, one where anomalies and issues seem to arise seemingly out of nowhere. It is very important to understand the basics when using any threading code. <A href="http://www.yoda.arachsys.com/csharp/threads/">This is a good link </A>(thanks to <A href="http://www.interact-sw.co.uk/iangblog/">Ian</A>) for a .Net walkthrough (although the topics are applicable from any language)</P>
<P><BR><a href="http://www.spatialdatalogic.com/sdl/Public/Downloads/BackgroundWorker.zip">BackgroundWorker code</A></P>
<P>HTH<BR>Listening to: <A href="http://music.msn.com/album/?album=10536505">Underneath The Leaves – John Vanderslice</A></P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P>&nbsp;</P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=7" width="1" height="1">";s:7:"summary";s:10794:"<P><IMG src="/SDL/Public/Images/sunlight_sm.jpg"></IMG>&nbsp;<BR>I’ve seen several posts on the <A href="http://forums.esri.com/forums.asp?c=93">ESRI support forums</A> regarding ArcMap (and ArcObjects in general) not using the total processing power of user’s workstations, particularly when multiple paths of execution are possible (SMP, hyper-threading or the soon to be available dual/multi-core CPUs). The issue at hand is that ArcObjects is fundamentally a single threaded design, nearly all of the underlying classes and all of the most compelling ones, are marked apartment threaded (STA) in the registry. By default, they are all going to run on the main UI thread that is powering everything else in the application. Most times this is the correct design however there are many other instances where some long running process would be better suited on a background thread, periodically passing progress, errors and completion back to the main thread. An end user can continue working with the main UI while geoprocessing, custom code or printing is executing concurrently in the background. </P>
<P>There is a <A href="http://www.gotw.ca/publications/concurrency-ddj.htm">good article by Herb Sutter </A>that postulates that the age of “faster CPUs equates to faster applications” is done and gone, any gains going into the future will be based on concurrent programming models. </P>
<P>“Starting today, the performance lunch isn’t free any more. Sure, there will continue to be generally applicable performance gains that everyone can pick up, thanks mainly to cache size improvements. But if you want your application to benefit from the continued exponential throughput advances in new processors, it will need to be a well-written concurrent (usually multithreaded) application. And that’s easier said than done, because not all problems are inherently parallelizable and because concurrent programming is hard.”</P>
<P>From an ArcMap perspective, use of background threads may be single best way in the future to increase overall performance of your application. Easier said then done, but a trend that cannot be ignored, especially with the ever growing size of geospatial data being collected and analyzed today.<BR></P>
<P>&nbsp;</P>
<P>Since the release of 9.0, you can safely start up background threads and run code against the singleton objects that caused problems in the 8.x codebase. By moving the singletons to per thread as opposed to per process, we can now efficiently spin up something like a IWorkspaceFactory object and then access the feature classes that are spawned from it. In 8.x, this would not have been possible because the factory object would have been pinned to the primary UI thread. Thankfully, this is not an issue anymore. </P>
<P>Given the change above, the key now is re-starting these factory singletons on your worker thread and then accessing the feature classes and layers from the new factories. This is critical, everything will eventually fail/deadlock if you attempt to pass interface pointers from the main thread to your worker thread. You must restart these objects on your worker thread so you can safely (and efficiently!) access their methods/properties and all of the objects that spawn from them. This makes it a little tedious when designing your workers but through some formalized patterns and helper methods, it should be pretty painless moving forward. Below is a sample BackgroundWorker class that can be used as a starting point for designing your own workers. </P>
<P>The <a href="http://www.spatialdatalogic.com/sdl/Public/Downloads/BackgroundWorker.zip">BackgroundWorker class </A>handles the creation and lifetime of the thread and more importantly, the dispatching of events (Progress, Cancelled, Completed, Error) to the main UI thread. A class that derives from BackgroundWorker only has to override the Run virtual method and periodically pump progress messages. Here is a sample worker that iterates a Feature class and total area, you would presumably do something a little more interesting.</P>
<P><code>&nbsp;public class MyFeatureProcessor:BackgroundWorker<BR>&nbsp;{<BR>&nbsp;&nbsp;<BR>&nbsp;&nbsp;private string _WorkspaceProgID;<BR>&nbsp;&nbsp;private IPropertySet _PS;<BR>&nbsp;&nbsp;private string _FeatureClassName;<BR>&nbsp;</P>
<P><BR>&nbsp;&nbsp;//================<BR>&nbsp;&nbsp;//ctor<BR>&nbsp;&nbsp;public MyFeatureProcessor(<BR>&nbsp;&nbsp;&nbsp;string WorkspaceProgID, <BR>&nbsp;&nbsp;&nbsp;IPropertySet ps, <BR>&nbsp;&nbsp;&nbsp;string featureClassName)<BR>&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;_WorkspaceProgID = WorkspaceProgID;<BR>&nbsp;&nbsp;&nbsp;_PS = ps;<BR>&nbsp;&nbsp;&nbsp;_FeatureClassName = featureClassName;<BR>&nbsp;&nbsp;}<BR>&nbsp;&nbsp;//================</P>
<P>&nbsp;</P>
<P>&nbsp;&nbsp;protected override void Run()<BR>&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;//This method is run on the background thread<BR>&nbsp;&nbsp;&nbsp;//the default is STA, which is needed for all ArcObjects<BR>&nbsp;&nbsp;&nbsp;try <BR>&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;//Re-open the IFeatureClassName object on this thread<BR>&nbsp;&nbsp;&nbsp;&nbsp;//This is *critical*, a passed IFeatureClass from the primary<BR>&nbsp;&nbsp;&nbsp;&nbsp;//thread will eventually fail/deadlock from this thread<BR>&nbsp;&nbsp;&nbsp;&nbsp;Type comType=Type.GetTypeFromProgID(_WorkspaceProgID);<BR>&nbsp;&nbsp;&nbsp;&nbsp;IWorkspaceFactory wf = (IWorkspaceFactory)Activator.CreateInstance(comType);<BR>&nbsp;&nbsp;&nbsp;&nbsp;IWorkspace ws = wf.Open(_PS, 0);<BR>&nbsp;&nbsp;&nbsp;&nbsp;IFeatureWorkspace fws = ws as IFeatureWorkspace;<BR>&nbsp;&nbsp;&nbsp;&nbsp;IFeatureClass fc = fws.OpenFeatureClass(_FeatureClassName);<BR>&nbsp;&nbsp;&nbsp;&nbsp;</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;//during lengthy operations like opening, give the <BR>&nbsp;&nbsp;&nbsp;&nbsp;//user a chance to Cancel<BR>&nbsp;&nbsp;&nbsp;&nbsp;if (this.IsCancelled) <BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.OnCancelled();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<BR>&nbsp;&nbsp;&nbsp;&nbsp;}</P>
<P><BR>&nbsp;&nbsp;&nbsp;&nbsp;//===================<BR>&nbsp;&nbsp;&nbsp;&nbsp;//start our main processing loop<BR>&nbsp;&nbsp;&nbsp;&nbsp;//Every 25 records, inform the caller<BR>&nbsp;&nbsp;&nbsp;&nbsp;int cnt = 0;<BR>&nbsp;&nbsp;&nbsp;&nbsp;int total = 0;<BR>&nbsp;&nbsp;&nbsp;&nbsp;double totalArea = 0;</P>
<P><BR>&nbsp;&nbsp;&nbsp;&nbsp;//get all records<BR>&nbsp;&nbsp;&nbsp;&nbsp;IFeatureCursor cursor = null;<BR>&nbsp;&nbsp;&nbsp;&nbsp;cursor = fc.Search(null, false);<BR>&nbsp;&nbsp;&nbsp;&nbsp;IFeature feature = cursor.NextFeature();<BR>&nbsp;&nbsp;&nbsp;&nbsp;while (feature != null) <BR>&nbsp;&nbsp;&nbsp;&nbsp;{</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//================<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//do something a bit more compelling then summing area<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IArea area = (IArea)feature.Shape;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalArea += area.Area;&nbsp;&nbsp;&nbsp;&nbsp;</P>
<P><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//================<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//next record<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total++;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cnt++;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (cnt &gt; 25) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//you may want to pass a percentage for a progressbar<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.OnProgress("Features: " + total + " Area: " + totalArea, total);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cnt = 0;</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (this.IsCancelled) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.OnCancelled();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feature = cursor.NextFeature();<BR>&nbsp;&nbsp;&nbsp;&nbsp;}</P>
<P><BR>&nbsp;&nbsp;&nbsp;&nbsp;//Completion<BR>&nbsp;&nbsp;&nbsp;&nbsp;this.OnCompleted(true);</P>
<P>&nbsp;&nbsp;&nbsp;} <BR>&nbsp;&nbsp;&nbsp;catch (Exception exp) <BR>&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;this.OnError(exp.Message);<BR>&nbsp;&nbsp;&nbsp;}</P>
<P>&nbsp;&nbsp;}</P>
<P><BR>&nbsp;}</P>
<P>&nbsp;</code></P>
<P><BR>Usage from an ArcMap ICommand or from code would look something like the following:</P>
<P><code>&nbsp;IMxApplication mxapp = m_app as IMxApplication;<BR>&nbsp;IMxDocument doc = m_app.Document as IMxDocument;</P>
<P>&nbsp;//Get opaque handles to the featureclass and its workspace<BR>&nbsp;IGeoFeatureLayer gfl = (IGeoFeatureLayer)doc.FocusMap.get_Layer(1);<BR>&nbsp;IDataset ds = (IDataset)gfl.DisplayFeatureClass;<BR>&nbsp;IDatasetName dsn = (IDatasetName)ds.FullName;<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;//create a background processor<BR>&nbsp;MyFeatureProcessor mfp = new MyFeatureProcessor(<BR>&nbsp;&nbsp;dsn.WorkspaceName.WorkspaceFactoryProgID,<BR>&nbsp;&nbsp;dsn.WorkspaceName.ConnectionProperties,<BR>&nbsp;&nbsp;dsn.Name);</P>
<P>&nbsp;//sink the events<BR>&nbsp;mfp.Error +=new SDL.Client.BackgroundWorker.ErrorHandler(mfp_Error);<BR>&nbsp;mfp.Progress +=new SDL.Client.BackgroundWorker.ProgressHandler(mfp_Progress);<BR>&nbsp;mfp.Completed +=new SDL.Client.BackgroundWorker.CompletedHandler(mfp_Completed);</P>
<P>&nbsp;//Inform ArcMap that we have a background thread running<BR>&nbsp;IMultiThreadedApplication mta = (IMultiThreadedApplication)mxapp;<BR>&nbsp;mta.RegisterThreadManager((IDllThreadManager)mfp);</P>
<P>&nbsp;//start it up<BR>&nbsp;mfp.Start();</P>
<P>&nbsp;</code></P>
<P>This is a good start but more work needs to be done to bulletproof the entire process. Additionally, opening featureclasses from different threads may be problematic with file based layers like shapefiles and coverages, especially when you want to write back changes. PersonalGDBs and ArcSDE databases should work fine with write operations. Most of all, be very aware that threading in general is deceivingly difficult topic, one where anomalies and issues seem to arise seemingly out of nowhere. It is very important to understand the basics when using any threading code. <A href="http://www.yoda.arachsys.com/csharp/threads/">This is a good link </A>(thanks to <A href="http://www.interact-sw.co.uk/iangblog/">Ian</A>) for a .Net walkthrough (although the topics are applicable from any language)</P>
<P><BR><a href="http://www.spatialdatalogic.com/sdl/Public/Downloads/BackgroundWorker.zip">BackgroundWorker code</A></P>
<P>HTH<BR>Listening to: <A href="http://music.msn.com/album/?album=10536505">Underneath The Leaves – John Vanderslice</A></P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P>&nbsp;</P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=7" width="1" height="1">";}i:12;a:10:{s:5:"title";s:23:"GDI+ Graphics in ArcMap";s:4:"link";s:78:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/archive/2004/12/13/3.aspx";s:7:"pubdate";s:29:"Mon, 13 Dec 2004 20:46:00 GMT";s:4:"guid";s:38:"53332bb2-7758-437e-86ab-e8e36e8e971d:3";s:2:"dc";a:1:{s:7:"creator";s:5:"admin";}s:5:"slash";a:1:{s:8:"comments";s:1:"0";}s:8:"comments";s:68:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/comments/3.aspx";s:3:"wfw";a:1:{s:10:"commentrss";s:77:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/commentrss.aspx?PostID=3";}s:11:"description";s:8023:"<P><IMG src="/SDL/Public/Images/night_tree_sm.jpg"></IMG> </P>
<P>I decided to dig out and retrofit some old code after a recent correspondence drifted into the quality of ArcMap’s onscreen cartography versus something like MapQuest (which is currently using anti-alias effects on their maps). It’s not that ArcMap’s symbology is bad, it’s just missing some of the more modern graphical effects that are present in other graphics programs. For instance, while you can apply alpha transparency to an entire map layer, you cannot apply the same effect to an individual features or elements. Thankfully, the incredible extensibility built right into ArcObjects allows us to extend the framework and include some graphical goodies from GDI+ (via the .Net System.Drawing namespace)</P>
<P>The easiest way to get some GDI+ effects on the map is to just respond to the After* drawing events or use IDisplay.StartDrawing. From there, start firing away at the map’s hDC (wrapped in a Graphics object) using the GDI+ primitives transformed by the appropriate IDisplayTransformation. The Map coclass will combine the resulting effects correctly, so feel free to use the anti-alias smoothing mode or the alpha channel on colors. </P>
<P><IMG src="/SDL/Public/Images/Map_GDIPlusWithElements.png"></IMG><BR><a href="http://www.spatialdatalogic.com/sdl/Public/Images/Map_GDIPlusWithElements.png">Three Polygon Elements with Transparency </A></P>
<P>This is good and may be all you need but it’s not enough if you want your effects to be part of the main layer stack or to be permanently stored with the MXD file. For this, you need to create a custom ISymbol that conforms to all of ArcObject’s expected interfaces. At first glance, this seems like a perfect opportunity to use .Net’s mixed mode inheritance, building on the base ArcObjects symbol classes. While it is possible to inherit from a COM class (actually, the RCW of the COM class), you will not get the desired effect when that derived class is handed back to unmanaged code. It works perfectly well when you are calling this class from inside .Net’s managed control, but the interface hierarchy is flattened once it’s passes back through the CCW into COM land (actually, at regasm time not runtime). Again, this will work but if you are trying to override some behavior of an explicitly declared interface (say ISymbol in our case), your version of the interface in your derived class will not be called. It is the underlying base class’s implementation that will get called, which pretty much negates the intent of the override. So, mixed mode COM aggregation only works in the managed environment and since it is ArcMap that is ultimately invoking our class methods, clearly this is not an option for our purposes. </P>
<P>[Update - After some more checking, it does in fact work when overriding the default methods with None on the ClassInterfaceType, so aggregation works and seems to work well. Everything below still applies, just don't use the Inner class, use the base ;) ]</P>
<P>&nbsp;</P>
<P>This leaves us with completely writing the symbol class on our own or, more to my liking use good old containment inheritance and delegate many of the incoming calls to an inner symbol class. We really only want to override the drawing of the symbol to the screen, so all we are interested in is the ISymbol Draw, SetupDC and ResetDC methods. Everything else can be directed towards the contained symbol object. SetupDC is just caching the Graphics (via Graphics.FromHdc) and Transformation objects for use during Draw. ResetDC cleans up when done. The real work happens inside Draw, where we need to transform the passed IGeometry into something that can used by the .Net drawing primitives. Likewise, we need to craft the proper Brushes/Pens to use based on the inner symbol object. Both operations can get complicated depending on what level of fidelity we are trying to achieve. First, we need to examine the passed IGeometry and in the case of a polygon, create the representative GraphicsPath for the draw operation. This is just a matter of crawling the geometries (rings, paths etc.) and copying the transformed coordinates (via the stored IDisplayTransformation) into Point[] arrays [1]. </P>
<P>
<P><SPAN></SPAN></P>
<P></P><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GraphicsPath gp = new GraphicsPath();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FromPolygon(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gp, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (IPolygon)Geometry, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (IDisplayTransformation)_Transformation);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR>&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //====================<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //stroke and fill path<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (gp)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Color c = getNetColor(_Inner.Color);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Brush b = new SolidBrush(c);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (b) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _Graphics.FillPath(b, gp);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR>&nbsp; 
</code><P></P>
<P>IPersistStream/IPersistVariant and IClone – These interfaces need to be implemented by custom symbols, it’s how ArcMap stores and copies your object to and from dialogs, styles and elements. You will get a NullReference exception if you try to use your class without properly implementing these interfaces. Some items I noticed: 1) Use your class’s ProgID (or explicitly set GUID) in the IPersistVariant.ID property. 2) A curiosity of the COM interop layer can be seen during the IClone.Clone and IPersistVariant.Load method calls. Both Clone and Stream.Read return what looks like a raw IUnknown pointer instead of what I thought would be a valid RCW object. It’s not and its use will wreak havoc on any forthcoming code that uses those objects. It’s a quick fix though, a call like below gets you the correct object.</P>
<P>&nbsp;IClone c = _Inner as IClone;<BR>&nbsp;IClone cloned = c.Clone();<BR>&nbsp;object ccw = Marshal.CreateWrapperOfType(<BR>&nbsp;&nbsp;cloned, <BR>&nbsp;&nbsp;typeof(SimpleLineSymbolClass));</P>
<P><BR>Here’s some final results to compare the two methods:<BR><a href="http://www.spatialdatalogic.com/sdl/Public/Images/Map_GDIRegular.png">With Regular ArcMap Symbols</A><BR><a href="http://www.spatialdatalogic.com/sdl/Public/Images/Map_GDIPlus.png">With GDI+ Symbols</A> (not the text symbols)<BR><a href="http://www.spatialdatalogic.com/sdl/Public/Images/Map_GDIPlusWithShading.png">Another shading example</A></P>
<P><BR>So, GDI+ can add some graphical polish to your maps but be careful with these effects, some people actually find it harder to read anti-aliased text. Additionally, because of the smoothing of the pixels around the strokes, the increase in the number of unique pixel values can dramatically increase the image size when saving to a GIF or PNG. </P>
<P><BR>HTH<BR>Listening to:&nbsp; <A href="http://music.msn.com/album/?album=10580351">Kings of Leon - California Waiting</A></P>
<P>[1] – at first I thought this would be a prohibitively expensive operation but in practice, the interop penalty did not seem as great as I would have expected. YMMV.</P>
<P><FONT></FONT>&nbsp;</P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=3" width="1" height="1">";s:7:"summary";s:8023:"<P><IMG src="/SDL/Public/Images/night_tree_sm.jpg"></IMG> </P>
<P>I decided to dig out and retrofit some old code after a recent correspondence drifted into the quality of ArcMap’s onscreen cartography versus something like MapQuest (which is currently using anti-alias effects on their maps). It’s not that ArcMap’s symbology is bad, it’s just missing some of the more modern graphical effects that are present in other graphics programs. For instance, while you can apply alpha transparency to an entire map layer, you cannot apply the same effect to an individual features or elements. Thankfully, the incredible extensibility built right into ArcObjects allows us to extend the framework and include some graphical goodies from GDI+ (via the .Net System.Drawing namespace)</P>
<P>The easiest way to get some GDI+ effects on the map is to just respond to the After* drawing events or use IDisplay.StartDrawing. From there, start firing away at the map’s hDC (wrapped in a Graphics object) using the GDI+ primitives transformed by the appropriate IDisplayTransformation. The Map coclass will combine the resulting effects correctly, so feel free to use the anti-alias smoothing mode or the alpha channel on colors. </P>
<P><IMG src="/SDL/Public/Images/Map_GDIPlusWithElements.png"></IMG><BR><a href="http://www.spatialdatalogic.com/sdl/Public/Images/Map_GDIPlusWithElements.png">Three Polygon Elements with Transparency </A></P>
<P>This is good and may be all you need but it’s not enough if you want your effects to be part of the main layer stack or to be permanently stored with the MXD file. For this, you need to create a custom ISymbol that conforms to all of ArcObject’s expected interfaces. At first glance, this seems like a perfect opportunity to use .Net’s mixed mode inheritance, building on the base ArcObjects symbol classes. While it is possible to inherit from a COM class (actually, the RCW of the COM class), you will not get the desired effect when that derived class is handed back to unmanaged code. It works perfectly well when you are calling this class from inside .Net’s managed control, but the interface hierarchy is flattened once it’s passes back through the CCW into COM land (actually, at regasm time not runtime). Again, this will work but if you are trying to override some behavior of an explicitly declared interface (say ISymbol in our case), your version of the interface in your derived class will not be called. It is the underlying base class’s implementation that will get called, which pretty much negates the intent of the override. So, mixed mode COM aggregation only works in the managed environment and since it is ArcMap that is ultimately invoking our class methods, clearly this is not an option for our purposes. </P>
<P>[Update - After some more checking, it does in fact work when overriding the default methods with None on the ClassInterfaceType, so aggregation works and seems to work well. Everything below still applies, just don't use the Inner class, use the base ;) ]</P>
<P>&nbsp;</P>
<P>This leaves us with completely writing the symbol class on our own or, more to my liking use good old containment inheritance and delegate many of the incoming calls to an inner symbol class. We really only want to override the drawing of the symbol to the screen, so all we are interested in is the ISymbol Draw, SetupDC and ResetDC methods. Everything else can be directed towards the contained symbol object. SetupDC is just caching the Graphics (via Graphics.FromHdc) and Transformation objects for use during Draw. ResetDC cleans up when done. The real work happens inside Draw, where we need to transform the passed IGeometry into something that can used by the .Net drawing primitives. Likewise, we need to craft the proper Brushes/Pens to use based on the inner symbol object. Both operations can get complicated depending on what level of fidelity we are trying to achieve. First, we need to examine the passed IGeometry and in the case of a polygon, create the representative GraphicsPath for the draw operation. This is just a matter of crawling the geometries (rings, paths etc.) and copying the transformed coordinates (via the stored IDisplayTransformation) into Point[] arrays [1]. </P>
<P>
<P><SPAN></SPAN></P>
<P></P><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GraphicsPath gp = new GraphicsPath();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FromPolygon(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gp, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (IPolygon)Geometry, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (IDisplayTransformation)_Transformation);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR>&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //====================<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //stroke and fill path<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (gp)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Color c = getNetColor(_Inner.Color);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Brush b = new SolidBrush(c);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (b) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _Graphics.FillPath(b, gp);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR>&nbsp; 
</code><P></P>
<P>IPersistStream/IPersistVariant and IClone – These interfaces need to be implemented by custom symbols, it’s how ArcMap stores and copies your object to and from dialogs, styles and elements. You will get a NullReference exception if you try to use your class without properly implementing these interfaces. Some items I noticed: 1) Use your class’s ProgID (or explicitly set GUID) in the IPersistVariant.ID property. 2) A curiosity of the COM interop layer can be seen during the IClone.Clone and IPersistVariant.Load method calls. Both Clone and Stream.Read return what looks like a raw IUnknown pointer instead of what I thought would be a valid RCW object. It’s not and its use will wreak havoc on any forthcoming code that uses those objects. It’s a quick fix though, a call like below gets you the correct object.</P>
<P>&nbsp;IClone c = _Inner as IClone;<BR>&nbsp;IClone cloned = c.Clone();<BR>&nbsp;object ccw = Marshal.CreateWrapperOfType(<BR>&nbsp;&nbsp;cloned, <BR>&nbsp;&nbsp;typeof(SimpleLineSymbolClass));</P>
<P><BR>Here’s some final results to compare the two methods:<BR><a href="http://www.spatialdatalogic.com/sdl/Public/Images/Map_GDIRegular.png">With Regular ArcMap Symbols</A><BR><a href="http://www.spatialdatalogic.com/sdl/Public/Images/Map_GDIPlus.png">With GDI+ Symbols</A> (not the text symbols)<BR><a href="http://www.spatialdatalogic.com/sdl/Public/Images/Map_GDIPlusWithShading.png">Another shading example</A></P>
<P><BR>So, GDI+ can add some graphical polish to your maps but be careful with these effects, some people actually find it harder to read anti-aliased text. Additionally, because of the smoothing of the pixels around the strokes, the increase in the number of unique pixel values can dramatically increase the image size when saving to a GIF or PNG. </P>
<P><BR>HTH<BR>Listening to:&nbsp; <A href="http://music.msn.com/album/?album=10580351">Kings of Leon - California Waiting</A></P>
<P>[1] – at first I thought this would be a prohibitively expensive operation but in practice, the interop penalty did not seem as great as I would have expected. YMMV.</P>
<P><FONT></FONT>&nbsp;</P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=3" width="1" height="1">";}i:13;a:10:{s:5:"title";s:28:"Passing ArcObjects Over HTTP";s:4:"link";s:78:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/archive/2004/12/11/5.aspx";s:7:"pubdate";s:29:"Sat, 11 Dec 2004 21:51:00 GMT";s:4:"guid";s:38:"53332bb2-7758-437e-86ab-e8e36e8e971d:5";s:2:"dc";a:1:{s:7:"creator";s:5:"admin";}s:5:"slash";a:1:{s:8:"comments";s:1:"0";}s:8:"comments";s:68:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/comments/5.aspx";s:3:"wfw";a:1:{s:10:"commentrss";s:77:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/commentrss.aspx?PostID=5";}s:11:"description";s:7406:"<P><IMG src="/SDL/Public/Images/smoke_sm.jpg"></IMG> </P>
<P>There are many times inside of a controlled system where strongly typed objects and object graphs need to be sent to a server as part of remote methods parameters. It can be advantageous to use pre-existing COM libraries instead of either rebuilding their .Net equivalent or (attempting) to publish WSDL that approximates their layout. There are literally hundreds of classes in ArcObjects (ESRI.ArcGIS.esriSystem, ESRI.ArcGIS.Carto, ESRI.ArcGIS.Geometry [1]) that fall into this category, many of which would be extremely time consuming to duplicate just for the transfer to a server where ArcGIS is running anyway (Version brittleness aside).</P>
<P>Imagine needing to call a remote method that takes a collection of (potentially) multi-part polygons in any spatial reference. In ArcMap, this could easily be represented by the currently selected features of a certain layer. The remote method then performed some lengthy operation on these geometries and then returns the resulting geometry. Now, you could code against something like GML and transform the ArcGIS representation into its open XML equivalent (if available) and then pass that to a web service, where it is ultimately transformed back into the ArcGIS object for processing. The reverse happens for the return call. This would be the appropriate design for an interoperable web service where multiple, unknown callers would be using the system. However, in this case, we are within our sphere of control and we are looking for both the fastest and the easiest to code against. We just want to directly pass the object from ArcMap to the server method. With ArcGIS Server, we can do just that, given we have a TCP connection with the SOM and we have navigated the DCOM security gotchas correctly. [2]</P>
<P>In our case, we had this exact scenario but we only had HTTP to work with. Fortunately, there is a fairly easy way to decompose most of the ArcObjects classes into something that can be easily transported over HTTP. For storage purposes, many of the classes implement the IPersistStream interface (you could use IXMLSerialize if you wanted as well), essentially allowing them to serialize/deserialize to and from a byte stream. Given this, we can create a .Net class that simply wraps this process while still working with the native Serialization process used in Remoting and ASMX services. If you look closely at the System.Messaging namespace, you can see MS is doing the same thing when passing COM objects into a MessageQueue. Sample code below:</P>
<P><code>[Serializable]<BR>internal class COMObjectHolder:ISerializable<BR>{<BR>&nbsp;[NonSerialized]<BR>&nbsp;private object _COMObject;</P>
<P>&nbsp;public COMObjectHolder(object comObject)<BR>&nbsp;{<BR>&nbsp;&nbsp;_COMObject = comObject;<BR>&nbsp;}<BR>&nbsp;public COMObjectHolder(SerializationInfo info, StreamingContext context)<BR>&nbsp;{&nbsp;<BR>&nbsp;&nbsp;byte[] bytes = info.GetValue("bytes", typeof(byte[])) as byte[];<BR>&nbsp;&nbsp;if (bytes != null) <BR>&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;Stream stm = Utilities.ByteArrayToStream(bytes);<BR>&nbsp;&nbsp;&nbsp;COMStream cs = new COMStream(stm);<BR>&nbsp;&nbsp;&nbsp;_COMObject = WIN32.OleLoadFromStream(cs, ref WIN32.IID_IUnknown);<BR>&nbsp;&nbsp;}<BR>&nbsp;}&nbsp;</P>
<P>&nbsp;public void GetObjectData(SerializationInfo info, StreamingContext context)<BR>&nbsp;{<BR>&nbsp;&nbsp;if ((_COMObject != null) &amp;&amp; (_COMObject is IPersistStream))<BR>&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;IPersistStream ps = _COMObject as IPersistStream;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;COMStream cs = new COMStream(new MemoryStream());<BR>&nbsp;&nbsp;&nbsp;WIN32.OleSaveToStream(ps, cs);<BR>&nbsp;&nbsp;&nbsp;Stream stm = cs.GetDataStream();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;byte[] bytes = Utilities.StreamToByteArray(stm);<BR>&nbsp;&nbsp;&nbsp;info.AddValue("bytes", bytes);<BR>&nbsp;&nbsp;}<BR>&nbsp;}</P>
<P><BR>&nbsp;public object InternalObject<BR>&nbsp;{<BR>&nbsp;&nbsp;get{return _COMObject;}<BR>&nbsp;&nbsp;set{_COMObject = value;}<BR>&nbsp;}<BR>}</code></P>
<P><BR>In our RemoteExtensions infrastructure, this knowledge of COM object serialization is acted on automatically so we can keep the method signatures pure and remove the tedious serialization code from the method bodies. It acts like normal marshalling, it just happens to be going over HTTP using the one way messaging semantics of the plumbing. To achieve this seamlessly, we again rely on the TransparentProxy/RealProxy magic of the CLR (see this post for more info). During RealProxy.Invoke, we inspect all of the passed arguments and wrap any good candidates appropriately (the extension holder running on the server does the opposite). Likewise, when the return value comes back, we inspect and transform it back if necessary (I’m not a big fan of ref or out args in Remoting scenarios). If it was a synchronous call (async calls get raised via AsyncOperation powered events, see this post), the return code in RealProxy looks something like this:</P>
<P><code>retVal = rp.Invoke((IMessage)mcm);<BR>if (retVal != null) <BR>{<BR>&nbsp;IMethodReturnMessage mrm = retVal as IMethodReturnMessage;<BR>&nbsp;object result = mrm.ReturnValue;<BR>&nbsp;if ((result != null) &amp;&amp; (result is IPersistStream))<BR>&nbsp;{<BR>&nbsp;&nbsp;COMObjectHolder com = new COMObjectHolder(result);</P>
<P>&nbsp;&nbsp;IMethodReturnMessage newMsg = new ReturnMessage(<BR>&nbsp;&nbsp;&nbsp;com.InternalObject,<BR>&nbsp;&nbsp;&nbsp;mrm.OutArgs,<BR>&nbsp;&nbsp;&nbsp;mrm.OutArgCount,<BR>&nbsp;&nbsp;&nbsp;mrm.LogicalCallContext,<BR>&nbsp;&nbsp;&nbsp;mcm);<BR>&nbsp;&nbsp;retVal = newMsg;<BR>&nbsp;}<BR>}</P>
<P><BR>So, we can hide away the implementation of the COM object serialization inside the RealProxy and keep our method signatures nice and clean. The final result&nbsp;would look something like this:</P>
<P>public class MyRemoteExtension:ROExtension <BR>{</P>
<P><BR>&nbsp;[RemoteMethod]<BR>&nbsp;public ESRI.ArcGIS.Geometry.IGeometry DoSomething(ESRI.ArcGIS.Geometry.IGeometryBag inputVals)<BR>&nbsp;{&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//do something special with geometries<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return newGeometry;<BR>&nbsp;}<BR></P>
<P>}</code></P>
<P>This flows perfectly over the HTTP Remoting infrastructure and is callable directly from ArcMap or an ArcEngine application using the generated proxy. All in all, it can make building remote apps quite a bit easier when you control both sides of the wire. The biggest benefit is the continued use of the enormous ArcObjects library instead of some intermediate representations. </P>
<P><BR>HTH<BR>Listening to: <A href="http://music.msn.com/album/?album=39134078">Autolux – Here Comes Everybody</A></P>
<P><BR>[1] – There are others that don’t fit the mold, ones that just can’t travel over the wire because of some dependence on a local resource like a database. For example, all the IWorkspace classes would not be good candidates for marshal by value semantics.</P>
<P>[2] – Although I did not put a tremendous amount of energy into it, I could never get DCOM tunneled over HTTP to work. I also read enough posts to shy away from it as an option. Any success stories out there?<BR></P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=5" width="1" height="1">";s:7:"summary";s:7406:"<P><IMG src="/SDL/Public/Images/smoke_sm.jpg"></IMG> </P>
<P>There are many times inside of a controlled system where strongly typed objects and object graphs need to be sent to a server as part of remote methods parameters. It can be advantageous to use pre-existing COM libraries instead of either rebuilding their .Net equivalent or (attempting) to publish WSDL that approximates their layout. There are literally hundreds of classes in ArcObjects (ESRI.ArcGIS.esriSystem, ESRI.ArcGIS.Carto, ESRI.ArcGIS.Geometry [1]) that fall into this category, many of which would be extremely time consuming to duplicate just for the transfer to a server where ArcGIS is running anyway (Version brittleness aside).</P>
<P>Imagine needing to call a remote method that takes a collection of (potentially) multi-part polygons in any spatial reference. In ArcMap, this could easily be represented by the currently selected features of a certain layer. The remote method then performed some lengthy operation on these geometries and then returns the resulting geometry. Now, you could code against something like GML and transform the ArcGIS representation into its open XML equivalent (if available) and then pass that to a web service, where it is ultimately transformed back into the ArcGIS object for processing. The reverse happens for the return call. This would be the appropriate design for an interoperable web service where multiple, unknown callers would be using the system. However, in this case, we are within our sphere of control and we are looking for both the fastest and the easiest to code against. We just want to directly pass the object from ArcMap to the server method. With ArcGIS Server, we can do just that, given we have a TCP connection with the SOM and we have navigated the DCOM security gotchas correctly. [2]</P>
<P>In our case, we had this exact scenario but we only had HTTP to work with. Fortunately, there is a fairly easy way to decompose most of the ArcObjects classes into something that can be easily transported over HTTP. For storage purposes, many of the classes implement the IPersistStream interface (you could use IXMLSerialize if you wanted as well), essentially allowing them to serialize/deserialize to and from a byte stream. Given this, we can create a .Net class that simply wraps this process while still working with the native Serialization process used in Remoting and ASMX services. If you look closely at the System.Messaging namespace, you can see MS is doing the same thing when passing COM objects into a MessageQueue. Sample code below:</P>
<P><code>[Serializable]<BR>internal class COMObjectHolder:ISerializable<BR>{<BR>&nbsp;[NonSerialized]<BR>&nbsp;private object _COMObject;</P>
<P>&nbsp;public COMObjectHolder(object comObject)<BR>&nbsp;{<BR>&nbsp;&nbsp;_COMObject = comObject;<BR>&nbsp;}<BR>&nbsp;public COMObjectHolder(SerializationInfo info, StreamingContext context)<BR>&nbsp;{&nbsp;<BR>&nbsp;&nbsp;byte[] bytes = info.GetValue("bytes", typeof(byte[])) as byte[];<BR>&nbsp;&nbsp;if (bytes != null) <BR>&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;Stream stm = Utilities.ByteArrayToStream(bytes);<BR>&nbsp;&nbsp;&nbsp;COMStream cs = new COMStream(stm);<BR>&nbsp;&nbsp;&nbsp;_COMObject = WIN32.OleLoadFromStream(cs, ref WIN32.IID_IUnknown);<BR>&nbsp;&nbsp;}<BR>&nbsp;}&nbsp;</P>
<P>&nbsp;public void GetObjectData(SerializationInfo info, StreamingContext context)<BR>&nbsp;{<BR>&nbsp;&nbsp;if ((_COMObject != null) &amp;&amp; (_COMObject is IPersistStream))<BR>&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;IPersistStream ps = _COMObject as IPersistStream;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;COMStream cs = new COMStream(new MemoryStream());<BR>&nbsp;&nbsp;&nbsp;WIN32.OleSaveToStream(ps, cs);<BR>&nbsp;&nbsp;&nbsp;Stream stm = cs.GetDataStream();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;byte[] bytes = Utilities.StreamToByteArray(stm);<BR>&nbsp;&nbsp;&nbsp;info.AddValue("bytes", bytes);<BR>&nbsp;&nbsp;}<BR>&nbsp;}</P>
<P><BR>&nbsp;public object InternalObject<BR>&nbsp;{<BR>&nbsp;&nbsp;get{return _COMObject;}<BR>&nbsp;&nbsp;set{_COMObject = value;}<BR>&nbsp;}<BR>}</code></P>
<P><BR>In our RemoteExtensions infrastructure, this knowledge of COM object serialization is acted on automatically so we can keep the method signatures pure and remove the tedious serialization code from the method bodies. It acts like normal marshalling, it just happens to be going over HTTP using the one way messaging semantics of the plumbing. To achieve this seamlessly, we again rely on the TransparentProxy/RealProxy magic of the CLR (see this post for more info). During RealProxy.Invoke, we inspect all of the passed arguments and wrap any good candidates appropriately (the extension holder running on the server does the opposite). Likewise, when the return value comes back, we inspect and transform it back if necessary (I’m not a big fan of ref or out args in Remoting scenarios). If it was a synchronous call (async calls get raised via AsyncOperation powered events, see this post), the return code in RealProxy looks something like this:</P>
<P><code>retVal = rp.Invoke((IMessage)mcm);<BR>if (retVal != null) <BR>{<BR>&nbsp;IMethodReturnMessage mrm = retVal as IMethodReturnMessage;<BR>&nbsp;object result = mrm.ReturnValue;<BR>&nbsp;if ((result != null) &amp;&amp; (result is IPersistStream))<BR>&nbsp;{<BR>&nbsp;&nbsp;COMObjectHolder com = new COMObjectHolder(result);</P>
<P>&nbsp;&nbsp;IMethodReturnMessage newMsg = new ReturnMessage(<BR>&nbsp;&nbsp;&nbsp;com.InternalObject,<BR>&nbsp;&nbsp;&nbsp;mrm.OutArgs,<BR>&nbsp;&nbsp;&nbsp;mrm.OutArgCount,<BR>&nbsp;&nbsp;&nbsp;mrm.LogicalCallContext,<BR>&nbsp;&nbsp;&nbsp;mcm);<BR>&nbsp;&nbsp;retVal = newMsg;<BR>&nbsp;}<BR>}</P>
<P><BR>So, we can hide away the implementation of the COM object serialization inside the RealProxy and keep our method signatures nice and clean. The final result&nbsp;would look something like this:</P>
<P>public class MyRemoteExtension:ROExtension <BR>{</P>
<P><BR>&nbsp;[RemoteMethod]<BR>&nbsp;public ESRI.ArcGIS.Geometry.IGeometry DoSomething(ESRI.ArcGIS.Geometry.IGeometryBag inputVals)<BR>&nbsp;{&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//do something special with geometries<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return newGeometry;<BR>&nbsp;}<BR></P>
<P>}</code></P>
<P>This flows perfectly over the HTTP Remoting infrastructure and is callable directly from ArcMap or an ArcEngine application using the generated proxy. All in all, it can make building remote apps quite a bit easier when you control both sides of the wire. The biggest benefit is the continued use of the enormous ArcObjects library instead of some intermediate representations. </P>
<P><BR>HTH<BR>Listening to: <A href="http://music.msn.com/album/?album=39134078">Autolux – Here Comes Everybody</A></P>
<P><BR>[1] – There are others that don’t fit the mold, ones that just can’t travel over the wire because of some dependence on a local resource like a database. For example, all the IWorkspace classes would not be good candidates for marshal by value semantics.</P>
<P>[2] – Although I did not put a tremendous amount of energy into it, I could never get DCOM tunneled over HTTP to work. I also read enough posts to shy away from it as an option. Any success stories out there?<BR></P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=5" width="1" height="1">";}i:14;a:10:{s:5:"title";s:11:"Hello World";s:4:"link";s:78:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/archive/2004/12/11/6.aspx";s:7:"pubdate";s:29:"Sat, 11 Dec 2004 18:13:00 GMT";s:4:"guid";s:38:"53332bb2-7758-437e-86ab-e8e36e8e971d:6";s:2:"dc";a:1:{s:7:"creator";s:5:"admin";}s:5:"slash";a:1:{s:8:"comments";s:1:"0";}s:8:"comments";s:68:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/comments/6.aspx";s:3:"wfw";a:1:{s:10:"commentrss";s:77:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/commentrss.aspx?PostID=6";}s:11:"description";s:769:"<P><IMG src="/SDL/Public/Images/chess2_sm.jpg"></IMG> </P>
<P>well, I guess it's time to join the blogging world.&nbsp;This will be&nbsp;my small contribution to all things GIS (Geographic Information Systems) and .Net. </P>
<P><a href="http://www.spatialdatalogic.com/SdL">My company</A> builds GIS and Workflow automation software for local and county government agencies. We primarily use GIS software from <A href="http://www.esri.com">ESRI</A> in the background.</P>
<P>This blog is also running on a Beta version of <A href="http://www.CommunityServer.org">CommunityServer</A>, so if there are any problems or broken links, hopefully they will get resolved in the future.</P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=6" width="1" height="1">";s:7:"summary";s:769:"<P><IMG src="/SDL/Public/Images/chess2_sm.jpg"></IMG> </P>
<P>well, I guess it's time to join the blogging world.&nbsp;This will be&nbsp;my small contribution to all things GIS (Geographic Information Systems) and .Net. </P>
<P><a href="http://www.spatialdatalogic.com/SdL">My company</A> builds GIS and Workflow automation software for local and county government agencies. We primarily use GIS software from <A href="http://www.esri.com">ESRI</A> in the background.</P>
<P>This blog is also running on a Beta version of <A href="http://www.CommunityServer.org">CommunityServer</A>, so if there are any problems or broken links, hopefully they will get resolved in the future.</P><img src="http://www.spatialdatalogic.com/CS/aggbug.aspx?PostID=6" width="1" height="1">";}}s:7:"channel";a:6:{s:5:"title";s:11:"Brian Flood";s:4:"link";s:65:"http://www.spatialdatalogic.com/CS/blogs/brian_flood/default.aspx";s:11:"description";s:12:".Net and GIS";s:2:"dc";a:1:{s:8:"language";s:5:"en-US";}s:9:"generator";s:40:"CommunityServer 1.0 (Build: 1.0.0.50218)";s:7:"tagline";s:12:".Net and GIS";}s:9:"textinput";a:0:{}s:5:"image";a:0:{}s:9:"feed_type";s:3:"RSS";s:12:"feed_version";s:3:"2.0";s:5:"stack";a:0:{}s:9:"inchannel";b:0;s:6:"initem";b:0;s:9:"incontent";b:0;s:11:"intextinput";b:0;s:7:"inimage";b:0;s:13:"current_field";s:0:"";s:17:"current_namespace";b:0;s:5:"ERROR";s:0:"";s:19:"_CONTENT_CONSTRUCTS";a:6:{i:0;s:7:"content";i:1;s:7:"summary";i:2;s:4:"info";i:3;s:5:"title";i:4;s:7:"tagline";i:5;s:9:"copyright";}s:13:"last_modified";s:31:"Sat, 11 Dec 2004 18:13:00 GMT
";s:4:"etag";s:23:"12/11/2004 1:13:00 PM
";}