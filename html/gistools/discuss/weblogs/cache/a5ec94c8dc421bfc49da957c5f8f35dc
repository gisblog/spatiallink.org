O:9:"MagpieRSS":19:{s:6:"parser";i:0;s:12:"current_item";a:0:{}s:5:"items";a:107:{i:0;a:6:{s:5:"title";s:47:"Running Python with compiled code on AWS Lambda";s:4:"link";s:72:"http://perrygeo.com/running-python-with-compiled-code-on-aws-lambda.html";s:7:"updated";s:25:"2015-10-10T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:80:"tag:perrygeo.com,2015-10-10:running-python-with-compiled-code-on-aws-lambda.html";s:7:"summary";s:21742:"<p>With the recent announcement that AWS Lambda <a href="https://aws.amazon.com/blogs/aws/aws-lambda-update-python-vpc-increased-function-duration-scheduling-and-more/">now supports Python</a>, I decided to take a look at using it for geospatial data processing.</p>
<p>Previously, I had built <a href="https://github.com/Ecotrust/growth-yield-batch">queue-based systems with Celery</a> that allow you to run discrete processing tasks in parallel on AWS infrastructure. Just start up as many workers on EC2 instances as you need, set up a broker and a results store, add jobs to the queue and collect the results. The problem with this system is that you have to manage all of the infrastructure and services yourself.</p>
<p>Ideally you wouldn't need to worry about infrastructure at all. That is the promise of AWS Lambda. Lambda can respond to events, fire up a worker and run the task without you needing to worry about provisioning a server. This is especially nice for sporadic work loads in response to events like user-uploaded data where you need to scale up or down regularly.</p>
<p>The reality of AWS Lambda is that you <em>do</em> need to worry about infrastructure in a different way. The constraints of the runtime environment mean that you need to get creative if you're doing anything beyond the basics. <strong>If your task relies on compiled code</strong>, either Python C extensions or shared libraries, you have to jump through some hoops. And for any geo data processing you are going to use a good amount of compiled code to call into C libs (see numpy, rasterio, GDAL, geopandas, Fiona, and so on)</p>
<p>This article describes my approach to solving the problem of running Python with calls to native code on AWS Lambda.</p>
<h2>Outline</h2>
<p>The short version goes like this:</p>
<ol>
<li>Start an <strong>EC2 instance</strong> using the official Amazon Linux AMI (based on Red Hat Enterprise Linux)</li>
<li>On the EC2 insance, Build any <strong>shared libries</strong> from source.</li>
<li>Create a <strong>virtualenv</strong> with all your python dependecies.</li>
<li>Write a python <strong>handler</strong> function to respond to events and interact with other parts of AWS (e.g. fetch data from S3)</li>
<li>Write a python <strong>worker</strong>, as a command line interface, to process the data</li>
<li><strong>Bundle</strong> the virtualenv, your code and the binary libs into a zip file</li>
<li><strong>Publish</strong> the zip file to AWS Lambda</li>
</ol>
<p>The deployment process is a bit clunky but the benefit is that, once it works, you don't have any servers to manage! A fair tradeoff IMO.</p>
<p>The process will take a raster dataset uploaded to the input s3 bucket</p>
<p><img alt="dem" src="/assets/img/grenada_srtm_raster.png" /></p>
<p>and automatically extract the shape of the valid data region, placing the resulting GeoJSON in the output s3 bucket.</p>
<p><img alt="shape" src="/assets/img/grenada_srtm_shape.png" /></p>
<h2>Start EC2</h2>
<p>Under the hood, your Lambda functions are running on EC2 with Amazon Linux. You don't have to think about that at runtime but, if you're calling native compiled code, it needs to be compiled on a similar OS. Theoretically you could do this with your own version of RHEL or CentOS but to be safe it's easier to use the official Amazon Linux since we know that's the exact environment our code will be run in.</p>
<p>I'm not going to go over the details of <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html">setting up EC2</a> so I'll assume we already have our account set up. The AMI ids are listed <a href="https://aws.amazon.com/amazon-linux-ami/">here</a>, pick the appropriate one for your region</p>
<div class="highlight"><pre>aws ec2 run-instances --image-id ami-9ff7e8af \
    --count 1 --instance-type t2.micro \
    --key-name your-key --security-groups your-sg
</pre></div>


<p>And ssh in</p>
<div class="highlight"><pre>ssh -i your-key.pem ec2-user@your.public.ip
</pre></div>


<p>Make sure everything's up to date:</p>
<div class="highlight"><pre>sudo yum -y update
sudo yum -y upgrade
</pre></div>


<h2>Build shared libraries from source</h2>
<p>Because your Lambda function will run in a clean AWS linux environment, you can't assume any system libraries will be there. Compiling from source isn't the only option - you could install binaries from the <a href="http://elgis.argeo.org/">Enterprise Linux GIS</a> effort but those tend to be older versions. To get more recent libs, compiling from source is an effective approach.</p>
<p>First install some compile-time deps</p>
<div class="highlight"><pre>sudo yum install python27-devel python27-pip gcc libjpeg-devel zlib-devel gcc-c++
</pre></div>


<p>Then build and install proj4 to a local prefix</p>
<div class="highlight"><pre>wget https://github.com/OSGeo/proj.4/archive/4.9.2.tar.gz
tar -zvxf 4.9.2.tar.gz
cd proj.4-4.9.2/
./configure --prefix=/home/ec2-user/lambda/local
make
make install
</pre></div>


<p>And build GDAL, statically linking proj4</p>
<div class="highlight"><pre>wget http://download.osgeo.org/gdal/1.11.3/gdal-1.11.3.tar.gz
tar -xzvf gdal-1.11.3.tar.gz
cd gdal-1.11.3
./configure --prefix=/home/ec2-user/lambda/local \
            --with-geos=/home/ec2-user/lambda/local/bin/geos-config \
            --with-static-proj4=/home/ec2-user/lambda/local
make
make install
</pre></div>


<p>This should leave us with a nice shared library at <code>/home/ec2_user/lambda/local/lib/libgdal.so.1</code> that can be safely
moved to another AWS Linux box.</p>
<h2>Create a virtualenv</h2>
<p>Pretty straighforward but keep in mind that some of the dependecies here are compiled extensions so these builds are platform-specific - which is why we need to build it on the target Amazon Linux OS.</p>
<div class="highlight"><pre>virtualenv env
source env/bin/activate
export GDAL_CONFIG=/home/ec2-user/lambda/local/bin/gdal-config
pip install rasterio
</pre></div>


<h2>Python handler function</h2>
<p>The handler's job is to respond to the event (e.g. a new file created in an S3 bucket), perform any amazon-specific tasks (like
fetching data from s3) and invoke the worker. Importantly, in the context of this article, the handler
must set the <code>LD_LIBRARY_PATH</code> to point to any shared libraries that the worker may need.</p>
<div class="highlight"><pre><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">subprocess</span>
<span class="kn">import</span> <span class="nn">uuid</span>
<span class="kn">import</span> <span class="nn">boto3</span>

<span class="n">libdir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span> <span class="s">&#39;local&#39;</span><span class="p">,</span> <span class="s">&#39;lib&#39;</span><span class="p">)</span>
<span class="n">s3_client</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">client</span><span class="p">(</span><span class="s">&#39;s3&#39;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">handler</span><span class="p">(</span><span class="n">event</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
    <span class="n">results</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">record</span> <span class="ow">in</span> <span class="n">event</span><span class="p">[</span><span class="s">&#39;Records&#39;</span><span class="p">]:</span>

        <span class="c"># Find input/output buckets and key names</span>
        <span class="n">bucket</span> <span class="o">=</span> <span class="n">record</span><span class="p">[</span><span class="s">&#39;s3&#39;</span><span class="p">][</span><span class="s">&#39;bucket&#39;</span><span class="p">][</span><span class="s">&#39;name&#39;</span><span class="p">]</span>
        <span class="n">output_bucket</span> <span class="o">=</span> <span class="s">&quot;{}.geojson&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">bucket</span><span class="p">)</span>
        <span class="n">key</span> <span class="o">=</span> <span class="n">record</span><span class="p">[</span><span class="s">&#39;s3&#39;</span><span class="p">][</span><span class="s">&#39;object&#39;</span><span class="p">][</span><span class="s">&#39;key&#39;</span><span class="p">]</span>
        <span class="n">output_key</span> <span class="o">=</span> <span class="s">&quot;{}.geojson&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>

        <span class="c"># Download the raster locally</span>
        <span class="n">download_path</span> <span class="o">=</span> <span class="s">&#39;/tmp/{}{}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">uuid</span><span class="o">.</span><span class="n">uuid4</span><span class="p">(),</span> <span class="n">key</span><span class="p">)</span>
        <span class="n">s3_client</span><span class="o">.</span><span class="n">download_file</span><span class="p">(</span><span class="n">bucket</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">download_path</span><span class="p">)</span>

        <span class="c"># Call the worker, setting the environment variables</span>
        <span class="n">command</span> <span class="o">=</span> <span class="s">&#39;LD_LIBRARY_PATH={} python worker.py &quot;{}&quot;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">libdir</span><span class="p">,</span> <span class="n">download_path</span><span class="p">)</span>
        <span class="n">output_path</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">check_output</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

        <span class="c"># Upload the output of the worker to S3</span>
        <span class="n">s3_client</span><span class="o">.</span><span class="n">upload_file</span><span class="p">(</span><span class="n">output_path</span><span class="o">.</span><span class="n">strip</span><span class="p">(),</span> <span class="n">output_bucket</span><span class="p">,</span> <span class="n">output_key</span><span class="p">)</span>
        <span class="n">results</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">output_path</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>

    <span class="k">return</span> <span class="n">results</span>
</pre></div>


<p>It's important that the handler function does not import any modules which require
dynamic linking. For example, you cannot <code>import rasterio</code> in the main python
handler since the dynamic linker doesn't yet know where to look for the GDAL shared library.
Your can control the linker paths using the <code>LD_LIBRARY_PATH</code> environment variable
but only <em>before</em> the process is started. Lambda doesn't give you any control over the environment variables
of the handler function itself.  I
tried hacks like creating new processes within the handler using <code>os.execv</code> or <code>multiprocessing</code> pools but the user running the lambda function
doesn't have the necessary permissions to that (both give you <code>OSErrors</code> - <code>[Errno 13] Permission Denied</code> and <code>[Errno 38] Function not implemented</code> respectively).</p>
<p>Fortunately, Lambda lets you call out to the shell so we can just do our real work through a worker script exposed as a command line interface (details in the next section). While at first this feels clunky, it has the side benefit of forcing separation of your AWS code from your business logic which can be written and tested separately.</p>
<h2>Worker</h2>
<p>The worker script can be written in any language, compiled or interpreted, so long as it follows the basic rules of command line interfaces. We're using Python in the handler to set up the appropriate environment. For this example, the worker will <em>also</em> be written in Python because of it's awesome support for geospatial data processing. But it could be written in Bash or C or just about anything so long as it's runtime environment can be configured with environment variables and arguments.</p>
<p>In this case, the handler is calling <code>worker.py</code> which looks like:</p>
<div class="highlight"><pre><span class="kn">import</span> <span class="nn">rasterio</span>
<span class="kn">from</span> <span class="nn">tempfile</span> <span class="kn">import</span> <span class="n">NamedTemporaryFile</span>
<span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">rasterio</span> <span class="kn">import</span> <span class="n">features</span>

<span class="k">def</span> <span class="nf">raster_shape</span><span class="p">(</span><span class="n">raster_path</span><span class="p">):</span>
    <span class="k">with</span> <span class="n">rasterio</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">raster_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">src</span><span class="p">:</span>

        <span class="c"># read the first band and create a binary mask</span>
        <span class="n">arr</span> <span class="o">=</span> <span class="n">src</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">ndv</span> <span class="o">=</span> <span class="n">src</span><span class="o">.</span><span class="n">nodata</span>
        <span class="n">binarray</span> <span class="o">=</span> <span class="p">(</span><span class="n">arr</span> <span class="o">==</span> <span class="n">ndv</span><span class="p">)</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="s">&#39;uint8&#39;</span><span class="p">)</span>

        <span class="c"># extract shapes from raster</span>
        <span class="n">shapes</span> <span class="o">=</span> <span class="n">features</span><span class="o">.</span><span class="n">shapes</span><span class="p">(</span><span class="n">binarray</span><span class="p">,</span> <span class="n">transform</span><span class="o">=</span><span class="n">src</span><span class="o">.</span><span class="n">transform</span><span class="p">)</span>

        <span class="c"># create geojson feature collection</span>
        <span class="n">fc</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="s">&#39;FeatureCollection&#39;</span><span class="p">,</span>
            <span class="s">&#39;features&#39;</span><span class="p">:</span> <span class="p">[]}</span>
        <span class="k">for</span> <span class="n">geom</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">shapes</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">val</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>  <span class="c"># not nodata, i.e. valid data</span>
                <span class="n">feature</span> <span class="o">=</span> <span class="p">{</span>
                    <span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="s">&#39;Feature&#39;</span><span class="p">,</span>
                    <span class="s">&#39;properties&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="n">raster_path</span><span class="p">},</span>
                    <span class="s">&#39;geometry&#39;</span><span class="p">:</span> <span class="n">geom</span><span class="p">}</span>
                <span class="n">fc</span><span class="p">[</span><span class="s">&#39;features&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>

        <span class="c"># Write to file</span>
        <span class="k">with</span> <span class="n">NamedTemporaryFile</span><span class="p">(</span><span class="n">suffix</span><span class="o">=</span><span class="s">&quot;.geojson&quot;</span><span class="p">,</span> <span class="n">delete</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span> <span class="k">as</span> <span class="n">temp</span><span class="p">:</span>
            <span class="n">temp</span><span class="o">.</span><span class="n">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">fc</span><span class="p">))</span>

        <span class="k">return</span> <span class="n">temp</span><span class="o">.</span><span class="n">name</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="n">in_path</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">out_path</span> <span class="o">=</span> <span class="n">raster_shape</span><span class="p">(</span><span class="n">in_path</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">out_path</span><span class="p">)</span>
</pre></div>


<p>Notice how the worker itself has no knowledge of AWS events or S3 - it works entirely on the local filesystem and thus can be used in other contexts and tested much more easily.</p>
<h2>Bundle</h2>
<p>In order to deploy to Lambda, you need to package it up in a zip file in a slightly unusual manner. All of your Python packages and your handler script should be at the root while the shared libraries can be put in a directory (<code>local/lib</code> in this case)</p>
<div class="highlight"><pre><span class="x">cd ~/lambda</span>

<span class="x">zip -9 bundle.zip handler.py</span>
<span class="x">zip -r9 bundle.zip worker.py</span>
<span class="x">zip -r9 bundle.zip local/lib/libgdal.so.1</span>

<span class="x">cd </span><span class="p">$</span><span class="nv">VIRTUAL_ENV</span><span class="x">/lib/python2.7/site-packages</span>
<span class="x">zip -r9 ~/lambda/bundle.zip *</span>
<span class="x">cd </span><span class="p">$</span><span class="nv">VIRTUAL_ENV</span><span class="x">/lib64/python2.7/site-packages</span>
<span class="x">zip -r9 ~/lambda/bundle.zip *</span>
</pre></div>


<h2>Publish</h2>
<p>The details of setting up a Lambda function are far too verbose for this article - I would suggest running through the <a href="http://docs.aws.amazon.com/lambda/latest/dg/python-walkthrough-s3-events-adminuser.html">AWS S3 walkthrough</a> to get the basic S3 example working first. Then use the AWS CLI to update your existing Lambda function:</p>
<div class="highlight"><pre><span class="nx">aws</span> <span class="nx">lambda</span> <span class="nx">update</span><span class="o">-</span><span class="kd">function</span><span class="o">-</span><span class="nx">code</span> <span class="o">\</span>
<span class="o">--</span><span class="kd">function</span><span class="o">-</span><span class="nx">name</span> <span class="nx">testfunc1</span> <span class="o">\</span>
<span class="o">--</span><span class="nx">zip</span><span class="o">-</span><span class="nx">file</span> <span class="nx">fileb</span><span class="o">:</span><span class="c1">//bundle.zip</span>
</pre></div>


<h1>The end result</h1>
<p>Uploading a raster dataset to your S3 bucket should now trigger the Lambda function which will create a new GeoJSON in the output bucket. All automatically invoked based on the S3 events and completely scalable without having to worry about managing or provisioning servers. Nifty!</p>
<p>The worker and handler code above are intentionally kept short to be more readable. In real usage they would need significantly more error handling and conditionals to handle edge cases, malformed inputs, etc.</p>
<p>It occured to me after writing this that there really is nothing Python-specific about this approach - the handler could just as easily have been written in Javascript and the worker in some other language. But this should provide a general approach for incorporating native code of any sort in AWS Lambda.</p>
<p>It remains to be seen if this approach is faster or cheaper than a queue-based system with autoscaled EC2 instances. If you're doing a constantly-high workload with lots of data, it's probably safe to say that Lambda is not appropriate. If you're doing sporadic workloads with some discrete processing task based on user-uploaded data, Lambda might be the ticket. The primary advantage is not necessarily speed or cost but reduced infrastructure complexity and hands-off autoscaling.</p>";}i:1;a:6:{s:5:"title";s:24:"Python affine transforms";s:4:"link";s:49:"http://perrygeo.com/python-affine-transforms.html";s:7:"updated";s:25:"2015-09-13T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:57:"tag:perrygeo.com,2015-09-13:python-affine-transforms.html";s:7:"summary";s:7460:"<p><em>Raster data coordinate handling with 6-element geotransforms is a pain. Use the <a href="https://github.com/sgillies/affine">affine</a> Python library instead.</em></p>
<p>The typical geospatial coordinate reference system is defined on a cartesian plane with the 0,0 origin in the bottom left and X and Y increasing as you go up and to the right. But raster data, coming from its image processing origins, uses a different referencing system to access pixels. We refer to rows and columns with the 0,0 origin in the upper left and rows increase and you move <em>down</em> while the columns increase as you go right. Still a cartesian plane but not the same one. 
<img alt="xyrowcol" src="/assets/img/xyrowcol.png" /></p>
<p>So how do you transform between the two? <a href="https://en.wikipedia.org/wiki/Transformation_matrix#Affine_transformations">Affine transformations</a> provide a simple way to do it through the use of matrix algebra. Geospatial software of all varieties use an affine transform (sometimes refered to as "geotransform") to go from raster rows/columns to the x/y of the coordinate reference system. Converting from x/y back to row/col uses the inverse of the affine transform. Of course the software implementations vary widely.</p>
<p>For the remainder, I'll assume the simple case of a non-rotated "north up" raster as that is by far the most common case. </p>
<p>If you're coming from the matrix algebra perspective, you can ignore the constants in the affine matrix and refer to the the six paramters as <code>a, b, c, d, e, f</code>. This is the ordering and notation used by the <a href="https://github.com/sgillies/affine">affine</a> Python library.</p>
<ul>
<li><strong>a</strong> = width of a pixel</li>
<li><strong>b</strong> = row rotation (typically zero)</li>
<li><strong>c</strong>  = x-coordinate of the upper-left corner of the upper-left pixel</li>
<li><strong>d</strong> = column rotation (typically zero)</li>
<li><strong>e</strong> = height of a pixel (typically negative)</li>
<li><strong>f</strong>  = y-coordinate of the of the upper-left corner of the upper-left pixel</li>
</ul>
<p>Perhaps the most pervasive implementation of affine transform encoding in the GIS world is the <a href="http://webhelp.esri.com/arcims/9.3/General/topics/author_world_files.htm">ESRI World File</a>. The world file is a simple text file accompanying any raster image which uses six line-separated values in this order:</p>
<ul>
<li><strong>a</strong>  = width of a pixel</li>
<li><strong>d</strong>  = column rotation (typically zero)</li>
<li><strong>b</strong>  = row rotation (typically zero)</li>
<li><strong>e</strong>  = height of a pixel (typically negative)</li>
<li><strong>c</strong>  = x-coordinate of the <em>center</em> of the upper-left pixel</li>
<li><strong>f</strong>  = y-coordinate of the <em>center</em> of the upper-left pixel</li>
</ul>
<p>It's important to note that the <strong>c</strong> and <strong>f</strong> parameters refer to the center of the cell, not the origin!</p>
<p>GDAL also uses the 6 parameter transform in yet a different order with the "Geotransform" array</p>
<ul>
<li><strong>c</strong>  = x-coordinate of the upper-left corner of the upper-left pixel</li>
<li><strong>a</strong>  = width of a pixel</li>
<li><strong>b</strong>  = row rotation (typically zero)</li>
<li><strong>f</strong>  = y-coordinate of the of the upper-left corner of the upper-left pixel</li>
<li><strong>d</strong>  = column rotation (typically zero)</li>
<li><strong>e</strong>  = height of a pixel (typically negative)</li>
</ul>
<p>None of those orderings are particularly intutive but at least the first, as implemented by <code>affine</code>, is "correct" from the matrix algebra perspective. </p>
<p>For python programmers looking to work with raster data, the <code>osgeo.gdal</code> library has existed for quite a while. With it the notion of a 6-tuple geotransform in GDAL ordering has become pervasive. And if ordering were the only issue, it wouldn't necessarily be worth switching to the use of the <code>affine</code> library. The more convincing argument for the use of <code>affine</code> is the ease with which you can transform coordinates. In other words, why should you have to worry about ordering of parameters at all?</p>
<p>When dealing with the geotransform as a simple 6-element tuple, you'll probably end up writing code like this to do the actual conversion: </p>
<div class="highlight"><pre># Using osgeo.gdal and GDAL geotransform 6-tuples
gt = ds.GetGeoTransform()

# col, row to x, y
x = (col * gt[1]) + gt[0]
y = (row * gt[5]) + gt[3]

# x,y to col,row
col = int((x - gt[0]) / gt[1]) 
row = int((y - gt[3]) / gt[5])
</pre></div>


<p>I'd be willing to guess that variations of that formula exist in hundreds of python codebases. Not very complicated math but opaque enough not to commit to memory. It's also very easy to slip up ("Is the y origin element 4 or 5?") and introduce non-obvious bugs. Why should such a basic formulation be reimplemented by every programmer? Again, why rely on element ordering at all? <code>affine</code>, through the use of clever operation overloading, gives you a much simpler interface:</p>
<div class="highlight"><pre># Using rasterio and affine
a = ds.affine

# col, row to x, y
x, y = a * (col, row)

# x, y to col, row
col, row = ~a * (x, y)
</pre></div>


<p>Clean, nice looking code that's harder to get wrong, wouldn't you agree? And as @Asgerpetersen <a href="https://twitter.com/perrygeo/status/643156086229331968">pointed out</a>, if there were a non-zero rotation parameter, the affine example would handle it seamlessly while the geotransform formula would fail. </p>
<p>Also, interoperability with GDAL-style geotransforms is painless</p>
<div class="highlight"><pre># construct from our GDAL geotransform
a = Affine.from_gdal(*gt)
gt = a.to_gdal()
</pre></div>


<p>As is the ability to read/write from World Files</p>
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">affine</span> <span class="kn">import</span> <span class="n">loadsw</span><span class="p">,</span> <span class="n">dumpsw</span>

<span class="c"># Read from World File</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;raster.tfw&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">tfw</span><span class="p">:</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">loadsw</span><span class="p">(</span><span class="n">tfw</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>

<span class="c"># Write to World File</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;other.wld&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">dest</span><span class="p">:</span>
    <span class="n">dest</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">dumpsw</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
</pre></div>


<p>With <a href="https://github.com/mapbox/rasterio">rasterio</a> planning to deprecate the use of GDAL-style geotransforms in the 1.0 release, it's never too early to start making the switch. Your cleaner raster coordinate code will be well worth the effort. </p>";}i:2;a:6:{s:5:"title";s:54:"Parallelizing numpy array loops with Cython and OpenMP";s:4:"link";s:76:"http://perrygeo.com/parallelizing-numpy-array-loops-with-cython-and-mpi.html";s:7:"updated";s:25:"2015-08-23T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:84:"tag:perrygeo.com,2015-08-23:parallelizing-numpy-array-loops-with-cython-and-mpi.html";s:7:"summary";s:149068:"<p>In this article, I'll walk through a basic example of a <code>numpy</code> array processing function in Python and a few tricks to speed up the computationally intensive loops in parallel using Cython's OpenMP support. 
threading,
An important advantage to this technique is that the parallelism has no impact on the function signature and very little impact on the readability of the algorithm itself as compared to other techniques such as multiprocessing, asyncio, and thread pools which force you to interweave your logic with thread/process management code.</p>
<h2>Software versions and platform</h2>
<p>The software I used for this demonstration includes:</p>
<ul>
<li><code>numpy 1.8.2</code></li>
<li><code>Cython 0.22</code></li>
<li><code>Python 3.4</code></li>
</ul>
<p>Unfortunately for OS X users, <code>clang</code> doesn't support openmp yet (<a href="http://openmp.org/wp/2015/08/clang-37-will-have-full-openmp-31-support/">coming soon</a>) so for now, if you want to use this technique you'll probably want to do it on a Linux box or a system with a GNU <code>gcc</code> compiler. I'm using Ubuntu 14.04LTS 64 bit in VirtualBox with this <a href="https://gist.github.com/perrygeo/6cf214425d83eb52d8f7#file-vagrantfile">Vagrantfile</a></p>
<h2>Basic Python Loop</h2>
<p>We'll start our function in pure python so we can get a starting benchmark. Let's assume a 2D array of double-precision numbers:</p>
<div class="highlight"><pre><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
<span class="n">indata</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">1400</span><span class="p">,</span><span class="mi">1600</span><span class="p">)</span>
</pre></div>


<p>And we'll also need to create an array to hold the output values (why edit in place instead of returning an array? Later when we start writing functions that compile to C, we don't want to be constructing python objects)</p>
<div class="highlight"><pre><span class="n">outdata</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">indata</span><span class="o">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="s">&#39;float64&#39;</span><span class="p">)</span>  <span class="c"># eventually holds our output</span>
</pre></div>


<p>The processing function itself is not the main focus of this but a few details should be explained. We'll be using a 3x3 moving window to write our own kernel, a common operation in image processing and raster geospatial data analysis. As such we'll want to pad the edges of the input array.</p>
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">numpy.lib</span> <span class="kn">import</span> <span class="n">pad</span>
<span class="k">print</span><span class="p">(</span><span class="s">&quot;shape before&quot;</span><span class="p">,</span> <span class="n">indata</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
<span class="n">indata</span> <span class="o">=</span> <span class="n">pad</span><span class="p">(</span><span class="n">indata</span><span class="p">,</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="s">&#39;reflect&#39;</span><span class="p">,</span> <span class="n">reflect_type</span><span class="o">=</span><span class="s">&#39;odd&#39;</span><span class="p">)</span>  <span class="c"># allow edge calcs</span>
<span class="k">print</span><span class="p">(</span><span class="s">&quot;shape after&quot;</span><span class="p">,</span> <span class="n">indata</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
</pre></div>


<div class="highlight"><pre>shape before (1400, 1600)
shape after (1402, 1602)
</pre></div>


<p>Our 2D input array simulates as digital elevation model (DEM), a regular grid of elevation values from which we can derive many useful parameters. Our function will calculate the slope of the landscape at each 3x3 window using the <a href="http://solim.geography.wisc.edu/axing/teaching/geog579/lectures/references/ZevenbergenAndThorne_DigitalTerrain_EarthSurfaceProcesses1987.pdf">Zevenbergen-Thorne method</a></p>
<p><img height="66%" width="66%" src="assets/img/zt.png"></p>
<p>The details of the slope calculation are another topic. For the purposes of this notebook it merely demonstrates a sufficiently cpu-intensive array loop that we can make faster.</p>
<div class="highlight"><pre><span class="kn">import</span> <span class="nn">math</span>
<span class="k">def</span> <span class="nf">slope</span><span class="p">(</span><span class="n">indata</span><span class="p">,</span> <span class="n">outdata</span><span class="p">):</span>
    <span class="n">I</span> <span class="o">=</span> <span class="n">outdata</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">J</span> <span class="o">=</span> <span class="n">outdata</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">I</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">J</span><span class="p">):</span>
            <span class="c"># percent slope using Zevenbergen-Thorne method</span>
            <span class="c"># assume edges added, inarr is offset by one on both axes cmp to outarr</span>
            <span class="n">dzdx</span> <span class="o">=</span> <span class="p">(</span><span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">2</span><span class="p">])</span> <span class="o">/</span> <span class="mi">2</span>  <span class="c"># assume cellsize == one unit, otherwise (2 * cellsize)</span>
            <span class="n">dzdy</span> <span class="o">=</span> <span class="p">(</span><span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="o">/</span> <span class="mi">2</span>
            <span class="n">slp</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">((</span><span class="n">dzdx</span> <span class="o">*</span> <span class="n">dzdx</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">dzdy</span> <span class="o">*</span> <span class="n">dzdy</span><span class="p">))</span> <span class="o">*</span> <span class="mi">100</span>  <span class="c"># percent slope (take math.atan to get angle)</span>
            <span class="n">outdata</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">slp</span>
</pre></div>


<p>Pure python benchmark (python is not good at loops)</p>
<div class="highlight"><pre><span class="o">%</span><span class="n">timeit</span> <span class="n">slope</span><span class="p">(</span><span class="n">indata</span><span class="p">,</span> <span class="n">outdata</span><span class="p">)</span>
</pre></div>


<div class="highlight"><pre>1 loops, best of 3: 8.87 s per loop
</pre></div>


<p>And because <code>outdata</code> was altered in place we'll need to reset it</p>
<div class="highlight"><pre><span class="k">def</span> <span class="nf">reset_outdata</span><span class="p">():</span>
    <span class="n">outdata</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">indata</span><span class="o">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="s">&#39;float64&#39;</span><span class="p">)</span>

<span class="n">reset_outdata</span><span class="p">()</span>
</pre></div>


<h2>Cython</h2>
<p>Cython provides a big win here, compiling code that looks almost like the original Python code into a native extension. Python with C speed.</p>
<div class="highlight"><pre><span class="o">%</span><span class="n">load_ext</span> <span class="n">Cython</span>
</pre></div>


<div class="highlight"><pre><span class="o">%%</span><span class="n">cython</span> <span class="o">-</span><span class="n">a</span>

<span class="kn">import</span> <span class="nn">math</span>

<span class="k">def</span> <span class="nf">slope_cython1</span><span class="p">(</span><span class="n">indata</span><span class="p">,</span> <span class="n">outdata</span><span class="p">):</span>
    <span class="n">I</span> <span class="o">=</span> <span class="n">outdata</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">J</span> <span class="o">=</span> <span class="n">outdata</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">I</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">J</span><span class="p">):</span>
            <span class="n">dzdx</span> <span class="o">=</span> <span class="p">(</span><span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">2</span><span class="p">])</span> <span class="o">/</span> <span class="mi">2</span>
            <span class="n">dzdy</span> <span class="o">=</span> <span class="p">(</span><span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="o">/</span> <span class="mi">2</span>
            <span class="n">slp</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">((</span><span class="n">dzdx</span> <span class="o">*</span> <span class="n">dzdx</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">dzdy</span> <span class="o">*</span> <span class="n">dzdy</span><span class="p">))</span> <span class="o">*</span> <span class="mi">100</span>
            <span class="n">outdata</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">slp</span>
</pre></div>


<!DOCTYPE html>
<!-- Generated by Cython 0.22 -->
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <style type="text/css">

<p>body.cython { font-family: courier; font-size: 12; }</p>
<p>.cython.tag  {  }
.cython.line { margin: 0em }
pre.cython { padding: 0px; border: 0;}
.cython.code  { font-size: 9; color: #444444; display: none; margin: 0px 0px 0px 2px;  }</p>
<p>.cython.code .py_c_api  { color: red; }
.cython.code .py_macro_api  { color: #FF7000; }
.cython.code .pyx_c_api  { color: #FF3000; }
.cython.code .pyx_macro_api  { color: #FF7000; }
.cython.code .refnanny  { color: #FFA000; }
.cython.code .error_goto  { color: #FFA000; }</p>
<p>.cython.code .coerce  { color: #008000; border: 1px dotted #008000 }
.cython.code .py_attr { color: #FF0000; font-weight: bold; }
.cython.code .c_attr  { color: #0000FF; }
.cython.code .py_call { color: #FF0000; font-weight: bold; }
.cython.code .c_call  { color: #0000FF; }</p>
<p>.cython.score-0 {background-color: #FFFFff;}
.cython.score-1 {background-color: #FFFFe7;}
.cython.score-2 {background-color: #FFFFd4;}
.cython.score-3 {background-color: #FFFFc4;}
.cython.score-4 {background-color: #FFFFb6;}
.cython.score-5 {background-color: #FFFFaa;}
.cython.score-6 {background-color: #FFFF9f;}
.cython.score-7 {background-color: #FFFF96;}
.cython.score-8 {background-color: #FFFF8d;}
.cython.score-9 {background-color: #FFFF86;}
.cython.score-10 {background-color: #FFFF7f;}
.cython.score-11 {background-color: #FFFF79;}
.cython.score-12 {background-color: #FFFF73;}
.cython.score-13 {background-color: #FFFF6e;}
.cython.score-14 {background-color: #FFFF6a;}
.cython.score-15 {background-color: #FFFF66;}
.cython.score-16 {background-color: #FFFF62;}
.cython.score-17 {background-color: #FFFF5e;}
.cython.score-18 {background-color: #FFFF5b;}
.cython.score-19 {background-color: #FFFF57;}
.cython.score-20 {background-color: #FFFF55;}
.cython.score-21 {background-color: #FFFF52;}
.cython.score-22 {background-color: #FFFF4f;}
.cython.score-23 {background-color: #FFFF4d;}
.cython.score-24 {background-color: #FFFF4b;}
.cython.score-25 {background-color: #FFFF48;}
.cython.score-26 {background-color: #FFFF46;}
.cython.score-27 {background-color: #FFFF44;}
.cython.score-28 {background-color: #FFFF43;}
.cython.score-29 {background-color: #FFFF41;}
.cython.score-30 {background-color: #FFFF3f;}
.cython.score-31 {background-color: #FFFF3e;}
.cython.score-32 {background-color: #FFFF3c;}
.cython.score-33 {background-color: #FFFF3b;}
.cython.score-34 {background-color: #FFFF39;}
.cython.score-35 {background-color: #FFFF38;}
.cython.score-36 {background-color: #FFFF37;}
.cython.score-37 {background-color: #FFFF36;}
.cython.score-38 {background-color: #FFFF35;}
.cython.score-39 {background-color: #FFFF34;}
.cython.score-40 {background-color: #FFFF33;}
.cython.score-41 {background-color: #FFFF32;}
.cython.score-42 {background-color: #FFFF31;}
.cython.score-43 {background-color: #FFFF30;}
.cython.score-44 {background-color: #FFFF2f;}
.cython.score-45 {background-color: #FFFF2e;}
.cython.score-46 {background-color: #FFFF2d;}
.cython.score-47 {background-color: #FFFF2c;}
.cython.score-48 {background-color: #FFFF2b;}
.cython.score-49 {background-color: #FFFF2b;}
.cython.score-50 {background-color: #FFFF2a;}
.cython.score-51 {background-color: #FFFF29;}
.cython.score-52 {background-color: #FFFF29;}
.cython.score-53 {background-color: #FFFF28;}
.cython.score-54 {background-color: #FFFF27;}
.cython.score-55 {background-color: #FFFF27;}
.cython.score-56 {background-color: #FFFF26;}
.cython.score-57 {background-color: #FFFF26;}
.cython.score-58 {background-color: #FFFF25;}
.cython.score-59 {background-color: #FFFF24;}
.cython.score-60 {background-color: #FFFF24;}
.cython.score-61 {background-color: #FFFF23;}
.cython.score-62 {background-color: #FFFF23;}
.cython.score-63 {background-color: #FFFF22;}
.cython.score-64 {background-color: #FFFF22;}
.cython.score-65 {background-color: #FFFF22;}
.cython.score-66 {background-color: #FFFF21;}
.cython.score-67 {background-color: #FFFF21;}
.cython.score-68 {background-color: #FFFF20;}
.cython.score-69 {background-color: #FFFF20;}
.cython.score-70 {background-color: #FFFF1f;}
.cython.score-71 {background-color: #FFFF1f;}
.cython.score-72 {background-color: #FFFF1f;}
.cython.score-73 {background-color: #FFFF1e;}
.cython.score-74 {background-color: #FFFF1e;}
.cython.score-75 {background-color: #FFFF1e;}
.cython.score-76 {background-color: #FFFF1d;}
.cython.score-77 {background-color: #FFFF1d;}
.cython.score-78 {background-color: #FFFF1c;}
.cython.score-79 {background-color: #FFFF1c;}
.cython.score-80 {background-color: #FFFF1c;}
.cython.score-81 {background-color: #FFFF1c;}
.cython.score-82 {background-color: #FFFF1b;}
.cython.score-83 {background-color: #FFFF1b;}
.cython.score-84 {background-color: #FFFF1b;}
.cython.score-85 {background-color: #FFFF1a;}
.cython.score-86 {background-color: #FFFF1a;}
.cython.score-87 {background-color: #FFFF1a;}
.cython.score-88 {background-color: #FFFF1a;}
.cython.score-89 {background-color: #FFFF19;}
.cython.score-90 {background-color: #FFFF19;}
.cython.score-91 {background-color: #FFFF19;}
.cython.score-92 {background-color: #FFFF19;}
.cython.score-93 {background-color: #FFFF18;}
.cython.score-94 {background-color: #FFFF18;}
.cython.score-95 {background-color: #FFFF18;}
.cython.score-96 {background-color: #FFFF18;}
.cython.score-97 {background-color: #FFFF17;}
.cython.score-98 {background-color: #FFFF17;}
.cython.score-99 {background-color: #FFFF17;}
.cython.score-100 {background-color: #FFFF17;}
.cython.score-101 {background-color: #FFFF16;}
.cython.score-102 {background-color: #FFFF16;}
.cython.score-103 {background-color: #FFFF16;}
.cython.score-104 {background-color: #FFFF16;}
.cython.score-105 {background-color: #FFFF16;}
.cython.score-106 {background-color: #FFFF15;}
.cython.score-107 {background-color: #FFFF15;}
.cython.score-108 {background-color: #FFFF15;}
.cython.score-109 {background-color: #FFFF15;}
.cython.score-110 {background-color: #FFFF15;}
.cython.score-111 {background-color: #FFFF15;}
.cython.score-112 {background-color: #FFFF14;}
.cython.score-113 {background-color: #FFFF14;}
.cython.score-114 {background-color: #FFFF14;}
.cython.score-115 {background-color: #FFFF14;}
.cython.score-116 {background-color: #FFFF14;}
.cython.score-117 {background-color: #FFFF14;}
.cython.score-118 {background-color: #FFFF13;}
.cython.score-119 {background-color: #FFFF13;}
.cython.score-120 {background-color: #FFFF13;}
.cython.score-121 {background-color: #FFFF13;}
.cython.score-122 {background-color: #FFFF13;}
.cython.score-123 {background-color: #FFFF13;}
.cython.score-124 {background-color: #FFFF13;}
.cython.score-125 {background-color: #FFFF12;}
.cython.score-126 {background-color: #FFFF12;}
.cython.score-127 {background-color: #FFFF12;}
.cython.score-128 {background-color: #FFFF12;}
.cython.score-129 {background-color: #FFFF12;}
.cython.score-130 {background-color: #FFFF12;}
.cython.score-131 {background-color: #FFFF12;}
.cython.score-132 {background-color: #FFFF11;}
.cython.score-133 {background-color: #FFFF11;}
.cython.score-134 {background-color: #FFFF11;}
.cython.score-135 {background-color: #FFFF11;}
.cython.score-136 {background-color: #FFFF11;}
.cython.score-137 {background-color: #FFFF11;}
.cython.score-138 {background-color: #FFFF11;}
.cython.score-139 {background-color: #FFFF11;}
.cython.score-140 {background-color: #FFFF11;}
.cython.score-141 {background-color: #FFFF10;}
.cython.score-142 {background-color: #FFFF10;}
.cython.score-143 {background-color: #FFFF10;}
.cython.score-144 {background-color: #FFFF10;}
.cython.score-145 {background-color: #FFFF10;}
.cython.score-146 {background-color: #FFFF10;}
.cython.score-147 {background-color: #FFFF10;}
.cython.score-148 {background-color: #FFFF10;}
.cython.score-149 {background-color: #FFFF10;}
.cython.score-150 {background-color: #FFFF0f;}
.cython.score-151 {background-color: #FFFF0f;}
.cython.score-152 {background-color: #FFFF0f;}
.cython.score-153 {background-color: #FFFF0f;}
.cython.score-154 {background-color: #FFFF0f;}
.cython.score-155 {background-color: #FFFF0f;}
.cython.score-156 {background-color: #FFFF0f;}
.cython.score-157 {background-color: #FFFF0f;}
.cython.score-158 {background-color: #FFFF0f;}
.cython.score-159 {background-color: #FFFF0f;}
.cython.score-160 {background-color: #FFFF0f;}
.cython.score-161 {background-color: #FFFF0e;}
.cython.score-162 {background-color: #FFFF0e;}
.cython.score-163 {background-color: #FFFF0e;}
.cython.score-164 {background-color: #FFFF0e;}
.cython.score-165 {background-color: #FFFF0e;}
.cython.score-166 {background-color: #FFFF0e;}
.cython.score-167 {background-color: #FFFF0e;}
.cython.score-168 {background-color: #FFFF0e;}
.cython.score-169 {background-color: #FFFF0e;}
.cython.score-170 {background-color: #FFFF0e;}
.cython.score-171 {background-color: #FFFF0e;}
.cython.score-172 {background-color: #FFFF0e;}
.cython.score-173 {background-color: #FFFF0d;}
.cython.score-174 {background-color: #FFFF0d;}
.cython.score-175 {background-color: #FFFF0d;}
.cython.score-176 {background-color: #FFFF0d;}
.cython.score-177 {background-color: #FFFF0d;}
.cython.score-178 {background-color: #FFFF0d;}
.cython.score-179 {background-color: #FFFF0d;}
.cython.score-180 {background-color: #FFFF0d;}
.cython.score-181 {background-color: #FFFF0d;}
.cython.score-182 {background-color: #FFFF0d;}
.cython.score-183 {background-color: #FFFF0d;}
.cython.score-184 {background-color: #FFFF0d;}
.cython.score-185 {background-color: #FFFF0d;}
.cython.score-186 {background-color: #FFFF0d;}
.cython.score-187 {background-color: #FFFF0c;}
.cython.score-188 {background-color: #FFFF0c;}
.cython.score-189 {background-color: #FFFF0c;}
.cython.score-190 {background-color: #FFFF0c;}
.cython.score-191 {background-color: #FFFF0c;}
.cython.score-192 {background-color: #FFFF0c;}
.cython.score-193 {background-color: #FFFF0c;}
.cython.score-194 {background-color: #FFFF0c;}
.cython.score-195 {background-color: #FFFF0c;}
.cython.score-196 {background-color: #FFFF0c;}
.cython.score-197 {background-color: #FFFF0c;}
.cython.score-198 {background-color: #FFFF0c;}
.cython.score-199 {background-color: #FFFF0c;}
.cython.score-200 {background-color: #FFFF0c;}
.cython.score-201 {background-color: #FFFF0c;}
.cython.score-202 {background-color: #FFFF0c;}
.cython.score-203 {background-color: #FFFF0b;}
.cython.score-204 {background-color: #FFFF0b;}
.cython.score-205 {background-color: #FFFF0b;}
.cython.score-206 {background-color: #FFFF0b;}
.cython.score-207 {background-color: #FFFF0b;}
.cython.score-208 {background-color: #FFFF0b;}
.cython.score-209 {background-color: #FFFF0b;}
.cython.score-210 {background-color: #FFFF0b;}
.cython.score-211 {background-color: #FFFF0b;}
.cython.score-212 {background-color: #FFFF0b;}
.cython.score-213 {background-color: #FFFF0b;}
.cython.score-214 {background-color: #FFFF0b;}
.cython.score-215 {background-color: #FFFF0b;}
.cython.score-216 {background-color: #FFFF0b;}
.cython.score-217 {background-color: #FFFF0b;}
.cython.score-218 {background-color: #FFFF0b;}
.cython.score-219 {background-color: #FFFF0b;}
.cython.score-220 {background-color: #FFFF0b;}
.cython.score-221 {background-color: #FFFF0b;}
.cython.score-222 {background-color: #FFFF0a;}
.cython.score-223 {background-color: #FFFF0a;}
.cython.score-224 {background-color: #FFFF0a;}
.cython.score-225 {background-color: #FFFF0a;}
.cython.score-226 {background-color: #FFFF0a;}
.cython.score-227 {background-color: #FFFF0a;}
.cython.score-228 {background-color: #FFFF0a;}
.cython.score-229 {background-color: #FFFF0a;}
.cython.score-230 {background-color: #FFFF0a;}
.cython.score-231 {background-color: #FFFF0a;}
.cython.score-232 {background-color: #FFFF0a;}
.cython.score-233 {background-color: #FFFF0a;}
.cython.score-234 {background-color: #FFFF0a;}
.cython.score-235 {background-color: #FFFF0a;}
.cython.score-236 {background-color: #FFFF0a;}
.cython.score-237 {background-color: #FFFF0a;}
.cython.score-238 {background-color: #FFFF0a;}
.cython.score-239 {background-color: #FFFF0a;}
.cython.score-240 {background-color: #FFFF0a;}
.cython.score-241 {background-color: #FFFF0a;}
.cython.score-242 {background-color: #FFFF0a;}
.cython.score-243 {background-color: #FFFF0a;}
.cython.score-244 {background-color: #FFFF0a;}
.cython.score-245 {background-color: #FFFF0a;}
.cython.score-246 {background-color: #FFFF09;}
.cython.score-247 {background-color: #FFFF09;}
.cython.score-248 {background-color: #FFFF09;}
.cython.score-249 {background-color: #FFFF09;}
.cython.score-250 {background-color: #FFFF09;}
.cython.score-251 {background-color: #FFFF09;}
.cython.score-252 {background-color: #FFFF09;}
.cython.score-253 {background-color: #FFFF09;}
.cython.score-254 {background-color: #FFFF09;}.cython .hll { background-color: #ffffcc }
.cython  { background: #f8f8f8; }
.cython .c { color: #408080; font-style: italic } /<em> Comment </em>/
.cython .err { border: 1px solid #FF0000 } /<em> Error </em>/
.cython .k { color: #008000; font-weight: bold } /<em> Keyword </em>/
.cython .o { color: #666666 } /<em> Operator </em>/
.cython .cm { color: #408080; font-style: italic } /<em> Comment.Multiline </em>/
.cython .cp { color: #BC7A00 } /<em> Comment.Preproc </em>/
.cython .c1 { color: #408080; font-style: italic } /<em> Comment.Single </em>/
.cython .cs { color: #408080; font-style: italic } /<em> Comment.Special </em>/
.cython .gd { color: #A00000 } /<em> Generic.Deleted </em>/
.cython .ge { font-style: italic } /<em> Generic.Emph </em>/
.cython .gr { color: #FF0000 } /<em> Generic.Error </em>/
.cython .gh { color: #000080; font-weight: bold } /<em> Generic.Heading </em>/
.cython .gi { color: #00A000 } /<em> Generic.Inserted </em>/
.cython .go { color: #888888 } /<em> Generic.Output </em>/
.cython .gp { color: #000080; font-weight: bold } /<em> Generic.Prompt </em>/
.cython .gs { font-weight: bold } /<em> Generic.Strong </em>/
.cython .gu { color: #800080; font-weight: bold } /<em> Generic.Subheading </em>/
.cython .gt { color: #0044DD } /<em> Generic.Traceback </em>/
.cython .kc { color: #008000; font-weight: bold } /<em> Keyword.Constant </em>/
.cython .kd { color: #008000; font-weight: bold } /<em> Keyword.Declaration </em>/
.cython .kn { color: #008000; font-weight: bold } /<em> Keyword.Namespace </em>/
.cython .kp { color: #008000 } /<em> Keyword.Pseudo </em>/
.cython .kr { color: #008000; font-weight: bold } /<em> Keyword.Reserved </em>/
.cython .kt { color: #B00040 } /<em> Keyword.Type </em>/
.cython .m { color: #666666 } /<em> Literal.Number </em>/
.cython .s { color: #BA2121 } /<em> Literal.String </em>/
.cython .na { color: #7D9029 } /<em> Name.Attribute </em>/
.cython .nb { color: #008000 } /<em> Name.Builtin </em>/
.cython .nc { color: #0000FF; font-weight: bold } /<em> Name.Class </em>/
.cython .no { color: #880000 } /<em> Name.Constant </em>/
.cython .nd { color: #AA22FF } /<em> Name.Decorator </em>/
.cython .ni { color: #999999; font-weight: bold } /<em> Name.Entity </em>/
.cython .ne { color: #D2413A; font-weight: bold } /<em> Name.Exception </em>/
.cython .nf { color: #0000FF } /<em> Name.Function </em>/
.cython .nl { color: #A0A000 } /<em> Name.Label </em>/
.cython .nn { color: #0000FF; font-weight: bold } /<em> Name.Namespace </em>/
.cython .nt { color: #008000; font-weight: bold } /<em> Name.Tag </em>/
.cython .nv { color: #19177C } /<em> Name.Variable </em>/
.cython .ow { color: #AA22FF; font-weight: bold } /<em> Operator.Word </em>/
.cython .w { color: #bbbbbb } /<em> Text.Whitespace </em>/
.cython .mb { color: #666666 } /<em> Literal.Number.Bin </em>/
.cython .mf { color: #666666 } /<em> Literal.Number.Float </em>/
.cython .mh { color: #666666 } /<em> Literal.Number.Hex </em>/
.cython .mi { color: #666666 } /<em> Literal.Number.Integer </em>/
.cython .mo { color: #666666 } /<em> Literal.Number.Oct </em>/
.cython .sb { color: #BA2121 } /<em> Literal.String.Backtick </em>/
.cython .sc { color: #BA2121 } /<em> Literal.String.Char </em>/
.cython .sd { color: #BA2121; font-style: italic } /<em> Literal.String.Doc </em>/
.cython .s2 { color: #BA2121 } /<em> Literal.String.Double </em>/
.cython .se { color: #BB6622; font-weight: bold } /<em> Literal.String.Escape </em>/
.cython .sh { color: #BA2121 } /<em> Literal.String.Heredoc </em>/
.cython .si { color: #BB6688; font-weight: bold } /<em> Literal.String.Interpol </em>/
.cython .sx { color: #008000 } /<em> Literal.String.Other </em>/
.cython .sr { color: #BB6688 } /<em> Literal.String.Regex </em>/
.cython .s1 { color: #BA2121 } /<em> Literal.String.Single </em>/
.cython .ss { color: #19177C } /<em> Literal.String.Symbol </em>/
.cython .bp { color: #008000 } /<em> Name.Builtin.Pseudo </em>/
.cython .vc { color: #19177C } /<em> Name.Variable.Class </em>/
.cython .vg { color: #19177C } /<em> Name.Variable.Global </em>/
.cython .vi { color: #19177C } /<em> Name.Variable.Instance </em>/
.cython .il { color: #666666 } /<em> Literal.Number.Integer.Long </em>/
    </style>
    <script>
    function toggleDiv(id) {
        theDiv = id.nextElementSibling
        if (theDiv.style.display != 'block') theDiv.style.display = 'block';
        else theDiv.style.display = 'none';
    }
    </script>
</head>
<body class="cython">
<p>Generated by Cython 0.22</p>
<div class="cython"><pre class='cython line score-0'>&#xA0;01: </pre>
<pre class='cython line score-8' onclick='toggleDiv(this)'>+02: <span class="k">import</span> <span class="nn">math</span></pre>
<pre class='cython code score-8'>  <strong>pyx_t_1 = <span class='pyx_c_api'>__Pyx_Import</span>(__pyx_n_s_math, 0, -1);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
  <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
  if (<span class='py_c_api'>PyDict_SetItem</span>(__pyx_d, __pyx_n_s_math, __pyx_t_1) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
  <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
</pre><pre class='cython line score-0'>&#xA0;03: </pre>
<pre class='cython line score-58' onclick='toggleDiv(this)'>+04: <span class="k">def</span> <span class="nf">slope_cython1</span><span class="p">(</span><span class="n">indata</span><span class="p">,</span> <span class="n">outdata</span><span class="p">):</span></pre>
<pre class='cython code score-58'>/<em> Python wrapper </em>/
static PyObject <em>__pyx_pw_46_cython_magic_5ce0ea3363e793331bdc8fd26ebbeb92_1slope_cython1(PyObject </em>__pyx_self, PyObject <em>__pyx_args, PyObject </em>__pyx_kwds); /<em>proto</em>/
static PyMethodDef __pyx_mdef_46_cython_magic_5ce0ea3363e793331bdc8fd26ebbeb92_1slope_cython1 = {"slope_cython1", (PyCFunction)__pyx_pw_46_cython_magic_5ce0ea3363e793331bdc8fd26ebbeb92_1slope_cython1, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject <em>__pyx_pw_46_cython_magic_5ce0ea3363e793331bdc8fd26ebbeb92_1slope_cython1(PyObject </em>__pyx_self, PyObject <em>__pyx_args, PyObject </em>__pyx_kwds) {
  PyObject <em>__pyx_v_indata = 0;
  PyObject </em>__pyx_v_outdata = 0;
  PyObject <em>__pyx_r = 0;
  <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
  <span class='refnanny'>__Pyx_RefNannySetupContext</span>("slope_cython1 (wrapper)", 0);
  {
    static PyObject </em><em>__pyx_pyargnames[] = {&amp;__pyx_n_s_indata,&amp;__pyx_n_s_outdata,0};
    PyObject</em> values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 1);
        case  1: values[0] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = <span class='py_c_api'>PyDict_Size</span>(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = <span class='py_c_api'>PyDict_GetItem</span>(__pyx_kwds, __pyx_n_s_indata)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = <span class='py_c_api'>PyDict_GetItem</span>(__pyx_kwds, __pyx_n_s_outdata)) != 0)) kw_args--;
        else {
          <span class='pyx_c_api'>__Pyx_RaiseArgtupleInvalid</span>("slope_cython1", 1, 2, 2, 1); <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L3_error;}</span>
        }
      }
      if (unlikely(kw_args &gt; 0)) {
        if (unlikely(<span class='pyx_c_api'>__Pyx_ParseOptionalKeywords</span>(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slope_cython1") &lt; 0)) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L3_error;}</span>
      }
    } else if (<span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 0);
      values[1] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 1);
    }
    __pyx_v_indata = values[0];
    __pyx_v_outdata = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  <span class='pyx_c_api'>__Pyx_RaiseArgtupleInvalid</span>("slope_cython1", 1, 2, 2, <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args)); <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE</strong>; goto __pyx_L3_error;}</span>
  __pyx_L3_error:;
  <span class='pyx_c_api'>__Pyx_AddTraceback</span>("_cython_magic_5ce0ea3363e793331bdc8fd26ebbeb92.slope_cython1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_46_cython_magic_5ce0ea3363e793331bdc8fd26ebbeb92_slope_cython1(__pyx_self, __pyx_v_indata, __pyx_v_outdata);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;</p>
<p>/<em> function exit code </em>/
  <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
  return __pyx_r;
}</p>
<p>static PyObject <em>__pyx_pf_46_cython_magic_5ce0ea3363e793331bdc8fd26ebbeb92_slope_cython1(CYTHON_UNUSED PyObject </em><strong>pyx_self, PyObject <em>__pyx_v_indata, PyObject </em>__pyx_v_outdata) {
  PyObject <em>__pyx_v_I = NULL;
  PyObject </em>__pyx_v_J = NULL;
  PyObject <em>__pyx_v_i = NULL;
  PyObject </em>__pyx_v_j = NULL;
  PyObject <em>__pyx_v_dzdx = NULL;
  PyObject </em>__pyx_v_dzdy = NULL;
  PyObject <em>__pyx_v_slp = NULL;
  PyObject </em>__pyx_r = NULL;
  <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
  <span class='refnanny'>__Pyx_RefNannySetupContext</span>("slope_cython1", 0);
/<em> … </em>/
  /<em> function exit code </em>/
  __pyx_r = Py_None; <span class='pyx_macro_api'>__Pyx_INCREF</span>(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_1);
  <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_2);
  <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_5);
  <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_8);
  <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_9);
  <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_10);
  <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_t_11);
  <span class='pyx_c_api'>__Pyx_AddTraceback</span>("<em>cython_magic_5ce0ea3363e793331bdc8fd26ebbeb92.slope_cython1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_v_I);
  <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_v_J);
  <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_v_i);
  <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_v_j);
  <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_v_dzdx);
  <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_v_dzdy);
  <span class='pyx_macro_api'>__Pyx_XDECREF</span>(__pyx_v_slp);
  <span class='refnanny'>__Pyx_XGIVEREF</span>(__pyx_r);
  <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
  return __pyx_r;
}
/<em> … </em>/
  __pyx_tuple</em> = <span class='py_c_api'>PyTuple_Pack</span>(9, __pyx_n_s_indata, __pyx_n_s_outdata, __pyx_n_s_I, __pyx_n_s_J, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_dzdx, __pyx_n_s_dzdy, __pyx_n_s_slp);<span class='error_goto'> if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
  <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_tuple_);
  <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_tuple_);
/<em> … </em>/
  __pyx_t_1 = PyCFunction_NewEx(&amp;__pyx_mdef_46_cython_magic_5ce0ea3363e793331bdc8fd26ebbeb92_1slope_cython1, NULL, __pyx_n_s_cython_magic_5ce0ea3363e793331b);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
  <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
  if (<span class='py_c_api'>PyDict_SetItem</span>(__pyx_d, __pyx_n_s_slope_cython1, __pyx_t_1) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
  <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
</pre><pre class='cython line score-5' onclick='toggleDiv(this)'>+05:     <span class="n">I</span> <span class="o">=</span> <span class="n">outdata</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span></pre>
<pre class='cython code score-5'>  __pyx_t_1 = <span class='pyx_c_api'>__Pyx_PyObject_GetAttrStr</span>(__pyx_v_outdata, __pyx_n_s_shape);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
  <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
  __pyx_t_2 = <span class='pyx_c_api'>__Pyx_GetItemInt</span>(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1);<span class='error_goto'> if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>;
  <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
  <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_I = __pyx_t_2;
  __pyx_t_2 = 0;
</pre><pre class='cython line score-5' onclick='toggleDiv(this)'>+06:     <span class="n">J</span> <span class="o">=</span> <span class="n">outdata</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">1</span><span class="p">]</span></pre>
<pre class='cython code score-5'>  __pyx_t_2 = <span class='pyx_c_api'>__Pyx_PyObject_GetAttrStr</span>(__pyx_v_outdata, __pyx_n_s_shape);<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
  <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
  __pyx_t_1 = <span class='pyx_c_api'>__Pyx_GetItemInt</span>(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1);<span class='error_goto'> if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>;
  <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
  <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_J = __pyx_t_1;
  __pyx_t_1 = 0;
</pre><pre class='cython line score-57' onclick='toggleDiv(this)'>+07:     <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">I</span><span class="p">):</span></pre>
<pre class='cython code score-57'>  __pyx_t_1 = <span class='py_c_api'>PyTuple_New</span>(1);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
  <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
  <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_I);
  <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_1, 0, __pyx_v_I);
  <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_I);
  __pyx_t_2 = <span class='pyx_c_api'>__Pyx_PyObject_Call</span>(__pyx_builtin_range, __pyx_t_1, NULL);<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
  <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
  <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(<span class='py_c_api'>PyList_CheckExact</span>(__pyx_t_2)) || <span class='py_c_api'>PyTuple_CheckExact</span>(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = <span class='py_c_api'>PyObject_GetIter</span>(__pyx_t_2);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
    <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)-&gt;tp_iternext;<span class='error_goto'> if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
  }
  <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(<span class='py_c_api'>PyList_CheckExact</span>(__pyx_t_1))) {
        if (__pyx_t_3 &gt;= <span class='py_macro_api'>PyList_GET_SIZE</span>(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = <span class='py_macro_api'>PyList_GET_ITEM</span>(__pyx_t_1, __pyx_t_3); <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_2); __pyx_t_3++;<span class='error_goto'> if (unlikely(0 &lt; 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
        #else
        __pyx_t_2 = <span class='py_macro_api'>PySequence_ITEM</span>(__pyx_t_1, __pyx_t_3); __pyx_t_3++;<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
        #endif
      } else {
        if (__pyx_t_3 &gt;= <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_t_1, __pyx_t_3); <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_2); __pyx_t_3++;<span class='error_goto'> if (unlikely(0 &lt; 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
        #else
        __pyx_t_2 = <span class='py_macro_api'>PySequence_ITEM</span>(__pyx_t_1, __pyx_t_3); __pyx_t_3++;<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject<em> exc_type = <span class='py_c_api'>PyErr_Occurred</span>();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || <span class='py_c_api'>PyErr_GivenExceptionMatches</span>(exc_type, PyExc_StopIteration))) <span class='py_c_api'>PyErr_Clear</span>();
          else <span class='error_goto'>{<strong>pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE</strong>; goto __pyx_L1_error;}</span>
        }
        break;
      }
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
    }
    <span class='pyx_macro_api'>__Pyx_XDECREF_SET</span>(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;
/</em> … <em>/
  }
  <span class='pyx_macro_api'><strong>Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
</pre><pre class='cython line score-57' onclick='toggleDiv(this)'>+08:         <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">J</span><span class="p">):</span></pre>
<pre class='cython code score-57'>    __pyx_t_2 = <span class='py_c_api'>PyTuple_New</span>(1);<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
    <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
    <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_J);
    <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_2, 0, __pyx_v_J);
    <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_J);
    __pyx_t_5 = <span class='pyx_c_api'>__Pyx_PyObject_Call</span>(__pyx_builtin_range, __pyx_t_2, NULL);<span class='error_goto'> if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
    <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_5);
    <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(<span class='py_c_api'>PyList_CheckExact</span>(__pyx_t_5)) || <span class='py_c_api'>PyTuple_CheckExact</span>(__pyx_t_5)) {
      __pyx_t_2 = __pyx_t_5; <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_2); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_2 = <span class='py_c_api'>PyObject_GetIter</span>(__pyx_t_5);<span class='error_goto'> if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_2);
      __pyx_t_7 = Py_TYPE(__pyx_t_2)-&gt;tp_iternext;<span class='error_goto'> if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
    }
    <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(<span class='py_c_api'>PyList_CheckExact</span>(__pyx_t_2))) {
          if (__pyx_t_6 &gt;= <span class='py_macro_api'>PyList_GET_SIZE</span>(__pyx_t_2)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_5 = <span class='py_macro_api'>PyList_GET_ITEM</span>(__pyx_t_2, __pyx_t_6); <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_5); __pyx_t_6++;<span class='error_goto'> if (unlikely(0 &lt; 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
          #else
          __pyx_t_5 = <span class='py_macro_api'>PySequence_ITEM</span>(__pyx_t_2, __pyx_t_6); __pyx_t_6++;<span class='error_goto'> if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
          #endif
        } else {
          if (__pyx_t_6 &gt;= <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_t_2)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_5 = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_t_2, __pyx_t_6); <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_5); __pyx_t_6++;<span class='error_goto'> if (unlikely(0 &lt; 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
          #else
          __pyx_t_5 = <span class='py_macro_api'>PySequence_ITEM</span>(__pyx_t_2, __pyx_t_6); __pyx_t_6++;<span class='error_goto'> if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE</strong>; goto __pyx_L1_error;}</span>
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_2);
        if (unlikely(!__pyx_t_5)) {
          PyObject</em> exc_type = <span class='py_c_api'>PyErr_Occurred</span>();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || <span class='py_c_api'>PyErr_GivenExceptionMatches</span>(exc_type, PyExc_StopIteration))) <span class='py_c_api'>PyErr_Clear</span>();
            else <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
          }
          break;
        }
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_5);
      }
      <span class='pyx_macro_api'>__Pyx_XDECREF_SET</span>(__pyx_v_j, __pyx_t_5);
      __pyx_t_5 = 0;
/<em> … </em>/
    }
    <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_2); __pyx_t_2 = 0;
</pre><pre class='cython line score-53' onclick='toggleDiv(this)'>+09:             <span class="n">dzdx</span> <span class="o">=</span> <span class="p">(</span><span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mf">1</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mf">1</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mf">2</span><span class="p">])</span> <span class="o">/</span> <span class="mf">2</span></pre>
<pre class='cython code score-53'>      __pyx_t_5 = <span class='py_c_api'>PyNumber_Add</span>(__pyx_v_i, __pyx_int_1);<span class='error_goto'> if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_5);
      __pyx_t_8 = <span class='py_c_api'>PyTuple_New</span>(2);<span class='error_goto'> if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_8);
      <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_8, 0, __pyx_t_5);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_t_5);
      <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_j);
      <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_8, 1, __pyx_v_j);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_j);
      __pyx_t_5 = 0;
      __pyx_t_5 = <span class='py_c_api'>PyObject_GetItem</span>(__pyx_v_indata, __pyx_t_8);<span class='error_goto'> if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>;
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_5);
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = <span class='py_c_api'>PyNumber_Add</span>(__pyx_v_i, __pyx_int_1);<span class='error_goto'> if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_8);
      __pyx_t_9 = <span class='py_c_api'>PyNumber_Add</span>(__pyx_v_j, __pyx_int_2);<span class='error_goto'> if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_9);
      __pyx_t_10 = <span class='py_c_api'>PyTuple_New</span>(2);<span class='error_goto'> if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_10);
      <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_10, 0, __pyx_t_8);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_t_8);
      <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_10, 1, __pyx_t_9);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_t_9);
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      __pyx_t_9 = <span class='py_c_api'>PyObject_GetItem</span>(__pyx_v_indata, __pyx_t_10);<span class='error_goto'> if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>;
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_9);
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = <span class='py_c_api'>PyNumber_Subtract</span>(__pyx_t_5, __pyx_t_9);<span class='error_goto'> if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_10);
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_5); __pyx_t_5 = 0;
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = <span class='pyx_c_api'>__Pyx_PyNumber_Divide</span>(__pyx_t_10, __pyx_int_2);<span class='error_goto'> if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_9);
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_10); __pyx_t_10 = 0;
      <span class='pyx_macro_api'>__Pyx_XDECREF_SET</span>(__pyx_v_dzdx, __pyx_t_9);
      __pyx_t_9 = 0;
</pre><pre class='cython line score-53' onclick='toggleDiv(this)'>+10:             <span class="n">dzdy</span> <span class="o">=</span> <span class="p">(</span><span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mf">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mf">2</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mf">1</span><span class="p">])</span> <span class="o">/</span> <span class="mf">2</span></pre>
<pre class='cython code score-53'>      __pyx_t_9 = <span class='py_c_api'>PyNumber_Add</span>(__pyx_v_j, __pyx_int_1);<span class='error_goto'> if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_9);
      __pyx_t_10 = <span class='py_c_api'>PyTuple_New</span>(2);<span class='error_goto'> if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_10);
      <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_i);
      <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_10, 0, __pyx_v_i);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_i);
      <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_10, 1, __pyx_t_9);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_9 = <span class='py_c_api'>PyObject_GetItem</span>(__pyx_v_indata, __pyx_t_10);<span class='error_goto'> if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>;
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_9);
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = <span class='py_c_api'>PyNumber_Add</span>(__pyx_v_i, __pyx_int_2);<span class='error_goto'> if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_10);
      __pyx_t_5 = <span class='py_c_api'>PyNumber_Add</span>(__pyx_v_j, __pyx_int_1);<span class='error_goto'> if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_5);
      __pyx_t_8 = <span class='py_c_api'>PyTuple_New</span>(2);<span class='error_goto'> if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_8);
      <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_8, 0, __pyx_t_10);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_t_10);
      <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_8, 1, __pyx_t_5);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_t_5);
      __pyx_t_10 = 0;
      __pyx_t_5 = 0;
      __pyx_t_5 = <span class='py_c_api'>PyObject_GetItem</span>(__pyx_v_indata, __pyx_t_8);<span class='error_goto'> if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>;
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_5);
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = <span class='py_c_api'>PyNumber_Subtract</span>(__pyx_t_9, __pyx_t_5);<span class='error_goto'> if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_8);
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_9); __pyx_t_9 = 0;
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = <span class='pyx_c_api'>__Pyx_PyNumber_Divide</span>(__pyx_t_8, __pyx_int_2);<span class='error_goto'> if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_5);
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_8); __pyx_t_8 = 0;
      <span class='pyx_macro_api'>__Pyx_XDECREF_SET</span>(__pyx_v_dzdy, __pyx_t_5);
      __pyx_t_5 = 0;
</pre><pre class='cython line score-53' onclick='toggleDiv(this)'>+11:             <span class="n">slp</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">((</span><span class="n">dzdx</span> <span class="o"><em></span> <span class="n">dzdx</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">dzdy</span> <span class="o"></em></span> <span class="n">dzdy</span><span class="p">))</span> <span class="o"><em></span> <span class="mf">100</span></pre>
<pre class='cython code score-53'>      <strong>pyx_t_8 = <span class='pyx_c_api'>__Pyx_GetModuleGlobalName</span>(__pyx_n_s_math);<span class='error_goto'> if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_8);
      __pyx_t_9 = <span class='pyx_c_api'>__Pyx_PyObject_GetAttrStr</span>(__pyx_t_8, __pyx_n_s_sqrt);<span class='error_goto'> if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_9);
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = <span class='py_c_api'>PyNumber_Multiply</span>(__pyx_v_dzdx, __pyx_v_dzdx);<span class='error_goto'> if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_8);
      __pyx_t_10 = <span class='py_c_api'>PyNumber_Multiply</span>(__pyx_v_dzdy, __pyx_v_dzdy);<span class='error_goto'> if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_10);
      __pyx_t_11 = <span class='py_c_api'>PyNumber_Add</span>(__pyx_t_8, __pyx_t_10);<span class='error_goto'> if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE</strong>; goto __pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_11);
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_8); __pyx_t_8 = 0;
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON &amp;&amp; unlikely(<span class='py_c_api'>PyMethod_Check</span>(__pyx_t_9))) {
        __pyx_t_10 = <span class='py_macro_api'>PyMethod_GET_SELF</span>(__pyx_t_9);
        if (likely(__pyx_t_10)) {
          PyObject</em> function = <span class='py_macro_api'>PyMethod_GET_FUNCTION</span>(__pyx_t_9);
          <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_t_10);
          <span class='pyx_macro_api'>__Pyx_INCREF</span>(function);
          <span class='pyx_macro_api'>__Pyx_DECREF_SET</span>(__pyx_t_9, function);
        }
      }
      if (!__pyx_t_10) {
        __pyx_t_5 = <span class='pyx_c_api'>__Pyx_PyObject_CallOneArg</span>(__pyx_t_9, __pyx_t_11);<span class='error_goto'> if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_11); __pyx_t_11 = 0;
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_5);
      } else {
        __pyx_t_8 = <span class='py_c_api'>PyTuple_New</span>(1+1);<span class='error_goto'> if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_8);
        <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_8, 0, __pyx_t_10); <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_t_10); __pyx_t_10 = NULL;
        <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_8, 0+1, __pyx_t_11);
        <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_t_11);
        __pyx_t_11 = 0;
        __pyx_t_5 = <span class='pyx_c_api'>__Pyx_PyObject_Call</span>(__pyx_t_9, __pyx_t_8, NULL);<span class='error_goto'> if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
        <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_5);
        <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_8); __pyx_t_8 = 0;
      }
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = <span class='py_c_api'>PyNumber_Multiply</span>(__pyx_t_5, __pyx_int_100);<span class='error_goto'> if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_9);
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_5); __pyx_t_5 = 0;
      <span class='pyx_macro_api'>__Pyx_XDECREF_SET</span>(__pyx_v_slp, __pyx_t_9);
      __pyx_t_9 = 0;
</pre><pre class='cython line score-15' onclick='toggleDiv(this)'>+12:             <span class="n">outdata</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">slp</span></pre>
<pre class='cython code score-15'>      __pyx_t_9 = <span class='py_c_api'>PyTuple_New</span>(2);<span class='error_goto'> if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
      <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_9);
      <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_i);
      <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_9, 0, __pyx_v_i);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_i);
      <span class='pyx_macro_api'>__Pyx_INCREF</span>(__pyx_v_j);
      <span class='py_macro_api'>PyTuple_SET_ITEM</span>(__pyx_t_9, 1, __pyx_v_j);
      <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_v_j);
      if (unlikely(<span class='py_c_api'>PyObject_SetItem</span>(__pyx_v_outdata, __pyx_t_9, __pyx_v_slp) &lt; 0)) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE</strong>; goto __pyx_L1_error;}</span>
      <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_9); __pyx_t_9 = 0;
</pre></div></body></html></p>
<p>The yellow indicates calls into Python functions which generally means that you're not getting the speed benefits of pure C. This is unsurprising since the code is exactly the same python code we ran before, minus the comments. And the performance is similar:</p>
<div class="highlight"><pre><span class="n">reset_outdata</span><span class="p">()</span>
<span class="o">%</span><span class="n">timeit</span> <span class="n">slope_cython1</span><span class="p">(</span><span class="n">indata</span><span class="p">,</span> <span class="n">outdata</span><span class="p">)</span>
</pre></div>


<div class="highlight"><pre>1 loops, best of 3: 8.36 s per loop
</pre></div>


<p>We only get the speedups when we start optimizing the code by typing the variables, avoiding the use of the <code>math</code> lib, and omitting some bounds checking. This allows the function to be run in pure C and not touch the python interpreter.</p>
<div class="highlight"><pre><span class="o">%%</span><span class="n">cython</span> <span class="o">-</span><span class="n">a</span>
<span class="kn">import</span> <span class="nn">cython</span>

<span class="nd">@cython.boundscheck</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">slope_cython2</span><span class="p">(</span><span class="n">double</span> <span class="p">[:,</span> <span class="p">:]</span> <span class="n">indata</span><span class="p">,</span> <span class="n">double</span> <span class="p">[:,</span> <span class="p">:]</span> <span class="n">outdata</span><span class="p">):</span>
    <span class="n">cdef</span> <span class="nb">int</span> <span class="n">I</span><span class="p">,</span> <span class="n">J</span>
    <span class="n">cdef</span> <span class="nb">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">x</span>
    <span class="n">cdef</span> <span class="n">double</span> <span class="n">k</span><span class="p">,</span> <span class="n">slp</span><span class="p">,</span> <span class="n">dzdx</span><span class="p">,</span> <span class="n">dzdy</span>
    <span class="n">I</span> <span class="o">=</span> <span class="n">outdata</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">J</span> <span class="o">=</span> <span class="n">outdata</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">I</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">J</span><span class="p">):</span>
            <span class="n">dzdx</span> <span class="o">=</span> <span class="p">(</span><span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">2</span><span class="p">])</span> <span class="o">/</span> <span class="mi">2</span>
            <span class="n">dzdy</span> <span class="o">=</span> <span class="p">(</span><span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="o">/</span> <span class="mi">2</span>
            <span class="n">k</span> <span class="o">=</span> <span class="p">(</span><span class="n">dzdx</span> <span class="o">*</span> <span class="n">dzdx</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">dzdy</span> <span class="o">*</span> <span class="n">dzdy</span><span class="p">)</span>
            <span class="n">slp</span> <span class="o">=</span> <span class="n">k</span><span class="o">**</span><span class="mf">0.5</span> <span class="o">*</span> <span class="mi">100</span>
            <span class="n">outdata</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">slp</span>
</pre></div>


<!DOCTYPE html>
<!-- Generated by Cython 0.22 -->
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <style type="text/css">

<p>body.cython { font-family: courier; font-size: 12; }</p>
<p>.cython.tag  {  }
.cython.line { margin: 0em }
.cython.code  { font-size: 9; color: #444444; display: none; margin: 0px 0px 0px 20px;  }</p>
<p>.cython.code .py_c_api  { color: red; }
.cython.code .py_macro_api  { color: #FF7000; }
.cython.code .pyx_c_api  { color: #FF3000; }
.cython.code .pyx_macro_api  { color: #FF7000; }
.cython.code .refnanny  { color: #FFA000; }
.cython.code .error_goto  { color: #FFA000; }</p>
<p>.cython.code .coerce  { color: #008000; border: 1px dotted #008000 }
.cython.code .py_attr { color: #FF0000; font-weight: bold; }
.cython.code .c_attr  { color: #0000FF; }
.cython.code .py_call { color: #FF0000; font-weight: bold; }
.cython.code .c_call  { color: #0000FF; }</p>
<p>.cython.score-0 {background-color: #FFFFff;}
.cython.score-1 {background-color: #FFFFe7;}
.cython.score-2 {background-color: #FFFFd4;}
.cython.score-3 {background-color: #FFFFc4;}
.cython.score-4 {background-color: #FFFFb6;}
.cython.score-5 {background-color: #FFFFaa;}
.cython.score-6 {background-color: #FFFF9f;}
.cython.score-7 {background-color: #FFFF96;}
.cython.score-8 {background-color: #FFFF8d;}
.cython.score-9 {background-color: #FFFF86;}
.cython.score-10 {background-color: #FFFF7f;}
.cython.score-11 {background-color: #FFFF79;}
.cython.score-12 {background-color: #FFFF73;}
.cython.score-13 {background-color: #FFFF6e;}
.cython.score-14 {background-color: #FFFF6a;}
.cython.score-15 {background-color: #FFFF66;}
.cython.score-16 {background-color: #FFFF62;}
.cython.score-17 {background-color: #FFFF5e;}
.cython.score-18 {background-color: #FFFF5b;}
.cython.score-19 {background-color: #FFFF57;}
.cython.score-20 {background-color: #FFFF55;}
.cython.score-21 {background-color: #FFFF52;}
.cython.score-22 {background-color: #FFFF4f;}
.cython.score-23 {background-color: #FFFF4d;}
.cython.score-24 {background-color: #FFFF4b;}
.cython.score-25 {background-color: #FFFF48;}
.cython.score-26 {background-color: #FFFF46;}
.cython.score-27 {background-color: #FFFF44;}
.cython.score-28 {background-color: #FFFF43;}
.cython.score-29 {background-color: #FFFF41;}
.cython.score-30 {background-color: #FFFF3f;}
.cython.score-31 {background-color: #FFFF3e;}
.cython.score-32 {background-color: #FFFF3c;}
.cython.score-33 {background-color: #FFFF3b;}
.cython.score-34 {background-color: #FFFF39;}
.cython.score-35 {background-color: #FFFF38;}
.cython.score-36 {background-color: #FFFF37;}
.cython.score-37 {background-color: #FFFF36;}
.cython.score-38 {background-color: #FFFF35;}
.cython.score-39 {background-color: #FFFF34;}
.cython.score-40 {background-color: #FFFF33;}
.cython.score-41 {background-color: #FFFF32;}
.cython.score-42 {background-color: #FFFF31;}
.cython.score-43 {background-color: #FFFF30;}
.cython.score-44 {background-color: #FFFF2f;}
.cython.score-45 {background-color: #FFFF2e;}
.cython.score-46 {background-color: #FFFF2d;}
.cython.score-47 {background-color: #FFFF2c;}
.cython.score-48 {background-color: #FFFF2b;}
.cython.score-49 {background-color: #FFFF2b;}
.cython.score-50 {background-color: #FFFF2a;}
.cython.score-51 {background-color: #FFFF29;}
.cython.score-52 {background-color: #FFFF29;}
.cython.score-53 {background-color: #FFFF28;}
.cython.score-54 {background-color: #FFFF27;}
.cython.score-55 {background-color: #FFFF27;}
.cython.score-56 {background-color: #FFFF26;}
.cython.score-57 {background-color: #FFFF26;}
.cython.score-58 {background-color: #FFFF25;}
.cython.score-59 {background-color: #FFFF24;}
.cython.score-60 {background-color: #FFFF24;}
.cython.score-61 {background-color: #FFFF23;}
.cython.score-62 {background-color: #FFFF23;}
.cython.score-63 {background-color: #FFFF22;}
.cython.score-64 {background-color: #FFFF22;}
.cython.score-65 {background-color: #FFFF22;}
.cython.score-66 {background-color: #FFFF21;}
.cython.score-67 {background-color: #FFFF21;}
.cython.score-68 {background-color: #FFFF20;}
.cython.score-69 {background-color: #FFFF20;}
.cython.score-70 {background-color: #FFFF1f;}
.cython.score-71 {background-color: #FFFF1f;}
.cython.score-72 {background-color: #FFFF1f;}
.cython.score-73 {background-color: #FFFF1e;}
.cython.score-74 {background-color: #FFFF1e;}
.cython.score-75 {background-color: #FFFF1e;}
.cython.score-76 {background-color: #FFFF1d;}
.cython.score-77 {background-color: #FFFF1d;}
.cython.score-78 {background-color: #FFFF1c;}
.cython.score-79 {background-color: #FFFF1c;}
.cython.score-80 {background-color: #FFFF1c;}
.cython.score-81 {background-color: #FFFF1c;}
.cython.score-82 {background-color: #FFFF1b;}
.cython.score-83 {background-color: #FFFF1b;}
.cython.score-84 {background-color: #FFFF1b;}
.cython.score-85 {background-color: #FFFF1a;}
.cython.score-86 {background-color: #FFFF1a;}
.cython.score-87 {background-color: #FFFF1a;}
.cython.score-88 {background-color: #FFFF1a;}
.cython.score-89 {background-color: #FFFF19;}
.cython.score-90 {background-color: #FFFF19;}
.cython.score-91 {background-color: #FFFF19;}
.cython.score-92 {background-color: #FFFF19;}
.cython.score-93 {background-color: #FFFF18;}
.cython.score-94 {background-color: #FFFF18;}
.cython.score-95 {background-color: #FFFF18;}
.cython.score-96 {background-color: #FFFF18;}
.cython.score-97 {background-color: #FFFF17;}
.cython.score-98 {background-color: #FFFF17;}
.cython.score-99 {background-color: #FFFF17;}
.cython.score-100 {background-color: #FFFF17;}
.cython.score-101 {background-color: #FFFF16;}
.cython.score-102 {background-color: #FFFF16;}
.cython.score-103 {background-color: #FFFF16;}
.cython.score-104 {background-color: #FFFF16;}
.cython.score-105 {background-color: #FFFF16;}
.cython.score-106 {background-color: #FFFF15;}
.cython.score-107 {background-color: #FFFF15;}
.cython.score-108 {background-color: #FFFF15;}
.cython.score-109 {background-color: #FFFF15;}
.cython.score-110 {background-color: #FFFF15;}
.cython.score-111 {background-color: #FFFF15;}
.cython.score-112 {background-color: #FFFF14;}
.cython.score-113 {background-color: #FFFF14;}
.cython.score-114 {background-color: #FFFF14;}
.cython.score-115 {background-color: #FFFF14;}
.cython.score-116 {background-color: #FFFF14;}
.cython.score-117 {background-color: #FFFF14;}
.cython.score-118 {background-color: #FFFF13;}
.cython.score-119 {background-color: #FFFF13;}
.cython.score-120 {background-color: #FFFF13;}
.cython.score-121 {background-color: #FFFF13;}
.cython.score-122 {background-color: #FFFF13;}
.cython.score-123 {background-color: #FFFF13;}
.cython.score-124 {background-color: #FFFF13;}
.cython.score-125 {background-color: #FFFF12;}
.cython.score-126 {background-color: #FFFF12;}
.cython.score-127 {background-color: #FFFF12;}
.cython.score-128 {background-color: #FFFF12;}
.cython.score-129 {background-color: #FFFF12;}
.cython.score-130 {background-color: #FFFF12;}
.cython.score-131 {background-color: #FFFF12;}
.cython.score-132 {background-color: #FFFF11;}
.cython.score-133 {background-color: #FFFF11;}
.cython.score-134 {background-color: #FFFF11;}
.cython.score-135 {background-color: #FFFF11;}
.cython.score-136 {background-color: #FFFF11;}
.cython.score-137 {background-color: #FFFF11;}
.cython.score-138 {background-color: #FFFF11;}
.cython.score-139 {background-color: #FFFF11;}
.cython.score-140 {background-color: #FFFF11;}
.cython.score-141 {background-color: #FFFF10;}
.cython.score-142 {background-color: #FFFF10;}
.cython.score-143 {background-color: #FFFF10;}
.cython.score-144 {background-color: #FFFF10;}
.cython.score-145 {background-color: #FFFF10;}
.cython.score-146 {background-color: #FFFF10;}
.cython.score-147 {background-color: #FFFF10;}
.cython.score-148 {background-color: #FFFF10;}
.cython.score-149 {background-color: #FFFF10;}
.cython.score-150 {background-color: #FFFF0f;}
.cython.score-151 {background-color: #FFFF0f;}
.cython.score-152 {background-color: #FFFF0f;}
.cython.score-153 {background-color: #FFFF0f;}
.cython.score-154 {background-color: #FFFF0f;}
.cython.score-155 {background-color: #FFFF0f;}
.cython.score-156 {background-color: #FFFF0f;}
.cython.score-157 {background-color: #FFFF0f;}
.cython.score-158 {background-color: #FFFF0f;}
.cython.score-159 {background-color: #FFFF0f;}
.cython.score-160 {background-color: #FFFF0f;}
.cython.score-161 {background-color: #FFFF0e;}
.cython.score-162 {background-color: #FFFF0e;}
.cython.score-163 {background-color: #FFFF0e;}
.cython.score-164 {background-color: #FFFF0e;}
.cython.score-165 {background-color: #FFFF0e;}
.cython.score-166 {background-color: #FFFF0e;}
.cython.score-167 {background-color: #FFFF0e;}
.cython.score-168 {background-color: #FFFF0e;}
.cython.score-169 {background-color: #FFFF0e;}
.cython.score-170 {background-color: #FFFF0e;}
.cython.score-171 {background-color: #FFFF0e;}
.cython.score-172 {background-color: #FFFF0e;}
.cython.score-173 {background-color: #FFFF0d;}
.cython.score-174 {background-color: #FFFF0d;}
.cython.score-175 {background-color: #FFFF0d;}
.cython.score-176 {background-color: #FFFF0d;}
.cython.score-177 {background-color: #FFFF0d;}
.cython.score-178 {background-color: #FFFF0d;}
.cython.score-179 {background-color: #FFFF0d;}
.cython.score-180 {background-color: #FFFF0d;}
.cython.score-181 {background-color: #FFFF0d;}
.cython.score-182 {background-color: #FFFF0d;}
.cython.score-183 {background-color: #FFFF0d;}
.cython.score-184 {background-color: #FFFF0d;}
.cython.score-185 {background-color: #FFFF0d;}
.cython.score-186 {background-color: #FFFF0d;}
.cython.score-187 {background-color: #FFFF0c;}
.cython.score-188 {background-color: #FFFF0c;}
.cython.score-189 {background-color: #FFFF0c;}
.cython.score-190 {background-color: #FFFF0c;}
.cython.score-191 {background-color: #FFFF0c;}
.cython.score-192 {background-color: #FFFF0c;}
.cython.score-193 {background-color: #FFFF0c;}
.cython.score-194 {background-color: #FFFF0c;}
.cython.score-195 {background-color: #FFFF0c;}
.cython.score-196 {background-color: #FFFF0c;}
.cython.score-197 {background-color: #FFFF0c;}
.cython.score-198 {background-color: #FFFF0c;}
.cython.score-199 {background-color: #FFFF0c;}
.cython.score-200 {background-color: #FFFF0c;}
.cython.score-201 {background-color: #FFFF0c;}
.cython.score-202 {background-color: #FFFF0c;}
.cython.score-203 {background-color: #FFFF0b;}
.cython.score-204 {background-color: #FFFF0b;}
.cython.score-205 {background-color: #FFFF0b;}
.cython.score-206 {background-color: #FFFF0b;}
.cython.score-207 {background-color: #FFFF0b;}
.cython.score-208 {background-color: #FFFF0b;}
.cython.score-209 {background-color: #FFFF0b;}
.cython.score-210 {background-color: #FFFF0b;}
.cython.score-211 {background-color: #FFFF0b;}
.cython.score-212 {background-color: #FFFF0b;}
.cython.score-213 {background-color: #FFFF0b;}
.cython.score-214 {background-color: #FFFF0b;}
.cython.score-215 {background-color: #FFFF0b;}
.cython.score-216 {background-color: #FFFF0b;}
.cython.score-217 {background-color: #FFFF0b;}
.cython.score-218 {background-color: #FFFF0b;}
.cython.score-219 {background-color: #FFFF0b;}
.cython.score-220 {background-color: #FFFF0b;}
.cython.score-221 {background-color: #FFFF0b;}
.cython.score-222 {background-color: #FFFF0a;}
.cython.score-223 {background-color: #FFFF0a;}
.cython.score-224 {background-color: #FFFF0a;}
.cython.score-225 {background-color: #FFFF0a;}
.cython.score-226 {background-color: #FFFF0a;}
.cython.score-227 {background-color: #FFFF0a;}
.cython.score-228 {background-color: #FFFF0a;}
.cython.score-229 {background-color: #FFFF0a;}
.cython.score-230 {background-color: #FFFF0a;}
.cython.score-231 {background-color: #FFFF0a;}
.cython.score-232 {background-color: #FFFF0a;}
.cython.score-233 {background-color: #FFFF0a;}
.cython.score-234 {background-color: #FFFF0a;}
.cython.score-235 {background-color: #FFFF0a;}
.cython.score-236 {background-color: #FFFF0a;}
.cython.score-237 {background-color: #FFFF0a;}
.cython.score-238 {background-color: #FFFF0a;}
.cython.score-239 {background-color: #FFFF0a;}
.cython.score-240 {background-color: #FFFF0a;}
.cython.score-241 {background-color: #FFFF0a;}
.cython.score-242 {background-color: #FFFF0a;}
.cython.score-243 {background-color: #FFFF0a;}
.cython.score-244 {background-color: #FFFF0a;}
.cython.score-245 {background-color: #FFFF0a;}
.cython.score-246 {background-color: #FFFF09;}
.cython.score-247 {background-color: #FFFF09;}
.cython.score-248 {background-color: #FFFF09;}
.cython.score-249 {background-color: #FFFF09;}
.cython.score-250 {background-color: #FFFF09;}
.cython.score-251 {background-color: #FFFF09;}
.cython.score-252 {background-color: #FFFF09;}
.cython.score-253 {background-color: #FFFF09;}
.cython.score-254 {background-color: #FFFF09;}.cython .hll { background-color: #ffffcc }
.cython  { background: #f8f8f8; }
.cython .c { color: #408080; font-style: italic } /<em> Comment </em>/
.cython .err { border: 1px solid #FF0000 } /<em> Error </em>/
.cython .k { color: #008000; font-weight: bold } /<em> Keyword </em>/
.cython .o { color: #666666 } /<em> Operator </em>/
.cython .cm { color: #408080; font-style: italic } /<em> Comment.Multiline </em>/
.cython .cp { color: #BC7A00 } /<em> Comment.Preproc </em>/
.cython .c1 { color: #408080; font-style: italic } /<em> Comment.Single </em>/
.cython .cs { color: #408080; font-style: italic } /<em> Comment.Special </em>/
.cython .gd { color: #A00000 } /<em> Generic.Deleted </em>/
.cython .ge { font-style: italic } /<em> Generic.Emph </em>/
.cython .gr { color: #FF0000 } /<em> Generic.Error </em>/
.cython .gh { color: #000080; font-weight: bold } /<em> Generic.Heading </em>/
.cython .gi { color: #00A000 } /<em> Generic.Inserted </em>/
.cython .go { color: #888888 } /<em> Generic.Output </em>/
.cython .gp { color: #000080; font-weight: bold } /<em> Generic.Prompt </em>/
.cython .gs { font-weight: bold } /<em> Generic.Strong </em>/
.cython .gu { color: #800080; font-weight: bold } /<em> Generic.Subheading </em>/
.cython .gt { color: #0044DD } /<em> Generic.Traceback </em>/
.cython .kc { color: #008000; font-weight: bold } /<em> Keyword.Constant </em>/
.cython .kd { color: #008000; font-weight: bold } /<em> Keyword.Declaration </em>/
.cython .kn { color: #008000; font-weight: bold } /<em> Keyword.Namespace </em>/
.cython .kp { color: #008000 } /<em> Keyword.Pseudo </em>/
.cython .kr { color: #008000; font-weight: bold } /<em> Keyword.Reserved </em>/
.cython .kt { color: #B00040 } /<em> Keyword.Type </em>/
.cython .m { color: #666666 } /<em> Literal.Number </em>/
.cython .s { color: #BA2121 } /<em> Literal.String </em>/
.cython .na { color: #7D9029 } /<em> Name.Attribute </em>/
.cython .nb { color: #008000 } /<em> Name.Builtin </em>/
.cython .nc { color: #0000FF; font-weight: bold } /<em> Name.Class </em>/
.cython .no { color: #880000 } /<em> Name.Constant </em>/
.cython .nd { color: #AA22FF } /<em> Name.Decorator </em>/
.cython .ni { color: #999999; font-weight: bold } /<em> Name.Entity </em>/
.cython .ne { color: #D2413A; font-weight: bold } /<em> Name.Exception </em>/
.cython .nf { color: #0000FF } /<em> Name.Function </em>/
.cython .nl { color: #A0A000 } /<em> Name.Label </em>/
.cython .nn { color: #0000FF; font-weight: bold } /<em> Name.Namespace </em>/
.cython .nt { color: #008000; font-weight: bold } /<em> Name.Tag </em>/
.cython .nv { color: #19177C } /<em> Name.Variable </em>/
.cython .ow { color: #AA22FF; font-weight: bold } /<em> Operator.Word </em>/
.cython .w { color: #bbbbbb } /<em> Text.Whitespace </em>/
.cython .mb { color: #666666 } /<em> Literal.Number.Bin </em>/
.cython .mf { color: #666666 } /<em> Literal.Number.Float </em>/
.cython .mh { color: #666666 } /<em> Literal.Number.Hex </em>/
.cython .mi { color: #666666 } /<em> Literal.Number.Integer </em>/
.cython .mo { color: #666666 } /<em> Literal.Number.Oct </em>/
.cython .sb { color: #BA2121 } /<em> Literal.String.Backtick </em>/
.cython .sc { color: #BA2121 } /<em> Literal.String.Char </em>/
.cython .sd { color: #BA2121; font-style: italic } /<em> Literal.String.Doc </em>/
.cython .s2 { color: #BA2121 } /<em> Literal.String.Double </em>/
.cython .se { color: #BB6622; font-weight: bold } /<em> Literal.String.Escape </em>/
.cython .sh { color: #BA2121 } /<em> Literal.String.Heredoc </em>/
.cython .si { color: #BB6688; font-weight: bold } /<em> Literal.String.Interpol </em>/
.cython .sx { color: #008000 } /<em> Literal.String.Other </em>/
.cython .sr { color: #BB6688 } /<em> Literal.String.Regex </em>/
.cython .s1 { color: #BA2121 } /<em> Literal.String.Single </em>/
.cython .ss { color: #19177C } /<em> Literal.String.Symbol </em>/
.cython .bp { color: #008000 } /<em> Name.Builtin.Pseudo </em>/
.cython .vc { color: #19177C } /<em> Name.Variable.Class </em>/
.cython .vg { color: #19177C } /<em> Name.Variable.Global </em>/
.cython .vi { color: #19177C } /<em> Name.Variable.Instance </em>/
.cython .il { color: #666666 } /<em> Literal.Number.Integer.Long </em>/
    </style>
    <script>
    function toggleDiv(id) {
        theDiv = id.nextElementSibling
        if (theDiv.style.display != 'block') theDiv.style.display = 'block';
        else theDiv.style.display = 'none';
    }
    </script>
</head>
<body class="cython">
<p>Generated by Cython 0.22</p>
<div class="cython"><pre class='cython line score-11' onclick='toggleDiv(this)'>+01: <span class="k">import</span> <span class="nn">cython</span></pre>
<pre class='cython code score-11'>  <strong>pyx_t_1 = <span class='py_c_api'>PyDict_New</span>();<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
  <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
  if (<span class='py_c_api'>PyDict_SetItem</span>(__pyx_d, __pyx_n_s_test, __pyx_t_1) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
  <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
</pre><pre class='cython line score-0'>&#xA0;02: </pre>
<pre class='cython line score-0'>&#xA0;03: <span class="nd">@cython</span><span class="o">.</span><span class="n">boundscheck</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span></pre>
<pre class='cython line score-48' onclick='toggleDiv(this)'>+04: <span class="k">def</span> <span class="nf">slope_cython2</span><span class="p">(</span><span class="n">double</span> <span class="p">[:,</span> <span class="p">:]</span> <span class="n">indata</span><span class="p">,</span> <span class="n">double</span> <span class="p">[:,</span> <span class="p">:]</span> <span class="n">outdata</span><span class="p">):</span></pre>
<pre class='cython code score-48'>/<em> Python wrapper </em>/
static PyObject <em>__pyx_pw_46_cython_magic_d03f43061db8af8048b429d394d8ec3a_1slope_cython2(PyObject </em>__pyx_self, PyObject <em>__pyx_args, PyObject </em>__pyx_kwds); /<em>proto</em>/
static PyMethodDef __pyx_mdef_46_cython_magic_d03f43061db8af8048b429d394d8ec3a_1slope_cython2 = {"slope_cython2", (PyCFunction)__pyx_pw_46_cython_magic_d03f43061db8af8048b429d394d8ec3a_1slope_cython2, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject <em>__pyx_pw_46_cython_magic_d03f43061db8af8048b429d394d8ec3a_1slope_cython2(PyObject </em>__pyx_self, PyObject <em>__pyx_args, PyObject </em>__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_indata = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_outdata = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject <em>__pyx_r = 0;
  <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
  <span class='refnanny'>__Pyx_RefNannySetupContext</span>("slope_cython2 (wrapper)", 0);
  {
    static PyObject </em><em>__pyx_pyargnames[] = {&amp;__pyx_n_s_indata,&amp;__pyx_n_s_outdata,0};
    PyObject</em> values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 1);
        case  1: values[0] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = <span class='py_c_api'>PyDict_Size</span>(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = <span class='py_c_api'>PyDict_GetItem</span>(__pyx_kwds, __pyx_n_s_indata)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = <span class='py_c_api'>PyDict_GetItem</span>(__pyx_kwds, __pyx_n_s_outdata)) != 0)) kw_args--;
        else {
          <span class='pyx_c_api'>__Pyx_RaiseArgtupleInvalid</span>("slope_cython2", 1, 2, 2, 1); <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L3_error;}</span>
        }
      }
      if (unlikely(kw_args &gt; 0)) {
        if (unlikely(<span class='pyx_c_api'>__Pyx_ParseOptionalKeywords</span>(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slope_cython2") &lt; 0)) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L3_error;}</span>
      }
    } else if (<span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 0);
      values[1] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 1);
    }
    __pyx_v_indata = <span class='pyx_c_api'>__Pyx_PyObject_to_MemoryviewSlice_dsds_double</span>(values[0]);<span class='error_goto'> if (unlikely(!__pyx_v_indata.memview)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L3_error;}</span>
    __pyx_v_outdata = <span class='pyx_c_api'>__Pyx_PyObject_to_MemoryviewSlice_dsds_double</span>(values[1]);<span class='error_goto'> if (unlikely(!__pyx_v_outdata.memview)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L3_error;}</span>
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  <span class='pyx_c_api'>__Pyx_RaiseArgtupleInvalid</span>("slope_cython2", 1, 2, 2, <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args)); <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE</strong>; goto __pyx_L3_error;}</span>
  __pyx_L3_error:;
  <span class='pyx_c_api'>__Pyx_AddTraceback</span>("_cython_magic_d03f43061db8af8048b429d394d8ec3a.slope_cython2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_46_cython_magic_d03f43061db8af8048b429d394d8ec3a_slope_cython2(__pyx_self, __pyx_v_indata, __pyx_v_outdata);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;</p>
<p>/<em> function exit code </em>/
  <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
  return __pyx_r;
}</p>
<p>static PyObject <em>__pyx_pf_46_cython_magic_d03f43061db8af8048b429d394d8ec3a_slope_cython2(CYTHON_UNUSED PyObject </em><strong>pyx_self, __Pyx_memviewslice __pyx_v_indata, __Pyx_memviewslice __pyx_v_outdata) {
  int __pyx_v_I;
  int __pyx_v_J;
  int __pyx_v_i;
  int __pyx_v_j;
  double __pyx_v_k;
  double __pyx_v_slp;
  double __pyx_v_dzdx;
  double __pyx_v_dzdy;
  PyObject <em>__pyx_r = NULL;
  <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
  <span class='refnanny'>__Pyx_RefNannySetupContext</span>("slope_cython2", 0);
/</em> … <em>/
  /</em> function exit code <em>/
  __pyx_r = Py_None; <span class='pyx_macro_api'>__Pyx_INCREF</span>(Py_None);
  __PYX_XDEC_MEMVIEW(&amp;__pyx_v_indata, 1);
  __PYX_XDEC_MEMVIEW(&amp;__pyx_v_outdata, 1);
  <span class='refnanny'>__Pyx_XGIVEREF</span>(__pyx_r);
  <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
  return __pyx_r;
}
/</em> … <em>/
  <strong>pyx_tuple__13 = <span class='py_c_api'>PyTuple_Pack</span>(11, __pyx_n_s_indata, __pyx_n_s_outdata, __pyx_n_s_I, __pyx_n_s_J, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_x, __pyx_n_s_k, __pyx_n_s_slp, __pyx_n_s_dzdx, __pyx_n_s_dzdy);<span class='error_goto'> if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE</strong>; goto __pyx_L1_error;}</span>
  <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_tuple__13);
  <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_tuple__13);
/</em> … <em>/
  <strong>pyx_t_1 = PyCFunction_NewEx(&amp;__pyx_mdef_46_cython_magic_d03f43061db8af8048b429d394d8ec3a_1slope_cython2, NULL, __pyx_n_s_cython_magic_d03f43061db8af8048);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
  <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
  if (<span class='py_c_api'>PyDict_SetItem</span>(__pyx_d, __pyx_n_s_slope_cython2, __pyx_t_1) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE</strong>; goto __pyx_L1_error;}</span>
  <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_codeobj__14 = (PyObject</em>)<span class='pyx_c_api'>__Pyx_PyCode_New</span>(2, 0, 11, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_vagrant_cache_ipython_cyth, __pyx_n_s_slope_cython2, 4, __pyx_empty_bytes);<span class='error_goto'> if (unlikely(!__pyx_codeobj__14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE</strong>; goto __pyx_L1_error;}</span>
</pre><pre class='cython line score-0'>&#xA0;05:     <span class="k">cdef</span> <span class="kt">int</span> <span class="nf">I</span><span class="p">,</span> <span class="nf">J</span></pre>
<pre class='cython line score-0'>&#xA0;06:     <span class="k">cdef</span> <span class="kt">int</span> <span class="nf">i</span><span class="p">,</span> <span class="nf">j</span><span class="p">,</span> <span class="nf">x</span></pre>
<pre class='cython line score-0'>&#xA0;07:     <span class="k">cdef</span> <span class="kt">double</span> <span class="nf">k</span><span class="p">,</span> <span class="nf">slp</span><span class="p">,</span> <span class="nf">dzdx</span><span class="p">,</span> <span class="nf">dzdy</span></pre>
<pre class='cython line score-0' onclick='toggleDiv(this)'>+08:     <span class="n">I</span> <span class="o">=</span> <span class="n">outdata</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span></pre>
<pre class='cython code score-0'>  __pyx_v_I = (__pyx_v_outdata.shape[0]);
</pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+09:     <span class="n">J</span> <span class="o">=</span> <span class="n">outdata</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">1</span><span class="p">]</span></pre>
<pre class='cython code score-0'>  __pyx_v_J = (__pyx_v_outdata.shape[1]);
</pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+10:     <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">I</span><span class="p">):</span></pre>
<pre class='cython code score-0'>  __pyx_t_1 = __pyx_v_I;
  for (__pyx_t_2 = 0; __pyx_t_2 &lt; __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;
</pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+11:         <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">J</span><span class="p">):</span></pre>
<pre class='cython code score-0'>    __pyx_t_3 = __pyx_v_J;
    for (__pyx_t_4 = 0; __pyx_t_4 &lt; __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_j = __pyx_t_4;
</pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+12:             <span class="n">dzdx</span> <span class="o">=</span> <span class="p">(</span><span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mf">1</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mf">1</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mf">2</span><span class="p">])</span> <span class="o">/</span> <span class="mf">2</span></pre>
<pre class='cython code score-0'>      __pyx_t_5 = (__pyx_v_i + 1);
      __pyx_t_6 = __pyx_v_j;
      if (__pyx_t_5 &lt; 0) __pyx_t_5 += __pyx_v_indata.shape[0];
      if (__pyx_t_6 &lt; 0) __pyx_t_6 += __pyx_v_indata.shape[1];
      __pyx_t_7 = (__pyx_v_i + 1);
      __pyx_t_8 = (__pyx_v_j + 2);
      if (__pyx_t_7 &lt; 0) __pyx_t_7 += __pyx_v_indata.shape[0];
      if (__pyx_t_8 &lt; 0) __pyx_t_8 += __pyx_v_indata.shape[1];
      __pyx_v_dzdx = (((<em>((double </em>) ( /<em> dim=1 </em>/ (( /<em> dim=0 </em>/ (__pyx_v_indata.data + __pyx_t_5 * __pyx_v_indata.strides[0]) ) + __pyx_t_6 * __pyx_v_indata.strides[1]) ))) - (<em>((double </em>) ( /<em> dim=1 </em>/ (( /<em> dim=0 </em>/ (__pyx_v_indata.data + __pyx_t_7 * __pyx_v_indata.strides[0]) ) + __pyx_t_8 * __pyx_v_indata.strides[1]) )))) / 2.0);
</pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+13:             <span class="n">dzdy</span> <span class="o">=</span> <span class="p">(</span><span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mf">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mf">2</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mf">1</span><span class="p">])</span> <span class="o">/</span> <span class="mf">2</span></pre>
<pre class='cython code score-0'>      __pyx_t_9 = __pyx_v_i;
      __pyx_t_10 = (__pyx_v_j + 1);
      if (__pyx_t_9 &lt; 0) __pyx_t_9 += __pyx_v_indata.shape[0];
      if (__pyx_t_10 &lt; 0) __pyx_t_10 += __pyx_v_indata.shape[1];
      __pyx_t_11 = (__pyx_v_i + 2);
      __pyx_t_12 = (__pyx_v_j + 1);
      if (__pyx_t_11 &lt; 0) __pyx_t_11 += __pyx_v_indata.shape[0];
      if (__pyx_t_12 &lt; 0) __pyx_t_12 += __pyx_v_indata.shape[1];
      __pyx_v_dzdy = (((<em>((double </em>) ( /<em> dim=1 </em>/ (( /<em> dim=0 </em>/ (__pyx_v_indata.data + __pyx_t_9 * __pyx_v_indata.strides[0]) ) + __pyx_t_10 * __pyx_v_indata.strides[1]) ))) - (<em>((double </em>) ( /<em> dim=1 </em>/ (( /<em> dim=0 </em>/ (__pyx_v_indata.data + __pyx_t_11 * __pyx_v_indata.strides[0]) ) + __pyx_t_12 * __pyx_v_indata.strides[1]) )))) / 2.0);
</pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+14:             <span class="n">k</span> <span class="o">=</span> <span class="p">(</span><span class="n">dzdx</span> <span class="o"><em></span> <span class="n">dzdx</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">dzdy</span> <span class="o"></em></span> <span class="n">dzdy</span><span class="p">)</span></pre>
<pre class='cython code score-0'>      __pyx_v_k = ((__pyx_v_dzdx * __pyx_v_dzdx) + (__pyx_v_dzdy * __pyx_v_dzdy));
</pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+15:             <span class="n">slp</span> <span class="o">=</span> <span class="n">k</span><span class="o"><em><em></span><span class="mf">0.5</span> <span class="o"></em></span> <span class="mf">100</span></pre>
<pre class='cython code score-0'>      __pyx_v_slp = (pow(__pyx_v_k, 0.5) * 100.0);
</pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+16:             <span class="n">outdata</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">slp</span></pre>
<pre class='cython code score-0'>      __pyx_t_13 = __pyx_v_i;
      __pyx_t_14 = __pyx_v_j;
      if (__pyx_t_13 &lt; 0) __pyx_t_13 += __pyx_v_outdata.shape[0];
      if (__pyx_t_14 &lt; 0) __pyx_t_14 += __pyx_v_outdata.shape[1];
      </em>((double <em>) ( /</em> dim=1 <em>/ (( /</em> dim=0 */ (__pyx_v_outdata.data + __pyx_t_13 * __pyx_v_outdata.strides[0]) ) + __pyx_t_14 * __pyx_v_outdata.strides[1]) )) = __pyx_v_slp;
    }
  }
</pre></div></body></html></p>
<p>No yellow in the function body, that's what we like to see. The only Python interpreter call this function will invoke is the definition of the function itself. The speed advantage is significant:</p>
<div class="highlight"><pre><span class="n">reset_outdata</span><span class="p">()</span>
<span class="o">%</span><span class="n">timeit</span> <span class="n">slope_cython2</span><span class="p">(</span><span class="n">indata</span><span class="p">,</span> <span class="n">outdata</span><span class="p">)</span>
</pre></div>


<div class="highlight"><pre>10 loops, best of 3: 149 ms per loop
</pre></div>


<p>From ~8 seconds to 150 <em>milliseconds</em>, a speedup of more than 50x. And that's pretty good, but we're still only using a single CPU because of python's <a href="http://stackoverflow.com/questions/1294382/what-is-a-global-interpreter-lock-gil">Global Interpretter Lock (GIL)</a>. Let's use all those cores...</p>
<h2>Cython with OpenMP</h2>
<p>Cython supports <a href="http://docs.cython.org/src/userguide/parallelism.html">parallel processing</a> via threads using the OpenMP backend. What does that look like?</p>
<p>First of all, we have to add some extra compile flags to enable OpenMP. Next we put the loops in a <code>nogil</code> context which releases the GIL restriction, something we can only safely do when our code is in pure C without any interaction with Python objects. Also in the same context block is <code>parallel</code> which sets up the OpenMP threading. Finally we see <code>prange</code>, parallel range, which executes the outer loop in parallel across the number of cores specified. </p>
<div class="highlight"><pre><span class="o">%%</span><span class="n">cython</span> <span class="o">--</span><span class="nb">compile</span><span class="o">-</span><span class="n">args</span><span class="o">=-</span><span class="n">fopenmp</span> <span class="o">--</span><span class="n">link</span><span class="o">-</span><span class="n">args</span><span class="o">=-</span><span class="n">fopenmp</span> <span class="o">--</span><span class="n">force</span> <span class="o">-</span><span class="n">a</span>

<span class="kn">import</span> <span class="nn">cython</span>
<span class="kn">from</span> <span class="nn">cython.parallel</span> <span class="kn">import</span> <span class="n">prange</span><span class="p">,</span> <span class="n">parallel</span>

<span class="nd">@cython.boundscheck</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">slope_cython_openmp</span><span class="p">(</span><span class="n">double</span> <span class="p">[:,</span> <span class="p">:]</span> <span class="n">indata</span><span class="p">,</span> <span class="n">double</span> <span class="p">[:,</span> <span class="p">:]</span> <span class="n">outdata</span><span class="p">):</span>
    <span class="n">cdef</span> <span class="nb">int</span> <span class="n">I</span><span class="p">,</span> <span class="n">J</span>
    <span class="n">cdef</span> <span class="nb">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">x</span>
    <span class="n">cdef</span> <span class="n">double</span> <span class="n">k</span><span class="p">,</span> <span class="n">slp</span><span class="p">,</span> <span class="n">dzdx</span><span class="p">,</span> <span class="n">dzdy</span>
    <span class="n">I</span> <span class="o">=</span> <span class="n">outdata</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">J</span> <span class="o">=</span> <span class="n">outdata</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="k">with</span> <span class="n">nogil</span><span class="p">,</span> <span class="n">parallel</span><span class="p">(</span><span class="n">num_threads</span><span class="o">=</span><span class="mi">4</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">prange</span><span class="p">(</span><span class="n">I</span><span class="p">,</span> <span class="n">schedule</span><span class="o">=</span><span class="s">&#39;dynamic&#39;</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">J</span><span class="p">):</span>
                <span class="n">dzdx</span> <span class="o">=</span> <span class="p">(</span><span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">2</span><span class="p">])</span> <span class="o">/</span> <span class="mi">2</span>
                <span class="n">dzdy</span> <span class="o">=</span> <span class="p">(</span><span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="o">/</span> <span class="mi">2</span>
                <span class="n">k</span> <span class="o">=</span> <span class="p">(</span><span class="n">dzdx</span> <span class="o">*</span> <span class="n">dzdx</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">dzdy</span> <span class="o">*</span> <span class="n">dzdy</span><span class="p">)</span>
                <span class="n">slp</span> <span class="o">=</span> <span class="n">k</span><span class="o">**</span><span class="mf">0.5</span> <span class="o">*</span> <span class="mi">100</span>
                <span class="n">outdata</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">slp</span>
</pre></div>


<!DOCTYPE html>
<!-- Generated by Cython 0.22 -->
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <style type="text/css">

<p>body.cython { font-family: courier; font-size: 12; }</p>
<p>.cython.tag  {  }
.cython.line { margin: 0em }
.cython.code  { font-size: 9; color: #444444; display: none; margin: 0px 0px 0px 20px;  }</p>
<p>.cython.code .py_c_api  { color: red; }
.cython.code .py_macro_api  { color: #FF7000; }
.cython.code .pyx_c_api  { color: #FF3000; }
.cython.code .pyx_macro_api  { color: #FF7000; }
.cython.code .refnanny  { color: #FFA000; }
.cython.code .error_goto  { color: #FFA000; }</p>
<p>.cython.code .coerce  { color: #008000; border: 1px dotted #008000 }
.cython.code .py_attr { color: #FF0000; font-weight: bold; }
.cython.code .c_attr  { color: #0000FF; }
.cython.code .py_call { color: #FF0000; font-weight: bold; }
.cython.code .c_call  { color: #0000FF; }</p>
<p>.cython.score-0 {background-color: #FFFFff;}
.cython.score-1 {background-color: #FFFFe7;}
.cython.score-2 {background-color: #FFFFd4;}
.cython.score-3 {background-color: #FFFFc4;}
.cython.score-4 {background-color: #FFFFb6;}
.cython.score-5 {background-color: #FFFFaa;}
.cython.score-6 {background-color: #FFFF9f;}
.cython.score-7 {background-color: #FFFF96;}
.cython.score-8 {background-color: #FFFF8d;}
.cython.score-9 {background-color: #FFFF86;}
.cython.score-10 {background-color: #FFFF7f;}
.cython.score-11 {background-color: #FFFF79;}
.cython.score-12 {background-color: #FFFF73;}
.cython.score-13 {background-color: #FFFF6e;}
.cython.score-14 {background-color: #FFFF6a;}
.cython.score-15 {background-color: #FFFF66;}
.cython.score-16 {background-color: #FFFF62;}
.cython.score-17 {background-color: #FFFF5e;}
.cython.score-18 {background-color: #FFFF5b;}
.cython.score-19 {background-color: #FFFF57;}
.cython.score-20 {background-color: #FFFF55;}
.cython.score-21 {background-color: #FFFF52;}
.cython.score-22 {background-color: #FFFF4f;}
.cython.score-23 {background-color: #FFFF4d;}
.cython.score-24 {background-color: #FFFF4b;}
.cython.score-25 {background-color: #FFFF48;}
.cython.score-26 {background-color: #FFFF46;}
.cython.score-27 {background-color: #FFFF44;}
.cython.score-28 {background-color: #FFFF43;}
.cython.score-29 {background-color: #FFFF41;}
.cython.score-30 {background-color: #FFFF3f;}
.cython.score-31 {background-color: #FFFF3e;}
.cython.score-32 {background-color: #FFFF3c;}
.cython.score-33 {background-color: #FFFF3b;}
.cython.score-34 {background-color: #FFFF39;}
.cython.score-35 {background-color: #FFFF38;}
.cython.score-36 {background-color: #FFFF37;}
.cython.score-37 {background-color: #FFFF36;}
.cython.score-38 {background-color: #FFFF35;}
.cython.score-39 {background-color: #FFFF34;}
.cython.score-40 {background-color: #FFFF33;}
.cython.score-41 {background-color: #FFFF32;}
.cython.score-42 {background-color: #FFFF31;}
.cython.score-43 {background-color: #FFFF30;}
.cython.score-44 {background-color: #FFFF2f;}
.cython.score-45 {background-color: #FFFF2e;}
.cython.score-46 {background-color: #FFFF2d;}
.cython.score-47 {background-color: #FFFF2c;}
.cython.score-48 {background-color: #FFFF2b;}
.cython.score-49 {background-color: #FFFF2b;}
.cython.score-50 {background-color: #FFFF2a;}
.cython.score-51 {background-color: #FFFF29;}
.cython.score-52 {background-color: #FFFF29;}
.cython.score-53 {background-color: #FFFF28;}
.cython.score-54 {background-color: #FFFF27;}
.cython.score-55 {background-color: #FFFF27;}
.cython.score-56 {background-color: #FFFF26;}
.cython.score-57 {background-color: #FFFF26;}
.cython.score-58 {background-color: #FFFF25;}
.cython.score-59 {background-color: #FFFF24;}
.cython.score-60 {background-color: #FFFF24;}
.cython.score-61 {background-color: #FFFF23;}
.cython.score-62 {background-color: #FFFF23;}
.cython.score-63 {background-color: #FFFF22;}
.cython.score-64 {background-color: #FFFF22;}
.cython.score-65 {background-color: #FFFF22;}
.cython.score-66 {background-color: #FFFF21;}
.cython.score-67 {background-color: #FFFF21;}
.cython.score-68 {background-color: #FFFF20;}
.cython.score-69 {background-color: #FFFF20;}
.cython.score-70 {background-color: #FFFF1f;}
.cython.score-71 {background-color: #FFFF1f;}
.cython.score-72 {background-color: #FFFF1f;}
.cython.score-73 {background-color: #FFFF1e;}
.cython.score-74 {background-color: #FFFF1e;}
.cython.score-75 {background-color: #FFFF1e;}
.cython.score-76 {background-color: #FFFF1d;}
.cython.score-77 {background-color: #FFFF1d;}
.cython.score-78 {background-color: #FFFF1c;}
.cython.score-79 {background-color: #FFFF1c;}
.cython.score-80 {background-color: #FFFF1c;}
.cython.score-81 {background-color: #FFFF1c;}
.cython.score-82 {background-color: #FFFF1b;}
.cython.score-83 {background-color: #FFFF1b;}
.cython.score-84 {background-color: #FFFF1b;}
.cython.score-85 {background-color: #FFFF1a;}
.cython.score-86 {background-color: #FFFF1a;}
.cython.score-87 {background-color: #FFFF1a;}
.cython.score-88 {background-color: #FFFF1a;}
.cython.score-89 {background-color: #FFFF19;}
.cython.score-90 {background-color: #FFFF19;}
.cython.score-91 {background-color: #FFFF19;}
.cython.score-92 {background-color: #FFFF19;}
.cython.score-93 {background-color: #FFFF18;}
.cython.score-94 {background-color: #FFFF18;}
.cython.score-95 {background-color: #FFFF18;}
.cython.score-96 {background-color: #FFFF18;}
.cython.score-97 {background-color: #FFFF17;}
.cython.score-98 {background-color: #FFFF17;}
.cython.score-99 {background-color: #FFFF17;}
.cython.score-100 {background-color: #FFFF17;}
.cython.score-101 {background-color: #FFFF16;}
.cython.score-102 {background-color: #FFFF16;}
.cython.score-103 {background-color: #FFFF16;}
.cython.score-104 {background-color: #FFFF16;}
.cython.score-105 {background-color: #FFFF16;}
.cython.score-106 {background-color: #FFFF15;}
.cython.score-107 {background-color: #FFFF15;}
.cython.score-108 {background-color: #FFFF15;}
.cython.score-109 {background-color: #FFFF15;}
.cython.score-110 {background-color: #FFFF15;}
.cython.score-111 {background-color: #FFFF15;}
.cython.score-112 {background-color: #FFFF14;}
.cython.score-113 {background-color: #FFFF14;}
.cython.score-114 {background-color: #FFFF14;}
.cython.score-115 {background-color: #FFFF14;}
.cython.score-116 {background-color: #FFFF14;}
.cython.score-117 {background-color: #FFFF14;}
.cython.score-118 {background-color: #FFFF13;}
.cython.score-119 {background-color: #FFFF13;}
.cython.score-120 {background-color: #FFFF13;}
.cython.score-121 {background-color: #FFFF13;}
.cython.score-122 {background-color: #FFFF13;}
.cython.score-123 {background-color: #FFFF13;}
.cython.score-124 {background-color: #FFFF13;}
.cython.score-125 {background-color: #FFFF12;}
.cython.score-126 {background-color: #FFFF12;}
.cython.score-127 {background-color: #FFFF12;}
.cython.score-128 {background-color: #FFFF12;}
.cython.score-129 {background-color: #FFFF12;}
.cython.score-130 {background-color: #FFFF12;}
.cython.score-131 {background-color: #FFFF12;}
.cython.score-132 {background-color: #FFFF11;}
.cython.score-133 {background-color: #FFFF11;}
.cython.score-134 {background-color: #FFFF11;}
.cython.score-135 {background-color: #FFFF11;}
.cython.score-136 {background-color: #FFFF11;}
.cython.score-137 {background-color: #FFFF11;}
.cython.score-138 {background-color: #FFFF11;}
.cython.score-139 {background-color: #FFFF11;}
.cython.score-140 {background-color: #FFFF11;}
.cython.score-141 {background-color: #FFFF10;}
.cython.score-142 {background-color: #FFFF10;}
.cython.score-143 {background-color: #FFFF10;}
.cython.score-144 {background-color: #FFFF10;}
.cython.score-145 {background-color: #FFFF10;}
.cython.score-146 {background-color: #FFFF10;}
.cython.score-147 {background-color: #FFFF10;}
.cython.score-148 {background-color: #FFFF10;}
.cython.score-149 {background-color: #FFFF10;}
.cython.score-150 {background-color: #FFFF0f;}
.cython.score-151 {background-color: #FFFF0f;}
.cython.score-152 {background-color: #FFFF0f;}
.cython.score-153 {background-color: #FFFF0f;}
.cython.score-154 {background-color: #FFFF0f;}
.cython.score-155 {background-color: #FFFF0f;}
.cython.score-156 {background-color: #FFFF0f;}
.cython.score-157 {background-color: #FFFF0f;}
.cython.score-158 {background-color: #FFFF0f;}
.cython.score-159 {background-color: #FFFF0f;}
.cython.score-160 {background-color: #FFFF0f;}
.cython.score-161 {background-color: #FFFF0e;}
.cython.score-162 {background-color: #FFFF0e;}
.cython.score-163 {background-color: #FFFF0e;}
.cython.score-164 {background-color: #FFFF0e;}
.cython.score-165 {background-color: #FFFF0e;}
.cython.score-166 {background-color: #FFFF0e;}
.cython.score-167 {background-color: #FFFF0e;}
.cython.score-168 {background-color: #FFFF0e;}
.cython.score-169 {background-color: #FFFF0e;}
.cython.score-170 {background-color: #FFFF0e;}
.cython.score-171 {background-color: #FFFF0e;}
.cython.score-172 {background-color: #FFFF0e;}
.cython.score-173 {background-color: #FFFF0d;}
.cython.score-174 {background-color: #FFFF0d;}
.cython.score-175 {background-color: #FFFF0d;}
.cython.score-176 {background-color: #FFFF0d;}
.cython.score-177 {background-color: #FFFF0d;}
.cython.score-178 {background-color: #FFFF0d;}
.cython.score-179 {background-color: #FFFF0d;}
.cython.score-180 {background-color: #FFFF0d;}
.cython.score-181 {background-color: #FFFF0d;}
.cython.score-182 {background-color: #FFFF0d;}
.cython.score-183 {background-color: #FFFF0d;}
.cython.score-184 {background-color: #FFFF0d;}
.cython.score-185 {background-color: #FFFF0d;}
.cython.score-186 {background-color: #FFFF0d;}
.cython.score-187 {background-color: #FFFF0c;}
.cython.score-188 {background-color: #FFFF0c;}
.cython.score-189 {background-color: #FFFF0c;}
.cython.score-190 {background-color: #FFFF0c;}
.cython.score-191 {background-color: #FFFF0c;}
.cython.score-192 {background-color: #FFFF0c;}
.cython.score-193 {background-color: #FFFF0c;}
.cython.score-194 {background-color: #FFFF0c;}
.cython.score-195 {background-color: #FFFF0c;}
.cython.score-196 {background-color: #FFFF0c;}
.cython.score-197 {background-color: #FFFF0c;}
.cython.score-198 {background-color: #FFFF0c;}
.cython.score-199 {background-color: #FFFF0c;}
.cython.score-200 {background-color: #FFFF0c;}
.cython.score-201 {background-color: #FFFF0c;}
.cython.score-202 {background-color: #FFFF0c;}
.cython.score-203 {background-color: #FFFF0b;}
.cython.score-204 {background-color: #FFFF0b;}
.cython.score-205 {background-color: #FFFF0b;}
.cython.score-206 {background-color: #FFFF0b;}
.cython.score-207 {background-color: #FFFF0b;}
.cython.score-208 {background-color: #FFFF0b;}
.cython.score-209 {background-color: #FFFF0b;}
.cython.score-210 {background-color: #FFFF0b;}
.cython.score-211 {background-color: #FFFF0b;}
.cython.score-212 {background-color: #FFFF0b;}
.cython.score-213 {background-color: #FFFF0b;}
.cython.score-214 {background-color: #FFFF0b;}
.cython.score-215 {background-color: #FFFF0b;}
.cython.score-216 {background-color: #FFFF0b;}
.cython.score-217 {background-color: #FFFF0b;}
.cython.score-218 {background-color: #FFFF0b;}
.cython.score-219 {background-color: #FFFF0b;}
.cython.score-220 {background-color: #FFFF0b;}
.cython.score-221 {background-color: #FFFF0b;}
.cython.score-222 {background-color: #FFFF0a;}
.cython.score-223 {background-color: #FFFF0a;}
.cython.score-224 {background-color: #FFFF0a;}
.cython.score-225 {background-color: #FFFF0a;}
.cython.score-226 {background-color: #FFFF0a;}
.cython.score-227 {background-color: #FFFF0a;}
.cython.score-228 {background-color: #FFFF0a;}
.cython.score-229 {background-color: #FFFF0a;}
.cython.score-230 {background-color: #FFFF0a;}
.cython.score-231 {background-color: #FFFF0a;}
.cython.score-232 {background-color: #FFFF0a;}
.cython.score-233 {background-color: #FFFF0a;}
.cython.score-234 {background-color: #FFFF0a;}
.cython.score-235 {background-color: #FFFF0a;}
.cython.score-236 {background-color: #FFFF0a;}
.cython.score-237 {background-color: #FFFF0a;}
.cython.score-238 {background-color: #FFFF0a;}
.cython.score-239 {background-color: #FFFF0a;}
.cython.score-240 {background-color: #FFFF0a;}
.cython.score-241 {background-color: #FFFF0a;}
.cython.score-242 {background-color: #FFFF0a;}
.cython.score-243 {background-color: #FFFF0a;}
.cython.score-244 {background-color: #FFFF0a;}
.cython.score-245 {background-color: #FFFF0a;}
.cython.score-246 {background-color: #FFFF09;}
.cython.score-247 {background-color: #FFFF09;}
.cython.score-248 {background-color: #FFFF09;}
.cython.score-249 {background-color: #FFFF09;}
.cython.score-250 {background-color: #FFFF09;}
.cython.score-251 {background-color: #FFFF09;}
.cython.score-252 {background-color: #FFFF09;}
.cython.score-253 {background-color: #FFFF09;}
.cython.score-254 {background-color: #FFFF09;}.cython .hll { background-color: #ffffcc }
.cython  { background: #f8f8f8; }
.cython .c { color: #408080; font-style: italic } /<em> Comment </em>/
.cython .err { border: 1px solid #FF0000 } /<em> Error </em>/
.cython .k { color: #008000; font-weight: bold } /<em> Keyword </em>/
.cython .o { color: #666666 } /<em> Operator </em>/
.cython .cm { color: #408080; font-style: italic } /<em> Comment.Multiline </em>/
.cython .cp { color: #BC7A00 } /<em> Comment.Preproc </em>/
.cython .c1 { color: #408080; font-style: italic } /<em> Comment.Single </em>/
.cython .cs { color: #408080; font-style: italic } /<em> Comment.Special </em>/
.cython .gd { color: #A00000 } /<em> Generic.Deleted </em>/
.cython .ge { font-style: italic } /<em> Generic.Emph </em>/
.cython .gr { color: #FF0000 } /<em> Generic.Error </em>/
.cython .gh { color: #000080; font-weight: bold } /<em> Generic.Heading </em>/
.cython .gi { color: #00A000 } /<em> Generic.Inserted </em>/
.cython .go { color: #888888 } /<em> Generic.Output </em>/
.cython .gp { color: #000080; font-weight: bold } /<em> Generic.Prompt </em>/
.cython .gs { font-weight: bold } /<em> Generic.Strong </em>/
.cython .gu { color: #800080; font-weight: bold } /<em> Generic.Subheading </em>/
.cython .gt { color: #0044DD } /<em> Generic.Traceback </em>/
.cython .kc { color: #008000; font-weight: bold } /<em> Keyword.Constant </em>/
.cython .kd { color: #008000; font-weight: bold } /<em> Keyword.Declaration </em>/
.cython .kn { color: #008000; font-weight: bold } /<em> Keyword.Namespace </em>/
.cython .kp { color: #008000 } /<em> Keyword.Pseudo </em>/
.cython .kr { color: #008000; font-weight: bold } /<em> Keyword.Reserved </em>/
.cython .kt { color: #B00040 } /<em> Keyword.Type </em>/
.cython .m { color: #666666 } /<em> Literal.Number </em>/
.cython .s { color: #BA2121 } /<em> Literal.String </em>/
.cython .na { color: #7D9029 } /<em> Name.Attribute </em>/
.cython .nb { color: #008000 } /<em> Name.Builtin </em>/
.cython .nc { color: #0000FF; font-weight: bold } /<em> Name.Class </em>/
.cython .no { color: #880000 } /<em> Name.Constant </em>/
.cython .nd { color: #AA22FF } /<em> Name.Decorator </em>/
.cython .ni { color: #999999; font-weight: bold } /<em> Name.Entity </em>/
.cython .ne { color: #D2413A; font-weight: bold } /<em> Name.Exception </em>/
.cython .nf { color: #0000FF } /<em> Name.Function </em>/
.cython .nl { color: #A0A000 } /<em> Name.Label </em>/
.cython .nn { color: #0000FF; font-weight: bold } /<em> Name.Namespace </em>/
.cython .nt { color: #008000; font-weight: bold } /<em> Name.Tag </em>/
.cython .nv { color: #19177C } /<em> Name.Variable </em>/
.cython .ow { color: #AA22FF; font-weight: bold } /<em> Operator.Word </em>/
.cython .w { color: #bbbbbb } /<em> Text.Whitespace </em>/
.cython .mb { color: #666666 } /<em> Literal.Number.Bin </em>/
.cython .mf { color: #666666 } /<em> Literal.Number.Float </em>/
.cython .mh { color: #666666 } /<em> Literal.Number.Hex </em>/
.cython .mi { color: #666666 } /<em> Literal.Number.Integer </em>/
.cython .mo { color: #666666 } /<em> Literal.Number.Oct </em>/
.cython .sb { color: #BA2121 } /<em> Literal.String.Backtick </em>/
.cython .sc { color: #BA2121 } /<em> Literal.String.Char </em>/
.cython .sd { color: #BA2121; font-style: italic } /<em> Literal.String.Doc </em>/
.cython .s2 { color: #BA2121 } /<em> Literal.String.Double </em>/
.cython .se { color: #BB6622; font-weight: bold } /<em> Literal.String.Escape </em>/
.cython .sh { color: #BA2121 } /<em> Literal.String.Heredoc </em>/
.cython .si { color: #BB6688; font-weight: bold } /<em> Literal.String.Interpol </em>/
.cython .sx { color: #008000 } /<em> Literal.String.Other </em>/
.cython .sr { color: #BB6688 } /<em> Literal.String.Regex </em>/
.cython .s1 { color: #BA2121 } /<em> Literal.String.Single </em>/
.cython .ss { color: #19177C } /<em> Literal.String.Symbol </em>/
.cython .bp { color: #008000 } /<em> Name.Builtin.Pseudo </em>/
.cython .vc { color: #19177C } /<em> Name.Variable.Class </em>/
.cython .vg { color: #19177C } /<em> Name.Variable.Global </em>/
.cython .vi { color: #19177C } /<em> Name.Variable.Instance </em>/
.cython .il { color: #666666 } /<em> Literal.Number.Integer.Long </em>/
    </style>
    <script>
    function toggleDiv(id) {
        theDiv = id.nextElementSibling
        if (theDiv.style.display != 'block') theDiv.style.display = 'block';
        else theDiv.style.display = 'none';
    }
    </script>
</head>
<body class="cython">
<p>Generated by Cython 0.22</p>
<div class="cython"><pre class='cython line score-0'>&#xA0;01: </pre>
<pre class='cython line score-11' onclick='toggleDiv(this)'>+02: <span class="k">import</span> <span class="nn">cython</span></pre>
<pre class='cython code score-11'>  <strong>pyx_t_1 = <span class='py_c_api'>PyDict_New</span>();<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
  <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
  if (<span class='py_c_api'>PyDict_SetItem</span>(__pyx_d, __pyx_n_s_test, __pyx_t_1) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
  <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
</pre><pre class='cython line score-0'>&#xA0;03: <span class="k">from</span> <span class="nn">cython.parallel</span> <span class="k">import</span> <span class="n">prange</span><span class="p">,</span> <span class="n">parallel</span></pre>
<pre class='cython line score-0'>&#xA0;04: </pre>
<pre class='cython line score-0'>&#xA0;05: <span class="nd">@cython</span><span class="o">.</span><span class="n">boundscheck</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span></pre>
<pre class='cython line score-48' onclick='toggleDiv(this)'>+06: <span class="k">def</span> <span class="nf">slope_cython_openmp</span><span class="p">(</span><span class="n">double</span> <span class="p">[:,</span> <span class="p">:]</span> <span class="n">indata</span><span class="p">,</span> <span class="n">double</span> <span class="p">[:,</span> <span class="p">:]</span> <span class="n">outdata</span><span class="p">):</span></pre>
<pre class='cython code score-48'>/<em> Python wrapper </em>/
static PyObject <em>__pyx_pw_46_cython_magic_2e6b712520789537463b24d179fbe62b_1slope_cython_openmp(PyObject </em>__pyx_self, PyObject <em>__pyx_args, PyObject </em>__pyx_kwds); /<em>proto</em>/
static PyMethodDef __pyx_mdef_46_cython_magic_2e6b712520789537463b24d179fbe62b_1slope_cython_openmp = {"slope_cython_openmp", (PyCFunction)__pyx_pw_46_cython_magic_2e6b712520789537463b24d179fbe62b_1slope_cython_openmp, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject <em>__pyx_pw_46_cython_magic_2e6b712520789537463b24d179fbe62b_1slope_cython_openmp(PyObject </em>__pyx_self, PyObject <em>__pyx_args, PyObject </em>__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_indata = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_outdata = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject <em>__pyx_r = 0;
  <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
  <span class='refnanny'>__Pyx_RefNannySetupContext</span>("slope_cython_openmp (wrapper)", 0);
  {
    static PyObject </em><em>__pyx_pyargnames[] = {&amp;__pyx_n_s_indata,&amp;__pyx_n_s_outdata,0};
    PyObject</em> values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 1);
        case  1: values[0] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = <span class='py_c_api'>PyDict_Size</span>(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = <span class='py_c_api'>PyDict_GetItem</span>(__pyx_kwds, __pyx_n_s_indata)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = <span class='py_c_api'>PyDict_GetItem</span>(__pyx_kwds, __pyx_n_s_outdata)) != 0)) kw_args--;
        else {
          <span class='pyx_c_api'>__Pyx_RaiseArgtupleInvalid</span>("slope_cython_openmp", 1, 2, 2, 1); <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L3_error;}</span>
        }
      }
      if (unlikely(kw_args &gt; 0)) {
        if (unlikely(<span class='pyx_c_api'>__Pyx_ParseOptionalKeywords</span>(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slope_cython_openmp") &lt; 0)) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L3_error;}</span>
      }
    } else if (<span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 0);
      values[1] = <span class='py_macro_api'>PyTuple_GET_ITEM</span>(__pyx_args, 1);
    }
    __pyx_v_indata = <span class='pyx_c_api'>__Pyx_PyObject_to_MemoryviewSlice_dsds_double</span>(values[0]);<span class='error_goto'> if (unlikely(!__pyx_v_indata.memview)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L3_error;}</span>
    __pyx_v_outdata = <span class='pyx_c_api'>__Pyx_PyObject_to_MemoryviewSlice_dsds_double</span>(values[1]);<span class='error_goto'> if (unlikely(!__pyx_v_outdata.memview)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L3_error;}</span>
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  <span class='pyx_c_api'>__Pyx_RaiseArgtupleInvalid</span>("slope_cython_openmp", 1, 2, 2, <span class='py_macro_api'>PyTuple_GET_SIZE</span>(__pyx_args)); <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE</strong>; goto __pyx_L3_error;}</span>
  __pyx_L3_error:;
  <span class='pyx_c_api'>__Pyx_AddTraceback</span>("_cython_magic_2e6b712520789537463b24d179fbe62b.slope_cython_openmp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_46_cython_magic_2e6b712520789537463b24d179fbe62b_slope_cython_openmp(__pyx_self, __pyx_v_indata, __pyx_v_outdata);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;</p>
<p>/<em> function exit code </em>/
  <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
  return __pyx_r;
}</p>
<p>static PyObject <em>__pyx_pf_46_cython_magic_2e6b712520789537463b24d179fbe62b_slope_cython_openmp(CYTHON_UNUSED PyObject </em><strong>pyx_self, __Pyx_memviewslice __pyx_v_indata, __Pyx_memviewslice __pyx_v_outdata) {
  CYTHON_UNUSED int __pyx_v_I;
  int __pyx_v_J;
  int __pyx_v_i;
  int __pyx_v_j;
  double __pyx_v_k;
  double __pyx_v_slp;
  double __pyx_v_dzdx;
  double __pyx_v_dzdy;
  PyObject <em>__pyx_r = NULL;
  <span class='refnanny'>__Pyx_RefNannyDeclarations</span>
  <span class='refnanny'>__Pyx_RefNannySetupContext</span>("slope_cython_openmp", 0);
/</em> … <em>/
  /</em> function exit code <em>/
  __pyx_r = Py_None; <span class='pyx_macro_api'>__Pyx_INCREF</span>(Py_None);
  __PYX_XDEC_MEMVIEW(&amp;__pyx_v_indata, 1);
  __PYX_XDEC_MEMVIEW(&amp;__pyx_v_outdata, 1);
  <span class='refnanny'>__Pyx_XGIVEREF</span>(__pyx_r);
  <span class='refnanny'>__Pyx_RefNannyFinishContext</span>();
  return __pyx_r;
}
/</em> … <em>/
  <strong>pyx_tuple__13 = <span class='py_c_api'>PyTuple_Pack</span>(11, __pyx_n_s_indata, __pyx_n_s_outdata, __pyx_n_s_I, __pyx_n_s_J, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_x, __pyx_n_s_k, __pyx_n_s_slp, __pyx_n_s_dzdx, __pyx_n_s_dzdy);<span class='error_goto'> if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE</strong>; goto __pyx_L1_error;}</span>
  <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_tuple__13);
  <span class='refnanny'>__Pyx_GIVEREF</span>(__pyx_tuple__13);
/</em> … <em>/
  <strong>pyx_t_1 = PyCFunction_NewEx(&amp;__pyx_mdef_46_cython_magic_2e6b712520789537463b24d179fbe62b_1slope_cython_openmp, NULL, __pyx_n_s_cython_magic_2e6b71252078953746);<span class='error_goto'> if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
  <span class='refnanny'>__Pyx_GOTREF</span>(__pyx_t_1);
  if (<span class='py_c_api'>PyDict_SetItem</span>(__pyx_d, __pyx_n_s_slope_cython_openmp, __pyx_t_1) &lt; 0) <span class='error_goto'>{__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE</strong>; goto __pyx_L1_error;}</span>
  <span class='pyx_macro_api'>__Pyx_DECREF</span>(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_codeobj__14 = (PyObject</em>)<span class='pyx_c_api'>__Pyx_PyCode_New</span>(2, 0, 11, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_vagrant_cache_ipython_cyth, __pyx_n_s_slope_cython_openmp, 6, __pyx_empty_bytes);<span class='error_goto'> if (unlikely(!__pyx_codeobj__14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE</strong>; goto <strong>pyx_L1_error;}</span>
</pre><pre class='cython line score-0'>&#xA0;07:     <span class="k">cdef</span> <span class="kt">int</span> <span class="nf">I</span><span class="p">,</span> <span class="nf">J</span></pre>
<pre class='cython line score-0'>&#xA0;08:     <span class="k">cdef</span> <span class="kt">int</span> <span class="nf">i</span><span class="p">,</span> <span class="nf">j</span><span class="p">,</span> <span class="nf">x</span></pre>
<pre class='cython line score-0'>&#xA0;09:     <span class="k">cdef</span> <span class="kt">double</span> <span class="nf">k</span><span class="p">,</span> <span class="nf">slp</span><span class="p">,</span> <span class="nf">dzdx</span><span class="p">,</span> <span class="nf">dzdy</span></pre>
<pre class='cython line score-0' onclick='toggleDiv(this)'>+10:     <span class="n">I</span> <span class="o">=</span> <span class="n">outdata</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span></pre>
<pre class='cython code score-0'>  __pyx_v_I = (__pyx_v_outdata.shape[0]);
</pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+11:     <span class="n">J</span> <span class="o">=</span> <span class="n">outdata</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mf">1</span><span class="p">]</span></pre>
<pre class='cython code score-0'>  __pyx_v_J = (__pyx_v_outdata.shape[1]);
</pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+12:     <span class="k">with</span> <span class="k">nogil</span><span class="p">,</span> <span class="n">parallel</span><span class="p">(</span><span class="n">num_threads</span><span class="o">=</span><span class="mf">4</span><span class="p">):</span></pre>
<pre class='cython code score-0'>  {
      #ifdef WITH_THREAD
      PyThreadState <em>_save;
      Py_UNBLOCK_THREADS
      #endif
      /</em>try:<em>/ {
        {
            #if ((defined(<strong>APPLE</strong>) || defined(<strong>OSX</strong>)) &amp;&amp; (defined(<strong>GNUC</strong>) &amp;&amp; (<strong>GNUC</strong> &gt; 2 || (<strong>GNUC</strong> == 2 &amp;&amp; (<strong>GNUC_MINOR</strong> &gt; 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            #ifdef _OPENMP
            #pragma omp parallel  num_threads(4)
            #endif /</em> _OPENMP <em>/
            {
/</em> … <em>/
      /</em>finally:<em>/ {
        /</em>normal exit:<em>/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }
</pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+13:         <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">prange</span><span class="p">(</span><span class="n">I</span><span class="p">,</span> <span class="n">schedule</span><span class="o">=</span><span class="s">&#39;dynamic&#39;</span><span class="p">):</span></pre>
<pre class='cython code score-0'>                __pyx_t_1 = __pyx_v_I;
                if (1 == 0) abort();
                {
                    __pyx_t_3 = (__pyx_t_1 - 0) / 1;
                    if (__pyx_t_3 &gt; 0)
                    {
                        #ifdef _OPENMP
                        #pragma omp for lastprivate(__pyx_v_dzdx) lastprivate(__pyx_v_dzdy) firstprivate(__pyx_v_i) lastprivate(__pyx_v_i) lastprivate(__pyx_v_j) lastprivate(__pyx_v_slp) lastprivate(__pyx_v_k) schedule(dynamic)
                        #endif /</em> _OPENMP <em>/
                        for (__pyx_t_2 = 0; __pyx_t_2 &lt; __pyx_t_3; __pyx_t_2++){
                            {
                                __pyx_v_i = 0 + 1 * __pyx_t_2;
                                /</em> Initialize private variables to invalid values <em>/
                                __pyx_v_dzdx = ((double)__PYX_NAN());
                                __pyx_v_dzdy = ((double)__PYX_NAN());
                                __pyx_v_j = ((int)0xbad0bad0);
                                __pyx_v_slp = ((double)__PYX_NAN());
                                __pyx_v_k = ((double)__PYX_NAN());
</pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+14:             <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">J</span><span class="p">):</span></pre>
<pre class='cython code score-0'>                                __pyx_t_4 = __pyx_v_J;
                                for (__pyx_t_5 = 0; __pyx_t_5 &lt; __pyx_t_4; __pyx_t_5+=1) {
                                  __pyx_v_j = __pyx_t_5;
</pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+15:                 <span class="n">dzdx</span> <span class="o">=</span> <span class="p">(</span><span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mf">1</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mf">1</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mf">2</span><span class="p">])</span> <span class="o">/</span> <span class="mf">2</span></pre>
<pre class='cython code score-0'>                                  __pyx_t_6 = (__pyx_v_i + 1);
                                  __pyx_t_7 = __pyx_v_j;
                                  if (__pyx_t_6 &lt; 0) __pyx_t_6 += __pyx_v_indata.shape[0];
                                  if (__pyx_t_7 &lt; 0) __pyx_t_7 += __pyx_v_indata.shape[1];
                                  __pyx_t_8 = (__pyx_v_i + 1);
                                  __pyx_t_9 = (__pyx_v_j + 2);
                                  if (__pyx_t_8 &lt; 0) __pyx_t_8 += __pyx_v_indata.shape[0];
                                  if (__pyx_t_9 &lt; 0) __pyx_t_9 += __pyx_v_indata.shape[1];
                                  __pyx_v_dzdx = (((</em>((double <em>) ( /</em> dim=1 <em>/ (( /</em> dim=0 <em>/ (__pyx_v_indata.data + __pyx_t_6 * __pyx_v_indata.strides[0]) ) + __pyx_t_7 * __pyx_v_indata.strides[1]) ))) - (</em>((double <em>) ( /</em> dim=1 <em>/ (( /</em> dim=0 <em>/ (__pyx_v_indata.data + __pyx_t_8 * __pyx_v_indata.strides[0]) ) + __pyx_t_9 * __pyx_v_indata.strides[1]) )))) / 2.0);
</pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+16:                 <span class="n">dzdy</span> <span class="o">=</span> <span class="p">(</span><span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mf">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">indata</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mf">2</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mf">1</span><span class="p">])</span> <span class="o">/</span> <span class="mf">2</span></pre>
<pre class='cython code score-0'>                                  __pyx_t_10 = __pyx_v_i;
                                  __pyx_t_11 = (__pyx_v_j + 1);
                                  if (__pyx_t_10 &lt; 0) __pyx_t_10 += __pyx_v_indata.shape[0];
                                  if (__pyx_t_11 &lt; 0) __pyx_t_11 += __pyx_v_indata.shape[1];
                                  __pyx_t_12 = (__pyx_v_i + 2);
                                  __pyx_t_13 = (__pyx_v_j + 1);
                                  if (__pyx_t_12 &lt; 0) __pyx_t_12 += __pyx_v_indata.shape[0];
                                  if (__pyx_t_13 &lt; 0) __pyx_t_13 += __pyx_v_indata.shape[1];
                                  __pyx_v_dzdy = (((</em>((double <em>) ( /</em> dim=1 <em>/ (( /</em> dim=0 <em>/ (__pyx_v_indata.data + __pyx_t_10 * __pyx_v_indata.strides[0]) ) + __pyx_t_11 * __pyx_v_indata.strides[1]) ))) - (</em>((double <em>) ( /</em> dim=1 <em>/ (( /</em> dim=0 <em>/ (__pyx_v_indata.data + __pyx_t_12 * __pyx_v_indata.strides[0]) ) + __pyx_t_13 * __pyx_v_indata.strides[1]) )))) / 2.0);
</pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+17:                 <span class="n">k</span> <span class="o">=</span> <span class="p">(</span><span class="n">dzdx</span> <span class="o"></em></span> <span class="n">dzdx</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">dzdy</span> <span class="o"><em></span> <span class="n">dzdy</span><span class="p">)</span></pre>
<pre class='cython code score-0'>                                  __pyx_v_k = ((__pyx_v_dzdx * __pyx_v_dzdx) + (__pyx_v_dzdy * __pyx_v_dzdy));
</pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+18:                 <span class="n">slp</span> <span class="o">=</span> <span class="n">k</span><span class="o"></em><em></span><span class="mf">0.5</span> <span class="o"></em></span> <span class="mf">100</span></pre>
<pre class='cython code score-0'>                                  __pyx_v_slp = (pow(__pyx_v_k, 0.5) * 100.0);
</pre><pre class='cython line score-0' onclick='toggleDiv(this)'>+19:                 <span class="n">outdata</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">slp</span></pre>
<pre class='cython code score-0'>                                  __pyx_t_14 = __pyx_v_i;
                                  __pyx_t_15 = __pyx_v_j;
                                  if (__pyx_t_14 &lt; 0) __pyx_t_14 += __pyx_v_outdata.shape[0];
                                  if (__pyx_t_15 &lt; 0) __pyx_t_15 += __pyx_v_outdata.shape[1];
                                  <em>((double </em>) ( /<em> dim=1 </em>/ (( /<em> dim=0 </em>/ (__pyx_v_outdata.data + __pyx_t_14 * __pyx_v_outdata.strides[0]) ) + __pyx_t_15 * __pyx_v_outdata.strides[1]) )) = __pyx_v_slp;
                                }
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE</strong>) || defined(<strong>OSX</strong>)) &amp;&amp; (defined(<strong>GNUC</strong>) &amp;&amp; (<strong>GNUC</strong> &gt; 2 || (<strong>GNUC</strong> == 2 &amp;&amp; (<strong>GNUC_MINOR</strong> &gt; 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }
</pre></div></body></html></p>
<div class="highlight"><pre><span class="n">reset_outdata</span><span class="p">()</span>
<span class="o">%</span><span class="n">timeit</span> <span class="n">slope_cython_openmp</span><span class="p">(</span><span class="n">indata</span><span class="p">,</span> <span class="n">outdata</span><span class="p">)</span>
</pre></div>


<div class="highlight"><pre>10 loops, best of 3: 41.6 ms per loop
</pre></div>


<p>42ms for the multi-threaded version down, from 150ms for the single-core version - an <em>additional</em> speedup of 3.6x. Since we had 4 threads, 4x would be ideal but threading has some overhead. If the computation is sufficiently CPU intensive within that <code>prange</code>, the overhead of threading isn't enough to completely dull the benefits.</p>
<h2>Conclusion</h2>
<p>I was able to make this particular array operation roughly 200x faster using code that looks remarkably similar to the original naive python implementation. Also important to note that the function API did not change at all; the speed benefits and multithreading are completely transparent to the user of this function. </p>
<p>If you are processing an array using loops, you should definitely look at Cython, particularly Cython with OpenMP threading, to speed up your operations.</p>
<p>Questions? Message me on twitter @perrygeo</p>";}i:3;a:6:{s:5:"title";s:52:"Raspberry Pi: real-time sensor plots with websocketd";s:4:"link";s:76:"http://perrygeo.com/raspberry-pi-real-time-sensor-plots-with-websocketd.html";s:7:"updated";s:25:"2015-03-02T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:84:"tag:perrygeo.com,2015-03-02:raspberry-pi-real-time-sensor-plots-with-websocketd.html";s:7:"summary";s:12223:"<p>This year I'm starting to delve into some electronics projects and hardware hacking.
What follows is an account of my first end-to-end Raspberry Pi project. 
In terms of functionality, it doesn't do much at the moment - just reads from 
a photoresistor sensor and plots the light levels in the corner of my office. Eventually,
I want to hook up a couple of light, moisture and temperature sensors throughout 
my garden to do some science experiments and/or remind myself to water 
the tomatoes. This is but the first step
in that larger project...</p>
<ul>
<li>
<p>The Pi is wired up to a 3.3v circuit with a photoresistor.</p>
</li>
<li>
<p>The state of the digital input pins are read by a python program.</p>
</li>
<li>
<p>The readings are streamed to a websocket via log file.</p>
</li>
<li>
<p>The HTML/Javascript interface connects with the websocket and plots the values in real time. </p>
</li>
</ul>
<p><img src="assets/img/rpi_websockets.png"></p>
<p>Although it's all just for fun at this point, I've discovered a lot of great unix networking 
tools and javascript libraries
that will come in handy in my day job as well. Here's the details on how it all came together...</p>
<h2>The circuit</h2>
<p>I implemented the design 
from <a href="https://learn.adafruit.com/basic-resistor-sensor-reading-on-raspberry-pi/basic-photocell-reading">the adafruit tutorial</a> on the subject. The adafruit
image shows the basic idea:</p>
<p><img src="https://learn.adafruit.com/system/assets/assets/000/001/321/medium800/raspberry_pi_photocell.jpg?1396770994"></p>
<p>The <strong>photoresistor</strong> provides increased resistance to electric current as the visible light becomes dimmer. Conversely, resistance decreases as light becomes brighter. It is an analog sensor but 
the Raspberry Pi only has digital inputs (the general purpose input output or GPIO pins). 
To solve that, we can employ a capacitor using "RC timing". </p>
<p>A <strong>capacitor</strong> builds up voltage 
over time and, when this voltage hits ~1.4V, the digital input pin reads "high". So 
instead of taking a direct analog reading, we set a loop and time how long it 
takes for the capacitor to "fill up". </p>
<p>If the time interval is small (i.e. the capacitor is charging rapidly), there 
is less resistance from our analog sensor which means more light. If the time 
interval is large (i.e. the capacitor is taking a long time to charge on each cycle),
there is more resistance and less light.</p>
<p>Wired up to the photoresistor on my 25 year-old Radio Shack Electronics Learning Lab,
it looks a bit clunkier but still does the trick:</p>
<p><img src="/assets/img/withpi.png" alt="withpi"></p>
<p>Quick side note: The ribbon and connectors between the raspberry pi and the breadboard are called
a <a href="http://www.adafruit.com/product/914">Pi Cobber</a>. It makes working with the 
GPIO pins easier but, as you can tell from the photos, the incoming cable obstructs access a bit.
I might take a look at the <a href="https://www.adafruit.com/products/1105">T-Cobbler</a>
which promises to clear up some vertical space on the breadboard.</p>
<h2>Reading digital input pins from an analog sensor</h2>
<p>In order to read input from our analog pins, we can use the <a href="https://pypi.python.org/pypi/RPi.GPIO">RPi.GPIO</a> python library. </p>
<p>There's not much more that I can add to <a href="https://learn.adafruit.com/basic-resistor-sensor-reading-on-raspberry-pi/basic-photocell-reading">the adafruit tutorial</a> which covers the topic well.  I made a few modifications:</p>
<ul>
<li>output a unix timestamp along with the reading</li>
<li>flush the output to <code>stdout</code> after every reading to make sure the output isn't buffered.</li>
</ul>
<div class="highlight"><pre><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>

    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
         <span class="c"># Get sensor timing and unix timestamp</span>
         <span class="n">reading</span> <span class="o">=</span> <span class="n">RCtime</span><span class="p">(</span><span class="mi">18</span><span class="p">)</span>
         <span class="n">n</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
         <span class="n">timestamp</span> <span class="o">=</span> <span class="n">to_unix_timestamp</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>

         <span class="k">print</span> <span class="s">&quot;{},{}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">timestamp</span><span class="p">,</span> <span class="n">reading</span><span class="p">)</span>
         <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</pre></div>


<p>You can read the complete <a href="https://github.com/perrygeo/pi_sensor_realtime/blob/master/read_sensor.py">read_sensor.py script</a> on github. </p>
<p>With the script in place and the circuit wired up, I can fire up the script </p>
<div class="highlight"><pre>sudo python read_sensor.py
</pre></div>


<p>and see the timestamp and sensor reading written to the console as comma-separated values:</p>
<div class="highlight"><pre>1425505117.05,793
1425505117.16,802
1425505117.38,768
1425505117.82,709
1425505117.93,801
1425505118.05,798
</pre></div>


<p>So what do those values mean? They represent a count of the number of cycles it took to 
charge the capacitor. Not a meaningful number by itself but it could be calibrated to 
use standard units or simply used as relative values (lower value == brighter light)</p>
<p>It's important to note that, on a Linux machine, you can't be guaranteed that your
event loop won't get interrupted by other processes. So you probably shouldn't use Linux
as a real-time sensor platform directly. However, it works well enough for demonstration
provided your Raspberry Pi isn't bogged down by other CPU-intensive processes.</p>
<p>Another caveat with this approach - we can only use a <em>single process</em> to access the GPIO
pins in this manner. Having multiple processes or threads setting/reading GPIO pin states 
would cause inaccuracies as each process could reset the pins mid-cycle and interrupt 
the timing of other processes. </p>
<h2>Streaming websockets</h2>
<!-- <iframe border=0 frameborder=0 height=410 width=550 src="http://twitframe.com/show?url=https%3A%2F%2Ftwitter.com%2Fperrygeo%2Fstatus%2F570721261715742720">
 </iframe> -->

<p>Websockets are an extension to HTTP that allow data to be sent <em>from</em> a server <em>to</em> a client 
using a persistent connection. Think pushing notification messages. </p>
<p><a href="http://websocketd.com">websocketd</a> allows you to 
take the standard output from any unix program and publish it on a 
websocket. It can also work with standard input, opening up the doors for some
amazing software workflows: imagine taking any well behaved Unix command and immediately
wrapping it's functionality in a web protocol! </p>
<p>To output the sensor readings using a websocket, I'll first run the <code>read_sensor.py</code> script in the background with high priority (<code>nice -20</code>) and redirect the output to a logfile:</p>
<div class="highlight"><pre>sudo nice -20 python read_sensor.py &gt; log.txt <span class="p">&amp;</span>
</pre></div>


<p>Then I will run <code>websocketd</code> on port 8080, serve a few static 
files and provide a command to run.
In this case, the command is the basic unix <code>tail -f</code> which streams the contents of the log file.</p>
<div class="highlight"><pre>websocketd --port<span class="o">=</span><span class="m">8080</span> --staticdir<span class="o">=</span>./static tail -f log.txt 
</pre></div>


<p>Now the sensor readings are being logged and a websocket server is running. 
For each client that connects to the websocket, a new process (<code>tail -f log.txt</code>) will be started
and <code>stdout</code> will be streamed to that client via websocket messages.</p>
<p>Note that the <code>tail -f</code> command is <em>not</em> yet running until a websocket client makes a 
connection. Because it runs in its own process and simply reads the sensor log file, 
we can start as many of them as our hardware can handle.</p>
<p>In summary, the pattern is: run a single process that reads from the GPIO pins and writes to a sensor log, then fire off multiple processes that read the log and stream the output over websockets.</p>
<p>Now we're ready to test it. </p>
<h2>HTML/Javascript interface</h2>
<p>Working with websockets in Javascript is fairly straightforward. First, create a connection</p>
<div class="highlight"><pre><span class="kd">var</span> <span class="nx">ws</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WebSocket</span><span class="p">(</span><span class="s1">&#39;ws://example.org:8080/&#39;</span><span class="p">);</span>
</pre></div>


<p>then set some callbacks to handle incoming messages from the server.</p>
<div class="highlight"><pre><span class="nx">ws</span><span class="p">.</span><span class="nx">onmessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;We got something:&quot;</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>


<p>Websockets are built into almost every modern browser so this functionality 
works out of the box. But if the connection is lost for any reason, the native Websocket
implementations do not automatically reconnect. To solve that problem, 
there is <a href="https://github.com/joewalnes/reconnecting-websocket">ReconnectingWebSocket</a> which does exactly what it sounds like; attempts to 
reconnect automatically when needed.</p>
<p>Then to create an animated real time plot of the streaming data, you'll need a javascript library like <a href="http://smoothiecharts.org/">Smoothie Charts</a>.</p>
<p>I should also note that the server (<a href="http://websocketd.com">websocketd</a>), the javascript plotting library (<a href="http://smoothiecharts.org/">Smoothie Charts</a>), and the javascript networking library (<a href="https://github.com/joewalnes/reconnecting-websocket">ReconnectingWebSocket</a>) were all written by <a href="https://github.com/joewalnes/">joewalnes</a> - this guy is responsible for making the three biggest pieces of this system and deserves mad props! </p>
<p>All of the HTML and js can be found here: <a href="https://github.com/perrygeo/pi_sensor_realtime/blob/master/static/index.html">index.html</a>. </p>
<p>Finally, here is the result. A streaming, real time plot of sensor readings. This clip was recorded as I came into my office, opened a few 
windows and turned on a light. As the room gets brighter, you can see the sensor readings drop, and then rise again as I pass my hand over sensor a few times to block the light.</p>
<!-- <img src="assets/img/rpi_plot.png"> -->

<iframe id="player" type="text/html" width="640" height="390"
  src="http://www.youtube.com/embed/CfwRj3HP3j0?enablejsapi=1&origin=http://example.com"
  frameborder="0"></iframe>

<p>Maybe not incredibly useful in it's current state but it provided an excellent learning experience to work on the entire stack, integrating electronics and hardware with web software. It opens the doors for all sorts of new projects. All of the code is available on my <a href="https://github.com/perrygeo/pi_sensor_realtime">github repo</a>. Any questions? Shoot me an email or message on twitter. I'm a beginner when it comes to electrical theory so somebody please correct me if I'm way off the mark on something. </p>";}i:4;a:6:{s:5:"title";s:64:"Zonal statistics: histograms as user-defined aggregate functions";s:4:"link";s:88:"http://perrygeo.com/zonal-statistics-histograms-as-user-defined-aggregate-functions.html";s:7:"updated";s:25:"2015-02-23T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:96:"tag:perrygeo.com,2015-02-23:zonal-statistics-histograms-as-user-defined-aggregate-functions.html";s:7:"summary";s:7712:"<h2>Introduction</h2>
<p>Zonal statistics allow you to summarize raster datasets based on vector geometries 
by aggregating all pixels associated with each vector feature, typically to a single scalar value. For example, you might want the <em>mean</em> elevation of each country against an SRTM Digital Elevation
Model (DEM). This is easily accomplished in python using <a href="https://github.com/perrygeo/python-raster-stats"><code>rasterstats</code></a>:</p>
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">rasterstats</span> <span class="kn">import</span> <span class="n">zonal_stats</span>
<span class="n">stats</span> <span class="o">=</span> <span class="n">zonal_stats</span><span class="p">(</span><span class="s">&#39;countries.shp&#39;</span><span class="p">,</span> <span class="s">&#39;elevation.tif&#39;</span><span class="p">,</span> <span class="n">stats</span><span class="o">=</span><span class="s">&quot;mean&quot;</span><span class="p">,</span> <span class="n">copy_properties</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">stats</span><span class="p">:</span>
    <span class="k">print</span> <span class="n">s</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">],</span> <span class="n">s</span><span class="p">[</span><span class="s">&#39;mean&#39;</span><span class="p">]</span>
</pre></div>


<p>Which would give us output similar to below, with the mean elevation (meters) for each country:</p>
<div class="highlight"><pre>Afghanistan 1826.38
Netherlands 8.78
Nepal 2142.28
Zimbabwe 980.85
</pre></div>


<h2>Zonal Histograms</h2>
<p>Using the built-in aggregate functions in <code>rasterstats</code> can reveal a lot about 
about the underlying raster dataset (see <a href="https://github.com/perrygeo/python-raster-stats#statistics">statistics</a> for full list). Most of the time the standard descriptive statistics
like min, max, mean, median, etc. can tell us everything we need to know.</p>
<p>But what if we want to retain more information about the underlying distribution of
values? Instead of simply stating </p>
<blockquote>
<p>Afghanistan is, on average, 1826.38 meters above sea level</p>
</blockquote>
<p>supposed we wanted to see how much of the country is in high vs low elevation areas.
We could bin the elevations into meaningful ranges (say 0-200 meters, 200 to 400 meters, etc) and create a histogram of pixel counts to show the shape of the underlying distribution. In this case, the aggregate function does not return a scalar value but a dictionary with 
each bin as a key.</p>
<div class="highlight"><pre>&gt;&gt; stats[&#39;elevation_histogram&#39;]
{&#39;0 to 500m&#39;: ...,
 &#39;500 to 1000m&#39;: ...,
 &#39;1000 to 3000m&#39;:...,
 &#39;3000 to 5000m&#39;:...,
 &#39;5000m+&#39;
}
</pre></div>


<p>That's the goal, now how do we accomplish this? </p>
<h2>User-defined aggregate functions</h2>
<p>Because a histogram might need to <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.histogram.html">specify a number of arguments</a> to customize the results, it's not
feasible for <code>rasterstats</code> to define a generic histogram function. However, as of <a href="https://pypi.python.org/pypi/rasterstats/0.6.1">version 0.6</a>, we
have the ability to create custom, user-defined aggregate functions such as the zonal histogram 
idea described above.</p>
<p>First, we have to write our function. The first and only argument is a masked numpy array 
and will typically be handled by <code>numpy</code> functions. The function's return value will be added to the stats output for each feature. The returned
value does <em>not</em> need to be a scalar, it can be any valid python value (though it's probably
best to stick with dicts, lists and other simple data structures that are easily 
serializable).</p>
<div class="highlight"><pre><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">itertools</span>

<span class="k">def</span> <span class="nf">elevation_histogram</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="n">bin_edges</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">400</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="mi">3000</span><span class="p">,</span> <span class="mi">5000</span><span class="p">,</span> <span class="mi">10000</span><span class="p">]</span>
    <span class="n">hist</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="kp">histogram</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">bins</span><span class="o">=</span><span class="n">bin_edges</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="p">{}</span>  
    <span class="k">for</span> <span class="n">upper</span><span class="p">,</span> <span class="n">lower</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">izip</span><span class="p">(</span><span class="n">bin_edges</span><span class="p">,</span> <span class="n">bin_edges</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="n">hist</span><span class="p">):</span>
        <span class="n">key</span> <span class="o">=</span> <span class="s">&quot;{} to {}m&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">upper</span><span class="p">,</span> <span class="n">lower</span><span class="p">)</span>
        <span class="n">data</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
    <span class="k">return</span> <span class="n">data</span>
</pre></div>


<p>And then add our custom <code>elevation_histogram</code> function to our <code>zonal_stats</code> call
using the <code>add_stats</code> keyword argument:</p>
<div class="highlight"><pre>stats = zonal_stats(&#39;countries.shp&#39;, &#39;elevation.tif&#39;, copy_properties=True,
                    add_stats={&#39;elevation_histogram&#39;: elevation_histogram})
for s in stats:
    print s[&#39;name&#39;], s[&#39;mean&#39;], s[&#39;elevation_histogram&#39;]
</pre></div>


<p>which gives us output similar to the following which gives you raw pixel counts
for each of the elevation bins (formatted for readability)</p>
<div class="highlight"><pre>Afghanistan 1826.38 {
    &#39;3000 to 5000m&#39;: 1099730, 
    &#39;0 to 400m&#39;: 1754317,
    &#39;1000 to 3000m&#39;: 2884917, 
    &#39;5000 to 10000m&#39;: 83158, 
    &#39;400 to 1000m&#39;: 1907790}
</pre></div>


<p>The only caveat with using this technique is that nested dictionaries and other 
non-scalar values might cause difficulty when trying to serialize this 
data structure to other formats. For example, most GIS formats don't support hierarchical 
properties (nested dictionaries) so you might have to flatten the data before
writing to e.g. PostGIS or an ESRI shapefile. </p>
<p>With the ability to write user-defined aggregate functions, I can keep the core
of <code>rasterstats</code> light while allowing for the possibility of complex aggregate analysis
that might be needed in the future. Good stuff.</p>";}i:5;a:6:{s:5:"title";s:45:"Topological simplification of simple features";s:4:"link";s:70:"http://perrygeo.com/topological-simplification-of-simple-features.html";s:7:"updated";s:25:"2015-01-11T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:78:"tag:perrygeo.com,2015-01-11:topological-simplification-of-simple-features.html";s:7:"summary";s:10496:"<h2>The case for topology</h2>
<p><a href="http://en.wikipedia.org/wiki/Simple_Features">Simple feature</a> representations
of polygon geometries are ubiquitous due to their ease of use.
Thinking of spatial features as having a single, independent geometry is easy and fits most use cases.
But that ease of use disappears when we need to represent the topological
relationship between features.</p>
<p>In this article, I'll focus on one particular task with simple features data that
would benefit from topology - namely simplifying a polygon dataset by removing vertices.
Here's the original dataset, a 30+MB shapefile with very dense line work.</p>
<p><img alt="original" src="/images/topo_simplify/original.png" /></p>
<p>Geometries <em>can</em> be simplified under the Simple Features model but, since
each geometry is processed independently, the <strong>topological relationships between
features can be disrupted</strong>. For instance, using the <code>Simplify Geometries</code> tool in
QGIS, I can simplify the polygons dramatically but we see gaps between polygons
and other side effects.</p>
<p><img alt="no_topology" src="/images/topo_simplify/no_topology.png" /></p>
<h2>The plan</h2>
<p>Because we'll need to <em>build</em> topology before acting on it, the process for simplifying
simple features datasets involves converting the data to topological structure,
simplifying it, then converting it back to a simple features representation.</p>
<p>Many of the big GIS systems (ESRI's .e00, ArcInfo "coverages", and GRASS vectors)
have their own topological data structures. More recently, we've seen the rise of
Open Street Map (OSM) format and TopoJSON, both of which model topological relationships.</p>
<p>Of these options, I selected <a href="https://github.com/mbostock/topojson/wiki">TopoJSON</a>
because of it's robust <a href="https://github.com/mbostock/topojson/wiki/Command-Line-Reference">command-line tool</a>
which handles building topology and simplification in one step. Additionally, it
works with GeoJSON and Shapefile inputs, two of the most common
data formats for simple features.</p>
<p>The workflow goes something like this:</p>
<ol>
<li>Convert data into a shapefile with the EPSG:4326 spatial reference (lonlat, wgs84)</li>
<li>Convert to topojson and simplify</li>
<li>Convert to geojson</li>
<li>Optionally, convert geojson to other formats supported by OGR</li>
</ol>
<p>To follow along, you'll need to have the following software installed:</p>
<ul>
<li>GDAL command line utilities (we'll use <code>ogr2ogr</code> at the command line)<ul>
<li><code>apt-get install gdal-bin</code></li>
</ul>
</li>
<li>The <code>topojson</code> command line utility<ul>
<li><code>npm install -g topojson</code></li>
</ul>
</li>
<li>Python with the <code>shapely</code> package installed.<ul>
<li><code>pip install shapely</code></li>
</ul>
</li>
</ul>
<h2>Step 1: Convert to WGS84 shapefile</h2>
<p>If you're already working with an ESRI Shapefile or GeoJSON format and your data
is already in unprojected WGS84 coordinates (i.e. EPSG:4326), you can skip to step 2.</p>
<p>Otherwise, <code>ogr2ogr</code> makes that conversion simple:</p>
<div class="highlight"><pre>ogr2ogr -t_srs epsg:4326 -f <span class="s2">&quot;ESRI Shapefile&quot;</span> <span class="se">\</span>
   ecoregions_original.shp EcoregionSummaries3.gdb.zip EcoRegions
</pre></div>


<h2>Step 2: Convert to TopoJSON and simplify</h2>
<p>The simplification, quantization (more on that later) and the conversion to
a topological data model are handled by <code>topojson</code></p>
<p>You have two options for specifying how aggressively you want to simplify your data.</p>
<ol>
<li>Use a tolerance, specified in <a href="http://en.wikipedia.org/wiki/Steradian#SI_multiples">steridians</a> with the <code>-s</code> flag</li>
<li>Use a proportion of points, 0 to 1, to retain with the <code>--simplify-proportion</code> flag</li>
</ol>
<p>One quirk of the topojson implementation is that it uses a relatively low quantization factor by default.
Effectively, this snaps coordinates to a grid in order to save space and simplify geometries even further.
This yields nice small coordinates but can result in a "stair step" effect at higher
zoom levels. The default is <code>-q 1E4</code> but I've found good results with <code>-q 1E6</code> as
recommended in the topojson docs.</p>
<p>As an example, let's take our <code>ecoregions_original.shp</code> and convert it to topojson
with a tolerance of <code>1E-8</code> steridians. We want to make sure we explicitly mention
that the data is in spherical (unprojected) coordinates and to retain the properties
of the original attribute table:</p>
<div class="highlight"><pre>topojson --spherical <span class="se">\</span>
        --properties <span class="se">\</span>
        -s 1E-8 <span class="se">\</span>
        -q 1E6 <span class="se">\</span>
        -o temp.topojson <span class="se">\</span>
        ecoregions_original.shp
</pre></div>


<h2>Step 3: Convert to GeoJSON</h2>
<p>This part was a bit trickier than I anticipated. Luckily Sean Gillies has written
some preliminary <a href="http://sgillies.net/blog/1159/topojson-with-python">python functions</a>
for converting topojson geometries to standard GeoJSON-like python dictionaries.</p>
<p>In order to make a higher-level conversion utility, I started working on <a href="https://gist.github.com/perrygeo/1e767e42e8bc54ad7262#file-topo2geojson-py">topo2geojson.py</a> which provides a command line
interface to perform TopoJSON to GeoJSON conversions.</p>
<div class="highlight"><pre>python topo2geojson.py temp.topojson ecoregions_simple.geojson
</pre></div>


<p>There is some additional logic to ensure validity of polygons though it is very
basic and I'm sure there are ways to make the geometry conversions more robust.
Please note that I've only tested this script on this one dataset and it likely needs
additional work to be considered a full-fledged conversion tool; consider it more of a
starting point than an out-of-the box solution.</p>
<h2>Optional Step 4: Convert to any OGR format</h2>
<p>Once data is in GeoJSON format, we're free to do what we want with it, including
converting it back to a shapefile or any other OGR supported data format.</p>
<div class="highlight"><pre>ogr2ogr -f <span class="s2">&quot;ESRI Shapefile&quot;</span> ecoregions_simple.shp ecoregions_simple.geojson OGRGeoJson
</pre></div>


<h1>Case study: evaluating simplification tolerances</h1>
<p>In the remainder of this article, I'll walk through a demonstration of these steps
in order to find an optimal simplification tolerance for my test data. The optimal
tolerance depends on your needs, what scales you will be using your data and how
aggressively you need to reduce file size. Ultimately, it's a <strong> tradeoff between
low geometry size and accurate line work</strong>.</p>
<p>We can easily script this solution in order to test multiple simplification tolerances.
As a bonus, we can fire off multiple iterations at once to leverage multiple cores.
Since I've got 4 cores on my laptop, I can run 4 processes in nearly the same time
it takes to run 1 using some simple shell tricks (Linux/OSX only; sorry Windows users but I don't know .bat files well enough to demonstrate)</p>
<div class="highlight"><pre><span class="k">for</span> tolerance in 1E-7 1E-8 1E-9 1E-10
    <span class="k">do</span>
        topojson --spherical <span class="se">\</span>
            --properties <span class="se">\</span>
            -s <span class="nv">$tolerance</span> <span class="se">\</span>
            -q 1E6 <span class="se">\</span>
            -o temp_<span class="nv">$tolerance</span>.topojson <span class="se">\</span>
            ecoregions_original.shp <span class="o">&amp;&amp;</span>

        <span class="c"># Convert it to GeoJSON</span>
        python topo2geojson.py temp_<span class="nv">$tolerance</span>.topojson temp_<span class="nv">$tolerance</span>.geojson <span class="o">&amp;&amp;</span>

        <span class="c"># Optionally, convert GeoJSON to any OGR data source</span>
        ogr2ogr -f <span class="s2">&quot;ESRI Shapefile&quot;</span> ecoregions_<span class="nv">$tolerance</span>.shp temp_<span class="nv">$tolerance</span>.geojson OGRGeoJson <span class="p">&amp;</span>

    <span class="k">done</span>
    <span class="nb">wait</span>
</pre></div>


<p>Then we can take a look at the resulting .topojson file sizes</p>
<div class="highlight"><pre><span class="nv">$ </span>ls -lh *.topojson
-rw-rw-r-- <span class="m">1</span> mperry mperry 4.5M Jan <span class="m">11</span> 12:25 temp_1E-10.topojson
-rw-rw-r-- <span class="m">1</span> mperry mperry 2.1M Jan <span class="m">11</span> 12:25 temp_1E-9.topojson
-rw-rw-r-- <span class="m">1</span> mperry mperry 869K Jan <span class="m">11</span> 12:25 temp_1E-8.topojson
-rw-rw-r-- <span class="m">1</span> mperry mperry 362K Jan <span class="m">11</span> 12:25 temp_1E-7.topojson
</pre></div>


<p>OK, so with a simplification tolerance of 1E-10 steridians, we can get a 4.5M file.
If we reduce it to 1E-7, we can get 362k file - a 12.5x reduction. Is the reduction
in file size worth the reduction in geometric accuracy? The only way to find out is to
render maps of the resulting datasets and visually assess them.</p>
<table>
    <tr>
        <th> </th>
        <th>Original</th>
        <th>1E-7</th>
        <th>1E-8</th>
        <th>1E-9</th>
    </tr>
    <tr>
        <th> </th>
        <th><img src="/images/topo_simplify/original.png" width=200></th>
        <th><img src="/images/topo_simplify/1E-7.png" width=200></th>
        <th><img src="/images/topo_simplify/1E-8.png" width=200></th>
        <th><img src="/images/topo_simplify/1E-9.png" width=200></th>
    </tr>
</table>

<p>First thing that we notice - all of the results have retained topology with no gaps or slivers introduced.
(the key benefit to this workflow).</p>
<p>Next, we notice that at this scale (roughly 1:500k on my monitor) we can barely
see a difference between the 1E-9 version and the original. And the 1E-7 version
looks a bit too simplified and chunky. So, in this case, we can say that a simplification
tolerance of around 1E-8 steridians is an optimal balance of file size and detail.</p>
<p>Of course other datasets, scales and uses may have completely different results so please try
it out and let me know how it goes. Just don't settle for simple features simplification next time you need to
reduce file sizes!</p>";}i:6;a:6:{s:5:"title";s:30:"Sensitivity Analysis in Python";s:4:"link";s:55:"http://perrygeo.com/sensitivity-analysis-in-python.html";s:7:"updated";s:25:"2014-01-19T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:63:"tag:perrygeo.com,2014-01-19:sensitivity-analysis-in-python.html";s:7:"summary";s:5938:"<h3>Demonstrates the use of the <code>SALib</code> python module to sample and test the sensitivity of models</h3>
<hr>

<p>As (geo)data scientists, we spend much of our time working with data models that try (with varying degrees of success) to capture some essential truth about the world while still being as simple as possible to provide a useful abstraction. Inevitably, complexity starts to creep into every model and we don't often stop to assess the value added by that complexity. When working with models that require a large number of parameters and a huge domain of potential inputs that are expensive to collect, it becomes difficult to answer the question:</p>
<p><strong>What parameters of the model are the most sensitive?</strong></p>
<p>In other words, if I am going to spend my resources obtaining/refining data for this model, where should I focus
my efforts in order to get the best bang for the buck? If I spend weeks working on deriving a single parameter for the model,
I want some assurance that the parameter is critically important to the model's prediction. 
The flip-side, of course, is that if a parameter is <em>not</em> that important to the model's predictive power, I could
save some time by perhaps just using some quick-and-dirty approximation. </p>
<h3>SALib: a python module for testing model sensitivity</h3>
<p>I was thrilled to find <a href="http://jdherman.github.io/SALib/">SALib</a> which implements a number of vetted methods for quantitatively 
assessing parameter sensitivity. There are three basic steps to running SALib:</p>
<ol>
<li>Define the parameters to test, define their domain of possible values and generate <em>n</em> sets of randomized input parameters.   </li>
<li>Run the model <em>n</em> times and capture the results.</li>
<li>Analyze the results to identify the most/least sensitive parameters.</li>
</ol>
<p>I'll leave the details of these steps to the <a href="http://jdherman.github.io/SALib/">SALib documentation</a>.
The beauty of the SALib approach is that you have the flexibility[1] to run any model in any way you want, so long as you can manipulate the inputs and outputs adequately.</p>
<h3>Case Study: Climate effects on forestry</h3>
<p>I wanted to compare a forest growth and yield model under different climate change scenarios in order to assess what the most sensitive climate-related variables were. I identified 4 variables:</p>
<ul>
<li>Climate model (4 global circulation models)</li>
<li>Representative Concentration Pathways (RCPs; 3 different emission trajectories)</li>
<li>Mortality factor for species viability (0 to 1)</li>
<li>Mortality factor for equivalent elevation change (0 to 1)</li>
</ul>
<p>In this case, I was using the <a href="http://www.fs.fed.us/fmsc/fvs/">Forest Vegetation Simulator</a>(FVS) which requires
a configuration file for every model iteration. So, for Step 2, I had to iterate through each set of input variables and use them to generate an appropriate configuration file. This involved translating the real numbers from the samples into categorical variables in some cases. Finally, in order to get the result of the model iteration, I had to parse the outputs of FVS and do some post-processing to obtain the variable of interest (the average volume of standing timber over 100 years). So the flexibility of SALib comes at a slight cost: unless your model works directly with the file formatted for SALib, the input and outputs may require some data manipulation.  </p>
<p>After running the all required iterations of the model[2] I was able to analyze the results and assess the sensitivity of the four parameters. </p>
<p>Here's the output of SALib's analysis (formatted slightly for readability):</p>
<div class="highlight"><pre>Parameter    First_Order First_Order_Conf Total_Order Total_Order_Conf
circulation  0.193685    0.041254         0.477032    0.034803
rcp          0.517451    0.047054         0.783094    0.049091
mortviab    -0.007791    0.006993         0.013050    0.007081
mortelev    -0.005971    0.005510         0.007162    0.006693
</pre></div>


<p>The <em>first order effects</em> represent the effect of that parameter alone. The <em>total order effects</em> are arguably more
relevant to understanding the overall interaction of that parameter with your model. The "Conf" columns represent confidence and can be interpreted as error bars.</p>
<p>In this case, we interpret the output as follows:</p>
<div class="highlight"><pre>Parameter    Total Order Effect   
circulation  0.47  +- 0.03  (moderate influence)      
rcp          0.78  +- 0.05  (dominant parameter)
mortviab     0.01  +- 0.007 (weak influence)
mortelev     0.007 +- 0.006 (weak influence)
</pre></div>


<p>We can graph each of the input parameters against the results to visualize this:</p>
<p><img alt="sagraph" src="/assets/img/sagraph.png" /></p>
<p>Note that the 'mortelev' component is basically flat (as the factor increases, the result stays the same) whereas the choice of 'rcp' has a heavy influence (as emissions increase to the highest level, the resulting prediction for timber volumes are noticeably decreased).</p>
<p>The conclusion is that the climate variables, particularly the RCPs related to human-caused emissions, were the strongest determinants[1] of tree growth <em>for this particular forest stand</em>. This ran counter to our initial intuition that the mortality factors would play a large role in the model. Based on this sensitivity analysis, we may be able to avoid wasting effort on refining parameters that are of minor consequence to the output.</p>
<p><hr>
Footnotes:</p>
<ol>
<li>Compared to more tightly integrated, model-specific methods of sensitivity analysis</li>
<li>20 thousand iterations took approximately 8 hours; sensitivity analysis generally requires lots of processing</li>
<li>Note that the influence of a parameter says nothing about direct <em>causality</em></li>
</ol>";}i:7;a:6:{s:5:"title";s:17:"Leaflet SimpleCSV";s:4:"link";s:42:"http://perrygeo.com/leaflet-simplecsv.html";s:7:"updated";s:25:"2013-09-30T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:50:"tag:perrygeo.com,2013-09-30:leaflet-simplecsv.html";s:7:"summary";s:4444:"<h3>Simple leaftlet-based template for mapping tabular point data on a slippy map</h3>
<hr>

<p>Anyone who's worked with spatial data and the web has run across the need to take 
some simple tabular data and put points on an interactive map. 
It's the fundamental "<em>Hello World</em>" of web mapping. Yet I always find myself spending way too much time
solving this seemingly simple problem. When you consider zoom levels, attributes,
interactivity, clustering, querying, etc... it becomes apparent that interactive maps
require a bit more legwork. But that functionality is fairly consistent case-to-case so I've developed a generalized solution that works for the majority of basic use cases out there: </p>
<p><a class="btn btn-primary" href="https://github.com/perrygeo/leaflet-simple-csv">leaftlet-simple-csv on github</a></p>

<p>The idea is pretty generic but useful for most point marker maps:
<em> Data is in tabular delimited-text (csv, etc.) with two required columns: <code>lat</code> and <code>lng</code>
</em> Points are plotted on full-screen <a href="https://github.com/Leaflet/Leaflet">Leaflet</a> map
<em> Point markers are clustered dynamically based on zoom level.
</em> Clicking on a point cluster will zoom into the extent of the underlying features.
<em> Hovering on the point will display the name. 
</em> Clicking will display a popup with columns/properties displayed as an html table.
<em> Full text filtering with typeahead
</em> Completely client-side javascript with all dependencies included or linked via CDN</p>
<p>Of course this is mostly just a packaged version of existing work, namely <a href="https://github.com/Leaflet/Leaflet">Leaflet</a> with the <a href="https://github.com/joker-x/Leaflet.geoCSV">geoCSV</a> and <a href="https://github.com/Leaflet/Leaflet.markercluster">markercluster</a> plugins.</p>
<h2>Usage</h2>
<ol>
<li>Grab the <a href="https://github.com/perrygeo/leaflet-simple-csv/archive/master.zip">leaflet-simple-csv zip file</a> and unzip it to a location accessible through a web server. </li>
<li>Copy the <code>config.js.template</code> to <code>config.js</code></li>
<li>Visit the <a href="assets/leaflet-simple-csv/index.html">index.html</a> page to confirm everything is working with the built-in example.</li>
<li>Customize your <code>config.js</code> for your dataset.</li>
</ol>
<p>An example config:</p>
<div class="highlight"><pre>var dataUrl = &#39;data/data.csv&#39;;
var maxZoom = 9;
var fieldSeparator = &#39;|&#39;;
var baseUrl = &#39;http://otile{s}.mqcdn.com/tiles/1.0.0/osm/{z}/{x}/{y}.jpg&#39;;
var baseAttribution = &#39;Data, imagery and map information provided by <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://open.mapquest.co.uk&quot;</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span><span class="nt">&gt;</span>MapQuest<span class="nt">&lt;/a&gt;</span>, <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.openstreetmap.org/&quot;</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span><span class="nt">&gt;</span>OpenStreetMap<span class="nt">&lt;/a&gt;</span> and contributors, <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://creativecommons.org/licenses/by-sa/2.0/&quot;</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span><span class="nt">&gt;</span>CC-BY-SA<span class="nt">&lt;/a&gt;</span>&#39;;
var subdomains = &#39;1234&#39;;
var clusterOptions = {showCoverageOnHover: false, maxClusterRadius: 50};
var labelColumn = &quot;Name&quot;;
var opacity = 1.0;
</pre></div>


<p>The example dataset:</p>
<div class="highlight"><pre>Country|Name|lat|lng|Altitude
United States|New York City|40.7142691|-74.0059738|2.0
United States|Los Angeles|34.0522342|-118.2436829|115.0
United States|Chicago|41.8500330|-87.6500549|181.0
United States|Houston|29.7632836|-95.3632736|15.0
...
</pre></div>


<p>I make no claims that this is the "right" way to do it but leveraging
100% client-side javascript libraries and native delimited-text formats seems like the simplest approach. 
Many of the features included here (clustering, filtering) are useful enough
to apply to most situations and hopefully you'll find it useful.</p>
<p><hr>
<div><iframe src="http://blog.perrygeo.net/assets/leaflet-simple-csv/index.html" height="450" width="740"></iframe></div></p>";}i:8;a:6:{s:5:"title";s:18:"Python rasterstats";s:4:"link";s:43:"http://perrygeo.com/python-rasterstats.html";s:7:"updated";s:25:"2013-09-24T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:51:"tag:perrygeo.com,2013-09-24:python-rasterstats.html";s:7:"summary";s:16460:"<h3>This article introduces a python module for summarizing geospatial raster datasets based on vector geometries (i.e. zonal statistics).</h3>
<p>A common task in many of my data workflows involves "zonal statistics";  summarizing raster data based on vector geometries. Despite many
alternatives (starspan, the QGIS Zonal Statistics plugin, ArcPy and R) there
were none that were</p>
<ul>
<li>open source</li>
<li>fast enough</li>
<li>flexible enough</li>
<li>worked with python data structures</li>
</ul>
<p>We'd written a wrapper around starspan for madrona (see <a href="https://github.com/Ecotrust/madrona/blob/master/docs/raster_stats.rst">madrona.raster_stats</a> ) but
relying on shell calls and an aging, unmaintained C++ code base was not cutting
it.</p>
<p>So I set out to create a solution using numpy, GDAL and python. The
<code>rasterstats</code> package was born. </p>
<p><a href="https://github.com/perrygeo/python-raster-stats" class="btn btn-primary">`python-raster-stats` on github</a></p>

<h2>Example</h2>
<p>Let's jump into an example. I've got a polygon shapefile of continental US
<em>state boundaries</em> and a raster dataset of <em>annual precipitation</em> from the
<a href="http://www.cec.org/Page.asp?PageID=924&amp;amp;ContentID=2336">North American Environmental
Atlas</a>.</p>
<p><img alt="states_precip" src="/assets/img/states_precip.jpeg" /></p>
<div class="highlight"><pre><span class="n">states</span> <span class="o">=</span> <span class="s">&quot;data/boundaries_contus.shp&quot;</span>
<span class="n">precip</span> <span class="o">=</span> <span class="s">&quot;data/precipitation.tif&quot;</span>
</pre></div>


<p>The <code>raster_stats</code> function is the main entry point. Provide a vector and a
raster as input and expect a list of dicts, one for each input feature.</p>
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">rasterstats</span> <span class="kn">import</span> <span class="n">raster_stats</span>
<span class="n">rain_stats</span> <span class="o">=</span> <span class="n">raster_stats</span><span class="p">(</span><span class="n">states</span><span class="p">,</span> <span class="n">precip</span><span class="p">,</span> <span class="n">stats</span><span class="o">=</span><span class="s">&quot;*&quot;</span><span class="p">,</span> <span class="n">copy_properties</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="nb">len</span><span class="p">(</span><span class="n">rain_stats</span><span class="p">)</span>  <span class="c"># continental US; 48 states plus District of Columbia</span>

<span class="mi">49</span>
</pre></div>


<p>Print out the stats for a given state:</p>
<div class="highlight"><pre><span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">rain_stats</span> <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;NAME&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;Oregon&quot;</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>

<span class="p">{</span><span class="s">&#39;COUNTRY&#39;</span><span class="p">:</span> <span class="s">&#39;USA&#39;</span><span class="p">,</span>
 <span class="s">&#39;EDIT&#39;</span><span class="p">:</span> <span class="s">&#39;NEW&#39;</span><span class="p">,</span>
 <span class="s">&#39;EDIT_DATE&#39;</span><span class="p">:</span> <span class="s">&#39;20060803&#39;</span><span class="p">,</span>
 <span class="s">&#39;NAME&#39;</span><span class="p">:</span> <span class="s">&#39;Oregon&#39;</span><span class="p">,</span>
 <span class="s">&#39;STATEABB&#39;</span><span class="p">:</span> <span class="s">&#39;US-OR&#39;</span><span class="p">,</span>
 <span class="s">&#39;Shape_Area&#39;</span><span class="p">:</span> <span class="mf">250563567264.0</span><span class="p">,</span>
 <span class="s">&#39;Shape_Leng&#39;</span><span class="p">:</span> <span class="mf">2366783.00361</span><span class="p">,</span>
 <span class="s">&#39;UIDENT&#39;</span><span class="p">:</span> <span class="mi">124704</span><span class="p">,</span>
 <span class="s">&#39;__fid__&#39;</span><span class="p">:</span> <span class="mi">35</span><span class="p">,</span>
 <span class="s">&#39;count&#39;</span><span class="p">:</span> <span class="mi">250510</span><span class="p">,</span>
 <span class="s">&#39;majority&#39;</span><span class="p">:</span> <span class="mi">263</span><span class="p">,</span>
 <span class="s">&#39;max&#39;</span><span class="p">:</span> <span class="mf">3193.0</span><span class="p">,</span>
 <span class="s">&#39;mean&#39;</span><span class="p">:</span> <span class="mf">779.2223903237395</span><span class="p">,</span>
 <span class="s">&#39;median&#39;</span><span class="p">:</span> <span class="mf">461.0</span><span class="p">,</span>
 <span class="s">&#39;min&#39;</span><span class="p">:</span> <span class="mf">205.0</span><span class="p">,</span>
 <span class="s">&#39;minority&#39;</span><span class="p">:</span> <span class="mi">3193</span><span class="p">,</span>
 <span class="s">&#39;range&#39;</span><span class="p">:</span> <span class="mf">2988.0</span><span class="p">,</span>
 <span class="s">&#39;std&#39;</span><span class="p">:</span> <span class="mf">631.539502512283</span><span class="p">,</span>
 <span class="s">&#39;sum&#39;</span><span class="p">:</span> <span class="mf">195203001.0</span><span class="p">,</span>
 <span class="s">&#39;unique&#39;</span><span class="p">:</span> <span class="mi">2865</span><span class="p">}</span>
</pre></div>


<p>Find the three driest states:</p>
<div class="highlight"><pre><span class="p">[(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;NAME&#39;</span><span class="p">],</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;mean&#39;</span><span class="p">])</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> 
       <span class="nb">sorted</span><span class="p">(</span><span class="n">rain_stats</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">k</span><span class="p">:</span> <span class="n">k</span><span class="p">[</span><span class="s">&#39;mean&#39;</span><span class="p">])[:</span><span class="mi">3</span><span class="p">]]</span>


<span class="p">[(</span><span class="s">&#39;Nevada&#39;</span><span class="p">,</span> <span class="mf">248.23814034118908</span><span class="p">),</span>
 <span class="p">(</span><span class="s">&#39;Utah&#39;</span><span class="p">,</span> <span class="mf">317.668743027571</span><span class="p">),</span>
 <span class="p">(</span><span class="s">&#39;Arizona&#39;</span><span class="p">,</span> <span class="mf">320.6157232064074</span><span class="p">)]</span>
</pre></div>


<p>And write the data out to a csv.</p>
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">rasterstats</span> <span class="kn">import</span> <span class="n">stats_to_csv</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;out.csv&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fh</span><span class="p">:</span>
    <span class="n">fh</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">stats_to_csv</span><span class="p">(</span><span class="n">rain_stats</span><span class="p">))</span>
</pre></div>


<h2>Geo interface</h2>
<p>The basic usage above shows the path of an entire OGR vector layer as the first argument. But raster-stats
also supports other vector features/geometries.</p>
<ul>
<li>Well-Known Text/Binary</li>
<li>GeoJSON string and mappings</li>
<li>Any python object that supports the <a href="https://gist.github.com/sgillies/2217756">geo_interface</a></li>
<li>Single objects or iterables</li>
</ul>
<p>In this example, I use a geojson-like python mapping to specify a single geometry</p>
<div class="highlight"><pre><span class="n">geom</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;coordinates&#39;</span><span class="p">:</span> <span class="p">[[</span>
   <span class="p">[</span><span class="o">-</span><span class="mf">594335.108537269</span><span class="p">,</span> <span class="o">-</span><span class="mf">570957.932799394</span><span class="p">],</span>
   <span class="p">[</span><span class="o">-</span><span class="mf">422374.54395311</span><span class="p">,</span> <span class="o">-</span><span class="mf">593387.5716581973</span><span class="p">],</span>
   <span class="p">[</span><span class="o">-</span><span class="mf">444804.1828119133</span><span class="p">,</span> <span class="o">-</span><span class="mf">765348.1362423564</span><span class="p">],</span>
   <span class="p">[</span><span class="o">-</span><span class="mf">631717.839968608</span><span class="p">,</span> <span class="o">-</span><span class="mf">735441.9510972851</span><span class="p">],</span>
   <span class="p">[</span><span class="o">-</span><span class="mf">594335.108537269</span><span class="p">,</span> <span class="o">-</span><span class="mf">570957.932799394</span><span class="p">]]],</span>
 <span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="s">&#39;Polygon&#39;</span><span class="p">}</span>

<span class="n">raster_stats</span><span class="p">(</span><span class="n">geom</span><span class="p">,</span> <span class="n">precip</span><span class="p">,</span> <span class="n">stats</span><span class="o">=</span><span class="s">&quot;min median max&quot;</span><span class="p">)</span>

<span class="p">[{</span><span class="s">&#39;__fid__&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;max&#39;</span><span class="p">:</span> <span class="mf">1011.0</span><span class="p">,</span> <span class="s">&#39;median&#39;</span><span class="p">:</span> <span class="mf">451.0</span><span class="p">,</span> <span class="s">&#39;min&#39;</span><span class="p">:</span> <span class="mf">229.0</span><span class="p">}]</span>
</pre></div>


<h2>Categorical</h2>
<p>We're not limited to descriptive statistics for <em>continuous</em> rasters either; we
can get unique pixel counts for <em>categorical</em> rasters as well. In this example,
we've got a raster of 2005 land cover (i.e. general vegetation type). </p>
<p><img alt="states_veg" src="/assets/img/states_veg.jpeg" /></p>
<p>Note that
we can specify only the stats that make sense and the <code>categorical=True</code>
provides a count of each pixel value.</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">landcover</span> <span class="o">=</span> <span class="s">&quot;/data/workspace/rasterstats_blog/NA_LandCover_2005.img&quot;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">veg_stats</span> <span class="o">=</span> <span class="n">raster_stats</span><span class="p">(</span><span class="n">states</span><span class="p">,</span> <span class="n">landcover</span><span class="p">,</span> 
    <span class="n">stats</span><span class="o">=</span><span class="s">&quot;count majority minority unique&quot;</span><span class="p">,</span>
    <span class="n">copy_properties</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">nodata_value</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
    <span class="n">categorical</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">veg_stats</span> <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;NAME&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;Oregon&quot;</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>

<span class="p">{</span><span class="mi">1</span><span class="p">:</span> <span class="mi">999956</span><span class="p">,</span>
 <span class="mi">3</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
 <span class="mi">5</span><span class="p">:</span> <span class="mi">3005</span><span class="p">,</span>
 <span class="mi">6</span><span class="p">:</span> <span class="mi">198535</span><span class="p">,</span>
 <span class="mi">8</span><span class="p">:</span> <span class="mi">2270805</span><span class="p">,</span>
 <span class="mi">10</span><span class="p">:</span> <span class="mi">126199</span><span class="p">,</span>
 <span class="mi">14</span><span class="p">:</span> <span class="mi">20883</span><span class="p">,</span>
 <span class="mi">15</span><span class="p">:</span> <span class="mi">301884</span><span class="p">,</span>
 <span class="mi">16</span><span class="p">:</span> <span class="mi">17452</span><span class="p">,</span>
 <span class="mi">17</span><span class="p">:</span> <span class="mi">39246</span><span class="p">,</span>
 <span class="mi">18</span><span class="p">:</span> <span class="mi">28872</span><span class="p">,</span>
 <span class="mi">19</span><span class="p">:</span> <span class="mi">2174</span><span class="p">,</span>
 <span class="s">&#39;COUNTRY&#39;</span><span class="p">:</span> <span class="s">&#39;USA&#39;</span><span class="p">,</span>
 <span class="s">&#39;EDIT&#39;</span><span class="p">:</span> <span class="s">&#39;NEW&#39;</span><span class="p">,</span>
 <span class="s">&#39;EDIT_DATE&#39;</span><span class="p">:</span> <span class="s">&#39;20060803&#39;</span><span class="p">,</span>
 <span class="s">&#39;NAME&#39;</span><span class="p">:</span> <span class="s">&#39;Oregon&#39;</span><span class="p">,</span>
 <span class="s">&#39;STATEABB&#39;</span><span class="p">:</span> <span class="s">&#39;US-OR&#39;</span><span class="p">,</span>
 <span class="s">&#39;Shape_Area&#39;</span><span class="p">:</span> <span class="mf">250563567264.0</span><span class="p">,</span>
 <span class="s">&#39;Shape_Leng&#39;</span><span class="p">:</span> <span class="mf">2366783.00361</span><span class="p">,</span>
 <span class="s">&#39;UIDENT&#39;</span><span class="p">:</span> <span class="mi">124704</span><span class="p">,</span>
 <span class="s">&#39;__fid__&#39;</span><span class="p">:</span> <span class="mi">35</span><span class="p">,</span>
 <span class="s">&#39;count&#39;</span><span class="p">:</span> <span class="mi">4009017</span><span class="p">,</span>
 <span class="s">&#39;majority&#39;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
 <span class="s">&#39;minority&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
 <span class="s">&#39;unique&#39;</span><span class="p">:</span> <span class="mi">12</span><span class="p">}</span>
</pre></div>


<p>Of course the pixel values alone don't make much sense. We need to interpret the
pixel values as land cover classes:</p>
<div class="highlight"><pre>Value, Class_name
1       Temperate or sub-polar needleleaf forest
2       Sub-polar taiga needleleaf forest
3       Tropical or sub-tropical broadleaf evergreen
4       Tropical or sub-tropical broadleaf deciduous
5       Temperate or sub-polar broadleaf deciduous
6        Mixed Forest
7       Tropical or sub-tropical shrubland
8       Temperate or sub-polar shrubland
9       Tropical or sub-tropical grassland
10      Temperate or sub-polar grassland
11      Sub-polar or polar shrubland-lichen-moss
12      Sub-polar or polar grassland-lichen-moss
13      Sub-polar or polar barren-lichen-moss
14      Wetland
15      Cropland
16      Barren Lands
17      Urban and Built-up
18      Water
19      Snow and Ice
</pre></div>


<p>So, for our Oregon example above we can see that, despite Oregon's reputation as
a lush green landscape, the majority land cover class (#8) is "Temperate or sub-
polar shrubland" at 2.27m pixels out of 4 millions total.</p>
<p>There's a lot more functionality that isn't covered in this post but you get the 
picture... please check it out and let me know what you think. </p>";}i:9;a:6:{s:5:"title";s:52:"Creating UTFGrids directly from a polygon datasource";s:4:"link";s:77:"http://perrygeo.com/creating-utfgrids-directly-from-a-polygon-datasource.html";s:7:"updated";s:25:"2012-08-20T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:85:"tag:perrygeo.com,2012-08-20:creating-utfgrids-directly-from-a-polygon-datasource.html";s:7:"summary";s:4521:"<p>We've begun to rely on the interactivity provided by <a href="http://mapbox.com/mbtiles-spec/utfgrid/">UTFGrids</a> in many of our recent web maps. (Quick recap: UTFGrids are "invisible" map tiles that allow direct interactivity with feature attributes without querying the server.) Earlier this year, I created the <a href="/2012/02/24/utfgrids-with-openlayers-and-tilestache/">initial OpenLayers UTFGrid support</a> and was glad to see it accepted into OpenLayer 2.12 (with some enhancements). </p>
<p>With the client-side javascript support in place, the only missing piece in the workflow was to create the UTFGrid .json files. 
We had expirimented with several alternate <a href="https://github.com/springmeyer/utfgrid-example-writers">UTFGrid renderers</a> but Mapnik's rendering was by far the fastest and produced the best results. 
Using Tilemill was a convenient way to leverage the Mapnik UTFGrid renderer but it came at the cost of a somewhat circuitious and manual workflow: </p>
<ol>
<li>Load the data up into <a href="http://mapbox.com/tilemill/">Tilemill</a>,</li>
<li>Configure interactivity fields</li>
<li>Export to .mbtiles</li>
<li><a href="http://blog.perrygeo.net/2012/03/25/working-with-mbtiles-in-python/">Convert to .json files</a></li>
</ol>
<p>What we really needed was a <strong>script to take a polygon shapefile and render the UTFGrids directly to files</strong>. <a href="http://mapnik.org">Mapnik</a> would provide the rendering while the <a href="http://www.maptiler.org/google-maps-coordinates-tile-bounds-projection/globalmaptiles.py">Global Map Tiles</a> python module would provide the logic for going back and forth between geographic coordinates and tile grid coordinates. From there it's just a matter of determining the extent of the data set and, for a specified set of zoom levels, looping through and using Mapnik to render the UTFGrid to a .json file in <code>Z/X/Y.json</code> directory structure.  </p>
<p><a href="https://github.com/Ecotrust/create-utfgrids" class="btn btn-primary">Get `create-utfgrids` on github</a></p>

<p>If we have a mercator polygon shapefile of ecoregions and want to render UTFGrids for zoom levels 3 through 5 using the <code>dom_desc</code> and <code>div_desc</code> attributes, we could use a command like</p>
<div class="highlight"><pre><span class="nv">$ </span>./create_utfgrids.py test_data/bailey_merc.shp <span class="m">3</span> <span class="m">5</span> ecoregions -f dom_desc,div_desc

WARNING:
This script assumes a polygon shapefile in spherical mercator projection.
If any of these assumptions are not <span class="nb">true</span>, don<span class="err">&#39;</span>t count on the results!
 * Processing Zoom Level 3
 * Processing Zoom Level 4
 * Processing Zoom Level 5
</pre></div>


<p>and inspect the output (e.g. zoom level 5, X=20, Y=18)</p>
<div class="highlight"><pre><span class="nv">$ </span>cat ecoregions/5/20/18.json <span class="p">|</span> python -mjson.tool
<span class="o">{</span>
    <span class="s2">&quot;data&quot;</span>: <span class="o">{</span>
        <span class="s2">&quot;192&quot;</span>: <span class="o">{</span>
            <span class="s2">&quot;div_desc&quot;</span>: <span class="s2">&quot;RAINFOREST REGIME MOUNTAINS&quot;</span>, 
            <span class="s2">&quot;dom_desc&quot;</span>: <span class="s2">&quot;HUMID TROPICAL DOMAIN&quot;</span>
        <span class="o">}</span>, 
...
    <span class="s2">&quot;grid&quot;</span>: <span class="o">[</span>
        <span class="s2">&quot;  !!!!!!!!!#####</span><span class="nv">$%</span><span class="s2">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&quot;</span>, 
...
</pre></div>


<p>Some caveats:</p>
<ul>
<li>This currently only works for polygon datasets in a Web Mercator projection.</li>
<li>It's only tested with shapefiles as it assumes a single-layer datasource at the moment. Full OGR Datasource support would not be too difficult to add for PostGIS, etc.</li>
<li>It assumes a top-origin tile scheme (as do OSM and Google Maps). Supporting TMS bottom-origin schemes in the future should be straightforward. </li>
<li>Requires OGR and Mapnik &gt;= 2.0 with python bindings. Finding windows binaries for the required version of Mapnik may be difficult so using OSX/Linux is recommended at this time. </li>
</ul>
<p>Many thanks to Dane Springmeyer for his help on UTFGrid related matters and 
and to  Klokan Petr Přidal for his <a href="http://www.maptiler.org/google-maps-coordinates-tile-bounds-projection/">MapTiler docs</a></p>";}i:10;a:6:{s:5:"title";s:33:"Introducing the Madrona framework";s:4:"link";s:58:"http://perrygeo.com/introducing-the-madrona-framework.html";s:7:"updated";s:25:"2012-07-11T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:66:"tag:perrygeo.com,2012-07-11:introducing-the-madrona-framework.html";s:7:"summary";s:2697:"<h3><a href="http://madrona.ecotrust.org">Madrona</a>: A software framework for effective place-based decision making</h3>
<p><img alt="Madrona" src="http://madrona.ecotrust.org/assets/img/madrona-logo.png" /></p>
<p>My work at <a href="http://www.ecotrust.org/">Ecotrust</a> mainly revolves around creating web-based spatial analysis tools - software to bring data-driven science to the place-based descision making process. This began several years ago when I joined the MarineMap team. Since working with Ecotrust, we've taken the MarineMap software far beyond it's original niche. What was once a specific tool for marine protected area planning has now become a powerful framework for <a href="http://madrona.ecotrust.org/experience/">all sorts of web-based spatial tools</a> in the realms of marine, forestry, conservation planning, aquatic habitat restoration, etc. So, in a sense, <a href="http://madrona.ecotrust.org">Madrona</a> is a recognition of that evolution. </p>
<p>From the official <a href="http://madrona.ecotrust.org">Madrona</a> release announcement from the <a href="http://blog.ecotrust.org/software-for-21st-century-decisions-2/">Ecotrust blog post</a>:</p>
<blockquote>
<p>Over the last year we’ve distilled the best ideas from our most successful tools into a suite of software building blocks that can be mixed and matched to create cutting-edge software for decision support and spatial planning at any scale. These building blocks are already at the heart of our work and now we’re ready to share them with you.</p>
</blockquote>
<p>So what is <a href="http://madrona.ecotrust.org">Madrona</a> from a developer's perspective? </p>
<ul>
<li>A set of <em>python</em> <em>django</em> apps that provide models, views and templates for representing spatial features and solving problems specific to spatial decision tools.</li>
<li>A RESTful <em>API</em> for accessing spatial features</li>
<li>A collection of <em>javascript</em> libraries (based on JQuery) to provide a web-based interface to the API.</li>
</ul>
<p>In short, we think its a great platform for spatial tools and we want to open it up to the wider developer audience. Ecotrust already has many <a href="http://madrona.ecotrust.org/experience/">madrona-based apps</a> in the wild (with many more in development) but we're hoping to get other folks using (and contributing to) the Madrona framework in the future. </p>
<p>I know this post is short on technical details but there will more to come ... for now, check out the <a href="http://madrona.ecotrust.org/technology/">technology page</a> for an overview or the <a href="http://madrona.ecotrust.org/developer/">developer's page</a> to dive in. </p>";}i:11;a:6:{s:5:"title";s:34:"Migrating from Wordpress to Jekyll";s:4:"link";s:59:"http://perrygeo.com/migrating-from-wordpress-to-jekyll.html";s:7:"updated";s:25:"2012-04-28T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:67:"tag:perrygeo.com,2012-04-28:migrating-from-wordpress-to-jekyll.html";s:7:"summary";s:3484:"<p>I just switched this blog from an ancient version of wordpress running on a VPS 
to a static-file <a href="http://jekyllbootstrap.com/">jekyll bootstrap</a> site 
(hosted by <a href="http://github.com/perrygeo/perrygeo.github.com">github</a>). 
Let me know if you experience any wierdness on the site or feeds. I've taken good measures to make sure links don't break (old URLS should get a 301 permanent redirect to blog.perrygeo.net) but let me know if you get any 404s.</p>
<h3>So why do it?</h3>
<ol>
<li>Having a PHP-MySQL app running on a VPS just to serve up a bunch of blog posts seemed excessive. I don't have the desire to maintain that sort of infrastructure for a simple blog!</li>
<li>Wordpress' editing and admin interface suck. I prefer vim and bash.</li>
<li>Markdown is a great language for quickly banging out blog posts.</li>
<li>Static files just make sense for what is basically static content.</li>
<li>Github pages provides the hosting for me and even handles CNAMEs for DNS.</li>
<li>Managing revisions with <code>git</code>.</li>
</ol>
<h3>The conversion process</h3>
<p>It was not an entirely smooth transition, most of which can be traced directly to dumb decisions on my part. I won't recount the entire process (there are plenty of guides on internets) but I'll outline the major steps here:</p>
<ol>
<li>Export the wordpress blog to an xml file. I has to use <code>xmllint</code> to clean it up a bit. </li>
<li>Set up a <a href="http://disqus.com">disqus</a> account and import my wordpress file. Disqus will handle all the comments which are the only dynamic content on the page. </li>
<li>Use <a href="https://github.com/thomasf/exitwp">exitwp.py</a> to convert the xml to jekyll markdown files. This worked OK. Not great. Tags and formatting did not come through as expected and I had to wrestle the script a bit. Tables were destroyed and some iframes (youtube links) were lost. </li>
<li>Forked Jekyll Bootstrap and brought in my posts. </li>
<li>Started tweaking of css and markdown to get formatting right. Still have a ways to go on this front - let me know if there is any content you'd like me to restore faster than others.</li>
<li>Had to write a little web service to redirect posts; the old blog stupidly used the default wordpress URLS like <code>/wordpress/?p=4</code> which needed to go to <code>/2010/01/01/blah</code></li>
<li>My images were all over the place; some I had in wordpress uploads, others on various servers, some were absolute links, others relative. Gathering them all in one place and using some sed-fu to get the paths right was essential.</li>
<li>Retagged some posts - still working on tags.</li>
<li>Set up Google Analytics to track usage. </li>
</ol>
<p>I think that's about it. There are still some big formatting problems on older posts (mostly due to the fact that I used blockquotes for code). And tables are still destroyed. I'll be working on cleaning these up as I go along. </p>
<p>Overall impression of Jekyll-Bootstrap and hosting with Github pages? <strong>Awesome</strong>. I would highly recomend it to anyone starting a new blog or converting a smaller/better-behaved wordpress site. 
It is so much better than having to deal with PHP and MySQL (hopefully the last time I'll ever see them!). But the conversion was a bit tricky and took way more of my Friday and Saturday than I'd like to admit. I would not want to do that again... But I'm glad did. </p>
<p>What do you think of the new digs?</p>";}i:12;a:6:{s:5:"title";s:30:"Working with mbtiles in python";s:4:"link";s:55:"http://perrygeo.com/working-with-mbtiles-in-python.html";s:7:"updated";s:25:"2012-03-25T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:63:"tag:perrygeo.com,2012-03-25:working-with-mbtiles-in-python.html";s:7:"summary";s:1435:"<p><a href="https://github.com/perrygeo/python-mbtiles">python-mbtiles</a>. Check it out.</p>
<p>I've been working a bit with Tilemill lately and love the Carto css styling, iteractivity through UTFGrids and being able to export the whole deal as a single <a href="http://mapbox.com/mbtiles-spec/">mbtiles</a> sqlite database. But when it comes to working with the mbtiles databases, I've found both Tilestache and Tilestream to be fairly limiting:</p>
<p>Tilestache serves images but does not (yet) serve up UTFGrids _directly from mbtiles _ while Tilestream hardcodes a "grid()" JSONP callback around the returned json data making it fairly specific to Wax client libraries.</p>
<p>So I went down two paths, first trying to export all the tiles out of mbtiles to json and png files (for those times when you just want to serve static files), then trying to write a simple server that would do dynamic jsonp callbacks. Turns out that in the process, I was able to abstract a lot of the python&lt; -&gt;sqlite interaction into some generic python classes.</p>
<p>Thus <a href="https://github.com/perrygeo/python-mbtiles">python-mbtiles</a> was born. It provides a simple mbtiles web server, a conversion script, and some python classes to work with. No frills, no anything really at this point. More an experiment gone right that might be useful to someone out there in GeoPython land.  Enjoy and let me know if you have any ideas!</p>";}i:13;a:6:{s:5:"title";s:14:"Average Aspect";s:4:"link";s:39:"http://perrygeo.com/average-aspect.html";s:7:"updated";s:25:"2012-03-18T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:47:"tag:perrygeo.com,2012-03-18:average-aspect.html";s:7:"summary";s:2934:"<p>Ever try to figure out what the average aspect of an area is? i.e. </p>
<blockquote>
<p>What direction does this hillside face? </p>
</blockquote>
<p>Let's say we want to determine the average elevation of an area based on a raster DEM. Just take the arithmetic mean of all the elevation cells contained in the area - a simple zonal statistics problem.</p>
<p>Turns out that aspect is not quite as straightforward. True, we can easily use <a href="http://www.gdal.org/gdaldem.html">gdaldem</a> to create an aspect map.</p>
<p><code>gdaldem aspect elevation.tif aspect.tif</code></p>
<p>This gives a raster with values in degrees: 0 is north, 90 is east, 180 is south, etc... but note that 360 is north as well.  We're dealing with angular units, not linear units. </p>
<p>For example, take a nearly North facing hillside; the left edge is facing slightly NW (350 degrees) while the right edge faces slighty NE (10 degrees).</p>
<p>The arithmetic mean of the aspect values = <code>(350+350+10+10)/4 = 180°</code>. Due south? That's entirely wrong! It doesn't take into account the angular units. For that we need to create grids representing the <em>sin</em> and <em>cos</em> of the aspect. </p>
<p>Luckily you can use the handy <a href="http://svn.osgeo.org/gdal/trunk/gdal/swig/python/scripts/gdal_calc.py">gdal_calc.py</a> utility that comes with recent versions of gdal. This allows you to apply numpy's trigonometric functions to a raster...</p>
<div class="highlight"><pre>gdal_calc.py -A aspect.tif --calc &quot;cos(radians(A))&quot; --format &quot;GTiff&quot; --outfile cos_aspect.tif  
gdal_calc.py -A aspect.tif --calc &quot;sin(radians(A))&quot; --format &quot;GTiff&quot; --outfile sin_aspect.tif
</pre></div>


<p>Now we can look at the sum of the cos/sin grid cells for our area and take the arctangent according to this python code</p>
<div class="highlight"><pre><span class="kn">import</span> <span class="nn">math</span>
<span class="n">avg_aspect_rad</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">atan2</span><span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="n">cos_cells</span><span class="p">),</span> <span class="nb">sum</span><span class="p">(</span><span class="n">sin_cells</span><span class="p">))</span>
<span class="n">avg_aspect_deg</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">degrees</span><span class="p">(</span><span class="n">avg_aspect_rad</span><span class="p">)</span>
<span class="k">print</span> <span class="n">avg_aspect_deg</span>
</pre></div>


<p>In our example avg_aspect_deg comes out to an aspect of 0 degrees (due north) which is exactly what we'd expect. </p>
<p>Thanks to Dan Patterson for his <a href="http://forums.esri.com/Thread.asp?c=3&amp;f=40&amp;t=119358&amp;mc=8#343468">forum post</a> which clued me into this approach. </p>";}i:14;a:6:{s:5:"title";s:39:"UTFGrids with OpenLayers and Tilestache";s:4:"link";s:64:"http://perrygeo.com/utfgrids-with-openlayers-and-tilestache.html";s:7:"updated";s:25:"2012-02-24T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:72:"tag:perrygeo.com,2012-02-24:utfgrids-with-openlayers-and-tilestache.html";s:7:"summary";s:13492:"<p>A while back, the Development Seed team developed the <a href="http://mapbox.com/mbtiles-spec/utfgrid/">UTFGrid spec</a> to provide</p>
<blockquote>
<p>a standard, scalable way of encoding data for hundreds or thousands of features alongside your map tiles.</p>
</blockquote>
<h3>The basics</h3>
<p>In more detail, the UTFGrids are invisible "ASCII Art" and attribute data embedded in json. They sit "behind" your map tiles (they are not rendered visually) and allows quick attribute lookups <em>without</em> going back to the server. This allows a high degree of real-time map interactivity in an HTML web map - something that has typically been the strong point of plugin-based maps. </p>
<p>So take this tile image...</p>
<p><img alt="" src="http://vmap0.tiles.osgeo.org/wms/vmap0?LAYERS=basic&amp;SERVICE=WMS&amp;VERSION=1.1.1&amp;REQUEST=GetMap&amp;STYLES=&amp;FORMAT=image%2Fjpeg&amp;SRS=EPSG%3A900913&amp;BBOX=-0.0007999986410141,5009377.084,5009377.084,10018754.1688&amp;WIDTH=256&amp;HEIGHT=256" /> </p>
<p>and it's corresponding "utfgrid" ...</p>
<div class="highlight"><pre>          <span class="o">!</span><span class="err">######</span><span class="o">$$$$%%%</span> <span class="o">%%%%</span> <span class="o">%</span> 
          <span class="o">!</span><span class="err">#######</span><span class="o">$$$$%%%</span>    <span class="o">%%%</span>
         <span class="o">!!</span><span class="err">#####</span>   <span class="o">$$$%%%</span>    <span class="o">%%%</span>
         <span class="o">!</span><span class="err">######</span>  <span class="o">$$$$%%%</span> <span class="o">%%</span> <span class="o">%%%</span>
        <span class="o">!!!</span><span class="err">####</span>  <span class="o">$$$$$%%%%</span>  <span class="o">%%%%</span>
      <span class="o">!</span> <span class="o">!</span><span class="err">######</span> <span class="o">$$$$$$%%%%%%%%%%</span>
     <span class="o">!</span> <span class="o">!!</span><span class="err">#####</span>  <span class="o">$$$$$$$%%%%%%%%%</span>
    <span class="o">!!!!!</span><span class="err">####</span>   <span class="o">$$$$$$%%%%%%%%%%</span>
    <span class="o">!!!!!</span><span class="err">####</span>   <span class="o">$$$$$$%%%%%%%%%%</span>
    <span class="o">!!!!!</span><span class="err">####</span>   <span class="o">$$$$$%%%%%%%%%%%</span>
    <span class="o">!!!!!</span><span class="err">#####</span><span class="o">%</span> <span class="o">$$</span>   <span class="o">%%%%%%%%%%%</span>
    <span class="o">!!!!!</span><span class="err">###</span> <span class="err">#</span>      <span class="o">%%%%%%%%%%%%</span>
    <span class="o">!!!</span> <span class="err">#####</span>   <span class="s1">&#39;&#39;&#39;&#39;</span><span class="o">%%%%%%%%%%%%</span>
     <span class="o">!</span>   <span class="err">###</span>      <span class="o">(</span><span class="err">&#39;</span><span class="o">%%%%%%%%%%%%</span>
       <span class="o">)</span> <span class="err">###</span> <span class="err">#</span>  <span class="o">(</span> <span class="o">((%%%%%%%%%%%%</span>
      <span class="o">))</span>  <span class="err">##</span>   <span class="o">(((((%%%%%%%%%%%%</span>
      <span class="o">))</span>  <span class="err">#</span>    <span class="o">****(+%%%%%%%%%%%</span>
       <span class="o">)</span>        <span class="o">%**++++%%%%%%%%%</span>
       <span class="o">,</span> <span class="o">,</span> <span class="nt">------</span><span class="o">*+++++%%%%%%%%%</span>
<span class="o">.</span>     <span class="o">,,,,,</span><span class="nt">------</span><span class="o">+++++++%%%%%%%%</span>
<span class="o">..</span>  <span class="o">/,,,,,,</span><span class="nt">------</span><span class="o">++++++%%%%%%%%%</span>
<span class="o">.</span>  <span class="o">//,,,,,,</span><span class="nt">------000</span><span class="o">++</span><span class="nt">000</span><span class="o">%%%%%%%</span>
  <span class="nt">211</span><span class="o">,,,,,</span><span class="nt">33------00000000</span><span class="o">%%%%%%</span>
 <span class="nt">2221</span><span class="o">,,,,</span><span class="nt">33333---00000000000</span><span class="o">%%%%</span>
<span class="nt">222222</span><span class="o">,,,,</span><span class="nt">3635550000000000000</span><span class="o">%%%</span>
<span class="nt">222222</span><span class="o">,,,,</span><span class="nt">6665777008900000000</span><span class="o">%%%</span>
<span class="nt">22222</span><span class="o">:</span><span class="nd">:66666777788889900000</span> <span class="o">%%%%</span>
<span class="nt">22222</span><span class="o">:;;;;%%=</span><span class="nt">7</span><span class="o">%</span><span class="nt">8888890</span>  <span class="nt">0</span>   <span class="o">%%%%</span>
<span class="nt">22222</span><span class="o">;;;;</span> <span class="o">==??%%</span><span class="nt">888888</span>  <span class="nt">00</span> <span class="o">%%%%%</span>
<span class="nt">222222</span> <span class="o">;;</span>  <span class="o">=??%%%</span><span class="nt">8888</span>       <span class="o">%%%%</span>
<span class="nt">222</span>     <span class="o">;;</span>   <span class="o">?</span><span class="nt">A</span><span class="o">&gt;&gt;@@@</span>          <span class="nt">B</span><span class="o">%</span>
<span class="nt">CCC</span>      <span class="o">;;</span>   <span class="nt">DEE</span><span class="o">@@@</span>          <span class="nt">BB</span>
</pre></div>


<p>You can see how each character corresponds with a country. The character's code is used as a lookup key to retrieve the data associated with that feature (which is also included in the json tile).</p>
<p>If you want to dig in, check out the <a href="http://mapbox.com/demo/visiblemap/">mapbox demo</a>. </p>
<h3>The Server side</h3>
<p>I'm going to assume you have <a href="http://tilestache.org/">Tilestache</a> and <a href="https://github.com/mapnik/mapnik">Mapnik 2+</a> already installed (if not, you should!). The steps to configuring your server for UTFGrids are fairly simple.. </p>
<p><strong>First</strong>, set up mapnik xml file pointing to your data source.</p>
<div class="highlight"><pre><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>

<span class="c">&lt;!-- An ultra simple Mapnik stylesheet --&gt;</span>

<span class="cp">&lt;!DOCTYPE Map [</span>
<span class="cp">&lt;!ENTITY google_mercator &quot;+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over&quot;&gt;</span>
]&gt;

<span class="nt">&lt;Map</span> <span class="na">srs=</span><span class="s">&quot;&amp;google_mercator;&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Style</span> <span class="na">name=</span><span class="s">&quot;style&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;Rule&gt;</span>
            <span class="nt">&lt;PolygonSymbolizer&gt;</span>
                <span class="nt">&lt;CssParameter</span> <span class="na">name=</span><span class="s">&quot;gamma&quot;</span><span class="nt">&gt;</span>.65<span class="nt">&lt;/CssParameter&gt;</span>
                <span class="nt">&lt;CssParameter</span> <span class="na">name=</span><span class="s">&quot;fill&quot;</span><span class="nt">&gt;</span>green<span class="nt">&lt;/CssParameter&gt;</span>
                <span class="nt">&lt;CssParameter</span> <span class="na">name=</span><span class="s">&quot;fill-opacity&quot;</span><span class="nt">&gt;</span>0.5<span class="nt">&lt;/CssParameter&gt;</span>
            <span class="nt">&lt;/PolygonSymbolizer&gt;</span>
            <span class="nt">&lt;LineSymbolizer&gt;</span>
                <span class="nt">&lt;CssParameter</span> <span class="na">name=</span><span class="s">&quot;stroke&quot;</span><span class="nt">&gt;</span>#666<span class="nt">&lt;/CssParameter&gt;</span>
                <span class="nt">&lt;CssParameter</span> <span class="na">name=</span><span class="s">&quot;stroke-width&quot;</span><span class="nt">&gt;</span>0.3<span class="nt">&lt;/CssParameter&gt;</span>
            <span class="nt">&lt;/LineSymbolizer&gt;</span>
        <span class="nt">&lt;/Rule&gt;</span>
    <span class="nt">&lt;/Style&gt;</span>
    <span class="nt">&lt;Layer</span> <span class="na">name=</span><span class="s">&quot;layer&quot;</span> <span class="na">srs=</span><span class="s">&quot;&amp;google_mercator;&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;StyleName&gt;</span>style<span class="nt">&lt;/StyleName&gt;</span>
        <span class="nt">&lt;Datasource&gt;</span>
            <span class="nt">&lt;Parameter</span> <span class="na">name=</span><span class="s">&quot;type&quot;</span><span class="nt">&gt;</span>shape<span class="nt">&lt;/Parameter&gt;</span>
            <span class="nt">&lt;Parameter</span> <span class="na">name=</span><span class="s">&quot;file&quot;</span><span class="nt">&gt;</span>sample_data/world_merc.shp<span class="nt">&lt;/Parameter&gt;</span>
        <span class="nt">&lt;/Datasource&gt;</span>
    <span class="nt">&lt;/Layer&gt;</span>
<span class="nt">&lt;/Map&gt;</span>
</pre></div>


<p><strong>Next</strong>, set up tilestache configuration file</p>
<div class="highlight"><pre>{
&quot;cache&quot;: {
           &quot;name&quot;: &quot;Disk&quot;,
           &quot;path&quot;: &quot;/tmp/stache&quot;
},
&quot;layers&quot;: {
    &quot;world&quot;:
    {
        &quot;provider&quot;: {&quot;name&quot;: &quot;mapnik&quot;, &quot;mapfile&quot;: &quot;style.xml&quot;}
    },
    &quot;world_utfgrid&quot;:
    {
        &quot;provider&quot;:
        {
        &quot;class&quot;: &quot;TileStache.Goodies.Providers.MapnikGrid:Provider&quot;,
        &quot;kwargs&quot;:
        {
            &quot;mapfile&quot;: &quot;style.xml&quot;, 
            &quot;fields&quot;:[&quot;NAME&quot;, &quot;POP2005&quot;],
            &quot;layer_index&quot;: 0,
            &quot;scale&quot;: 4
        }
    }
  }
}
</pre></div>


<p>Finally, you're ready to run the tilestache server...</p>
<div class="highlight"><pre>tilestache-server.py -c your.cfg -i localhost -p 7890
</pre></div>


<p>Now you should be serving utfgrids to <code>http://localhost:7890/world_utfgrid/</code></p>
<h3>The Client side</h3>
<p>Now we need something to consume the UTFGrid tiles and interact with them in an HTML/JS environment. The original client implementation of UTFGrid support is provided by <a href="http://mapbox.com/wax/">Wax</a> which sits atop mapping clients like Modest Maps and Leaflet. Wax is very slick and easy to use but doesn't work so well for more complex arrangements or with OpenLayers-based maps. </p>
<p>Rather than clog up Wax with the complex UTFGrid use cases that we envisioned, we decided to implement a UTFGrid client in native OpenLayers. Hence my project for the <a href="http://wiki.osgeo.org/wiki/IslandWood_Code_Sprint_2012">OSGEO code sprint</a> was born.</p>
<p><img alt="olexample.PNG" src="/assets/img/uploads/2012/02/olexample.PNG" /></p>
<p>The result was a new OpenLayers Layer which loads up the json "tiles" behind the scenes...</p>
<div class="highlight"><pre>        var grid_layer = new OpenLayers.Layer.UTFGrid( 
            &#39;Invisible UTFGrid Layer&#39;, 
            &quot;./utfgrid/world_utfgrid/<span class="cp">${</span><span class="n">z</span><span class="cp">}</span>/<span class="cp">${</span><span class="n">x</span><span class="cp">}</span>/<span class="cp">${</span><span class="n">y</span><span class="cp">}</span>.json&quot;
        );
        map.addLayer(grid_layer);
</pre></div>


<p>and an OpenLayers Control that handles how the mouse events interact with the grid. In this example, as the mouse moves over the map, a custom callback if fired off which updates a div with some attribute information.</p>
<div class="highlight"><pre>       var callback = function(attributes) {
            if (attributes) {
                var msg  = &quot;<span class="nt">&lt;strong&gt;</span>In 2005, &quot; + attributes.NAME 
                    msg += &quot; had a population of &quot; + attributes.POP2005 + &quot; people.<span class="nt">&lt;/strong&gt;</span>&quot;;
                var element = OpenLayers.Util.getElement(&#39;attrsdiv&#39;);
                element.innerHTML = msg;
                return true;
            } else {
                this.element.innerHTML = &#39;&#39;;
                return false; 
            }
        }

        var control = new OpenLayers.Control.UTFGrid({
            &#39;handlerMode&#39;: &#39;move&#39;,
            &#39;callback&#39;: callback
        });
        map.addControl(control);
</pre></div>


<p>Overall the design goal was to decouple the loading/tiling of the UTFGrids from the interactivity/control. I think this works out nicely and, while a bit more cumbersome than the method used by Wax, it is more flexible and integrates well with existing OpenLayers apps. </p>
<p>You can see them in action on the examples pages:</p>
<ul>
<li>
<p>Demonstrating the use of <a href="http://labs.ecotrust.org/utfgrid/events.html">different event handlers</a> (click, hover, move)</p>
</li>
<li>
<p>Demonstrating <a href="http://labs.ecotrust.org/utfgrid/multi.html">multiple interactivity layers</a> (the interactivity layer need not visible in the map tiles!)</p>
</li>
</ul>
<p>And feel free to check out the code at <a href="https://github.com/perrygeo/openlayers/tree/utfgrid">my github fork</a> for the code. </p>
<p>What do you think? Let me know...</p>";}i:15;a:6:{s:5:"title";s:44:"Optimizing KML for hierarchical polygon data";s:4:"link";s:69:"http://perrygeo.com/optimizing-kml-for-hierarchical-polygon-data.html";s:7:"updated";s:25:"2011-05-18T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:77:"tag:perrygeo.com,2011-05-18:optimizing-kml-for-hierarchical-polygon-data.html";s:7:"summary";s:6243:"<p>For all the benefits of KML, it is decidedly a step backwards for handling large vector datasets. Most KML clients, including the cannonical Google Earth application, experience debilitating slow-down when viewing a couple dozen MB of vector data - datasets that I could easily open on a Pentium 4 in ArcView 3.2 10 years ago! </p>
<p>The unfortunate reality is that optimizing the performance of KML datasets is conflated with the structure of the data and is thus the responsibility of the data publisher. The wisdom of combining styling, performance-related structure, organizational structure, geometry and attributes into a single file format may be questionable, but KML has become the defacto geographic markup language due to it's other benefits. </p>
<p>Anyways, back to performance enhancements on big vector datasets... The concept of "regionation" is used by several KML software to improve performance. From the <a href="http://google-latlong.blogspot.com/2010/09/faster-larger-closer-regionation-in.html">Google LatLong Blog</a>:</p>
<blockquote>
<p>You can think of Regionation as a <strong>hierarchical subdivision of points or tiles</strong>, which shows less detail from afar, and more detail as you zoom in to the globe. This dynamic loading creates clearer visualizations by minimizing clutter, while simultaneously speeding up the rendering process.</p>
</blockquote>
<p>In most implementations, there is a generic strategy for determining this hierarchy based on attributes or geometry size (in the case of vectors) or by a tile system. Neither is ideal when you want to preserve the vector nature of the data, split it into small, easily-loadable files and determine it's view based on the <strong>natural hierarchy that is built into the data structure</strong>.</p>
<p>Specifically I am thinking about watersheds here - the US <a href="http://nwis.waterdata.usgs.gov/tutorial/huc_def.html">Hydrologic Units</a>. Hydrologic units are watershed boundaries that are organized in a nested hierarchy; higher levels contain smaller watersheds that are contained within a single watershed from a "parent" level. The unique identifiers (hydrologic unit codes or HUCs) are rather ingenious as well; Each level is represented by 2 digits and are concatenated to form a single identifier that can be used to determine it's "parent". For example:</p>
<p><img alt="Level 4 HUCs" src="/assets/img/uploads/2011/05/huc8.png" /></p>
<p><img alt="Level 5 HUCs" src="/assets/img/uploads/2011/05/huc10.png" /></p>
<p><img alt="Level 6 HUCs" src="/assets/img/uploads/2011/05/huc12.png" /></p>
<p>Level 4 HUCs <br />
e.g. 170900<strong>11</strong></p>
<p>Level 5 HUCs <br />
e.g. 17090011<strong>04</strong></p>
<p>Level 6 HUCs <br />
e.g. 1709001104<strong>03</strong></p>
<p>Instead of fabricating a hierarchy of features, why not just use this natural hierarchy to structure the KML documents?</p>
<p><img alt="hucs-1.png" src="/assets/img/uploads/2011/05/hucs-1.png" /></p>
<p>Or as KML markup:</p>
<div class="highlight"><pre>    <span class="nt">&lt;placemark&gt;</span>
        <span class="nt">&lt;name&gt;</span>17090009<span class="nt">&lt;/name&gt;</span>
        <span class="nt">&lt;styleurl&gt;</span>#HUC_8-default<span class="nt">&lt;/styleurl&gt;</span>
        <span class="nt">&lt;polygon&gt;&lt;outerboundaryis&gt;&lt;linearring&gt;&lt;coordinates&gt;</span>...
        <span class="nt">&lt;/coordinates&gt;&lt;/linearring&gt;&lt;/outerboundaryis&gt;&lt;/polygon&gt;</span>   
    <span class="nt">&lt;/placemark&gt;</span>

    <span class="nt">&lt;networklink&gt;</span>
    <span class="nt">&lt;name&gt;</span>17090009_children<span class="nt">&lt;/name&gt;</span>
    <span class="nt">&lt;region&gt;</span>
      <span class="nt">&lt;latlonaltbox&gt;</span>
        <span class="nt">&lt;west&gt;</span>-123.001645628<span class="nt">&lt;/west&gt;</span>
        <span class="nt">&lt;south&gt;</span>44.8300083641<span class="nt">&lt;/south&gt;</span>
        <span class="nt">&lt;east&gt;</span>-122.203351254<span class="nt">&lt;/east&gt;</span>
        <span class="nt">&lt;north&gt;</span>45.298653051<span class="nt">&lt;/north&gt;</span>
      <span class="nt">&lt;/latlonaltbox&gt;</span>
      <span class="nt">&lt;lod&gt;</span>
        <span class="nt">&lt;minlodpixels&gt;</span>256<span class="nt">&lt;/minlodpixels&gt;</span>
        <span class="nt">&lt;maxlodpixels&gt;</span>1600<span class="nt">&lt;/maxlodpixels&gt;</span>
      <span class="nt">&lt;/lod&gt;</span>
    <span class="nt">&lt;/region&gt;</span>
    <span class="nt">&lt;link&gt;</span>
      <span class="nt">&lt;href&gt;</span>./17090009_children.kml<span class="nt">&lt;/href&gt;</span>
      <span class="nt">&lt;viewrefreshmode&gt;</span>onRegion<span class="nt">&lt;/viewrefreshmode&gt;</span>
    <span class="nt">&lt;/link&gt;</span>
    <span class="nt">&lt;/networklink&gt;</span>
</pre></div>


<p>The advantages to this design are that you don't have to break the geometries up to fit into a square tiling pattern, data loads and renders in a logical pattern and there will always be 100 or less (usually far less) placemarks per file due to the design of the HUC data structure. File sizes stay low, network links load quickly and request/rendering occurs only when they come into view. For this example dataset totaling 300M of shapefiles, there are several hundred resulting kmz files without any repeated features and all less than ~ 150K each. In essence, it achieves optimal performance by its very design. </p>
<p>Here's a video of it in action:</p>
<iframe width="420" height="315" src="http://www.youtube.com/embed/5FgOfLEVX8M" frameborder="0">iframecontent</iframe>

<p>This was all done with <a href="http://watershed-priorities.googlecode.com/hg/util/kml_regionate_heirarchy.py">a fairly "hackish" python script</a>. I'll continue to refine it as needed for this particular application but, at this time, it's not intended to be a reusable tool - if you want to use it, be prepared to dig through the source code and get your hands dirty. The same concept could theoretically be applied to any spatially-hierarchical vector data (think geographic boundaries ... country &gt; state &gt; county &gt; city).</p>";}i:16;a:6:{s:5:"title";s:30:"Um - nice “review” of QGIS";s:4:"link";s:47:"http://perrygeo.com/um-nice-review-of-qgis.html";s:7:"updated";s:25:"2010-12-20T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:55:"tag:perrygeo.com,2010-12-20:um-nice-review-of-qgis.html";s:7:"summary";s:1553:"<p>RJ Zimmer at American Surveyor magazine did what he described as a comparison of several free GIS application entitled "<a href="http://www.amerisurv.com/PDF/TheAmericanSurveyor_Zimmer-SomethingForNothing_Vol7No8.pdf">Something for Nothing</a>"</p>
<p>First of all, the title bugs me. The idea that the sole benefit of free software is simply cost savings is pretty naive. It disregards openness, community support, ability to transfer knowledge, freedom from restrictive licensing, etc. But I can live with the title.</p>
<p>I can also live with his decision to include only a single open-source GIS application alongside 3 closed-but-gratis applications. He doesn't claim that it's a comprehensive review despite the fact that the ecosystem of Free GIS is far more diverse.</p>
<p>But I can't accept his treatment of Quantum GIS:</p>
<blockquote>
<p>I did not fully test Quantum GIS. I did download and install it but the software was too complicated to use "right out of the box", and I did not have time to learn to use it.</p>
</blockquote>
<p>The feature comparison chart includes mainly "?" in the QGIS column. </p>
<p>OK we get it - your deadline hit before you could bother to learn one of the applications you were supposedly reviewing. One even wonders why he included QGIS the review at all. This is nothing short of irresponsible reporting. When people post stuff like this, it really rubs me the wrong way - now a whole audience of users have a inaccurate view of QGIS and entire free GIS ecosystem thanks to his slacker journalism.</p>";}i:17;a:6:{s:5:"title";s:7:"kmltree";s:4:"link";s:32:"http://perrygeo.com/kmltree.html";s:7:"updated";s:25:"2010-06-09T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:40:"tag:perrygeo.com,2010-06-09:kmltree.html";s:7:"summary";s:1845:"<p>When the <a href="http://marinemap.org">MarineMap</a> team started delving into the <a href="http://earth.google.com/plugin/">Google Earth plugin</a>, it was apparent that it supported the display and rendering of KML files <em>almost</em> as well as the Google Earth desktop application. The missing piece of functionality was the nice tree-style legend that is provided with the desktop app. The plugin lets you add KML for display but gives you no HTML interface to work with it. For simple apps, you can just roll your own html/js form. But that quickly becomes unmanageable if you're adding KML dynamically and need to create a tree-style legend for any arbitrary KML document. </p>
<p>Enter <a href="http://code.google.com/p/kmltree/">kmltree</a>. </p>
<blockquote>
<p>kmltree is a javascript tree widget that can be used in conjunction with the Google Earth API. It replicates the functionality of the Google Earth desktop client, and is fast, extensible, and stable for use in advanced web applications. It's built utilizing the earth-api-utility-library and jQuery. </p>
</blockquote>
<p><a href="/assets/img/uploads/2010/06/screen-shot-2010-06-09-at-81707-am.png"><img alt="kmltree" src="/assets/img/uploads/2010/06/screen-shot-2010-06-09-at-81707-am.png" /></a></p>
<p>Any arbitrary KML can be parsed and represented in a tree-style legend right in the web browser. <a href="http://kmltree.googlecode.com/hg/examples/refresh.html">Try it out</a>.</p>
<p>Kmltree is the brainchild of <a href="http://www.google.com/profiles/underbluewaters">Chad Burt</a> who developed it as part of the marinemap codebase but had the foresight to realize that this would be useful to a much wider audience and abstracted it into its own javascript library. If you're building a web mapping application with the Google Earth API, give it a shot!</p>";}i:18;a:6:{s:5:"title";s:58:"MarineMap wins award for Environmental Conflict Resolution";s:4:"link";s:83:"http://perrygeo.com/marinemap-wins-award-for-environmental-conflict-resolution.html";s:7:"updated";s:25:"2010-05-27T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:91:"tag:perrygeo.com,2010-05-27:marinemap-wins-award-for-environmental-conflict-resolution.html";s:7:"summary";s:1842:"<p>For the last year or so, I've had the pleasure of working with the <a href="http://www.marinemap.org">MarineMap Consortium</a>. We just learned yesterday that the U.S. Institute for Environmental Conflict Resolution <a href="http://eon.businesswire.com/portal/site/eon/permalink/?ndmViewId=news_view&amp;newsId=20100526007072&amp;newsLang=en">awarded</a> MarineMap the “Innovation in Technology and Environmental Conflict Resolution”.</p>
<iframe width="560" height="315" src="http://www.youtube.com/embed/GCUxpnUSiUg" frameborder="0"> x</iframe>

<p>I joined the team after the launch of the <a href="http://southcoast.marinemap.org/marinemap/">South Coast of California</a> site which was already widely recognized as a successful decision-support tool for marine spatial planning. We've since been working on version 2 of the MarineMap tool which is deployed currently for the <a href="http://northcoast.marinemap.org/marinemap">North Coast of California</a> in support of their Marine Life Protection Act (MLPA) process. </p>
<p>It's been a tremendous challenge to bring a <a href="http://code.google.com/p/marinemap/">new version of the software</a> to life and have it meet and exceed the standards set by its predecessor. It has also been tremendously rewarding and having our work recognized at this level is a great honor. It's nice to know that the tools we've developed have been so helpful and instrumental in the marine planning process along the coast of California. Looking forward, I see MarineMap growing beyond a tool for a specific purpose (supporting the MLPA Initiative) to a robust framework for developing web-based spatial planning tools for all sorts of environmental applications, both marine and terrestrial. And this award confirms that we are already heading in the right direction. Very exciting news!</p>";}i:19;a:6:{s:5:"title";s:18:"Exploring Geometry";s:4:"link";s:43:"http://perrygeo.com/exploring-geometry.html";s:7:"updated";s:25:"2010-05-06T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:51:"tag:perrygeo.com,2010-05-06:exploring-geometry.html";s:7:"summary";s:3132:"<p>I don't know how I let this gem slip past my radar for so long. It was only via <a href="http://lin-ear-th-inking.blogspot.com/2010/05/random-points-in-polygon-in-jts.html">a post by Dr. JTS</a> himself (aka Martin Davis) that I saw a screenshot of JTS TestBuilder and decided to check it out. </p>
<p>I was actually just talking with someone about a tool that could provide simple visualization of WKT geometries;  JTS Test Builder does that and much more. </p>
<p>You can input geometries (graphically or by well-known text) and compare two geometries based on spatial predicates:</p>
<p><a href="/assets/img/uploads/2010/05/screen-shot-2010-05-06-at-81418-pm.png"><img alt="spatial predicates" src="/assets/img/uploads/2010/05/screen-shot-2010-05-06-at-81418-pm.png" /></a></p>
<p>Do overlay analyses with the two geometries. Note that you can see the result as WKT below.</p>
<p><a href="/assets/img/uploads/2010/05/screen-shot-2010-05-06-at-81502-pm.png"><img alt="overlay" src="/assets/img/uploads/2010/05/screen-shot-2010-05-06-at-81502-pm.png" /></a></p>
<p>And there are a host of other spatial operations to generate geometries using buffers...
<a href="/assets/img/uploads/2010/05/screen-shot-2010-05-06-at-81602-pm.png"><img alt="buffers" src="/assets/img/uploads/2010/05/screen-shot-2010-05-06-at-81602-pm.png" /></a></p>
<p>... convex hulls ...
<a href="/assets/img/uploads/2010/05/screen-shot-2010-05-06-at-81716-pm.png"><img alt="convex hull" src="/assets/img/uploads/2010/05/screen-shot-2010-05-06-at-81716-pm.png" /></a></p>
<p>This app provides a very nice and user-friendly way to quickly and simply explore and test geometric operations. To try it out, <a href="http://sourceforge.net/projects/jts-topo-suite/">download JTS</a> and unzip the contents somewhere. If you're on windows, the .bat file is provided. If you're running anything else, you have to cook up a shell script that will set up the environment and run JTS TestBuilder:</p>
<blockquote>
<div class="highlight"><pre><span class="nt">JTS_HOME</span><span class="o">=/</span><span class="nt">usr</span><span class="o">/</span><span class="nt">share</span><span class="o">/</span><span class="nt">java</span><span class="o">/</span><span class="nt">jts-1</span><span class="nc">.11</span>
<span class="nt">CP</span><span class="o">=$</span><span class="nt">CLASSPATH</span>
<span class="nt">for</span> <span class="nt">i</span> <span class="nt">in</span> <span class="o">$</span><span class="nt">JTS_HOME</span><span class="o">/</span><span class="nt">lib</span><span class="o">/*</span><span class="nc">.jar</span><span class="o">;</span> <span class="nt">do</span> <span class="nt">CP</span><span class="o">=$</span><span class="nt">i</span><span class="o">:$</span><span class="nt">CP</span><span class="o">;</span> <span class="nt">done</span>
<span class="nt">java</span> <span class="nt">-Xmx256m</span> <span class="nt">-cp</span> <span class="o">$</span><span class="nt">CP</span> <span class="nt">com</span><span class="nc">.vividsolutions.jtstest.testbuilder.JTSTestBuilder</span> <span class="o">$*</span>
</pre></div>


</blockquote>";}i:20;a:6:{s:5:"title";s:11:"Distributed";s:4:"link";s:36:"http://perrygeo.com/distributed.html";s:7:"updated";s:25:"2010-03-31T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:44:"tag:perrygeo.com,2010-03-31:distributed.html";s:7:"summary";s:1549:"<p>I've been playing around with some distributed version control systems (DVCS) to replace svn. </p>
<p>First, the <em>why</em>: I'll leave the details up to Joel in his excellent <a href="http://hginit.com/">HgInit tutorial</a>. Its mercurial-specific but the general concepts apply to any DVCS. The takeaway message for any project with &gt; 1 developer is this:</p>
<blockquote>
<p>Mercurial [ed: DVCS] separates the act of committing new code from the act of inflicting it on everybody else.</p>
</blockquote>
<p>Next, the <em>implementation</em>: I'm using <strong>git</strong> to work on another project (<a href="http://goldencheetah.org/">Golden Cheetah</a>) and its been a tough learning curve. Git is no doubt the most powerful DVCS out there. You can do magical things with it like combine commits and mess with history trees. And you can also screw things up pretty badly if you misinterpret the esotric docs for some non-intuitive piece of the workflow. </p>
<p>I just tried <strong>mercurial</strong> this morning - hg seems to fit my mind well. There is less power but the workflow is very clear and intuitive. And there are docs written for people who don't want to do an in-depth study of their version control software. It stays out of the way. </p>
<p>Long story short, I'm going to use mercurial/hg for my new projects. Ah what the heck my old/ongoing projects as well. My <a href="http://code.google.com/p/perrygeo/">googlecode repository</a> has been converted over to Mercurial. Svn will stick around but wont be updated.</p>";}i:21;a:6:{s:5:"title";s:37:"Lazy raster processing with GDAL VRTs";s:4:"link";s:62:"http://perrygeo.com/lazy-raster-processing-with-gdal-vrts.html";s:7:"updated";s:25:"2010-02-18T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:70:"tag:perrygeo.com,2010-02-18:lazy-raster-processing-with-gdal-vrts.html";s:7:"summary";s:3669:"<p>No, not lazy as in REST :-) ... Lazy as in "<a href="http://en.wikipedia.org/wiki/Lazy_evaluation">Lazy evaluation</a>":</p>
<blockquote>
<p>In computer programming, lazy evaluation is the technique of delaying a computation until the result is required.</p>
</blockquote>
<p>Take an <strong>example raster processing workflow</strong> to go from a bunch of tiled, latlong, GeoTiff digital elevation models to a single shaded relief GeoTiff in projected space:</p>
<ol>
<li>Merge the tiles together </li>
<li>Reproject the merged DEM (using bilinear or cubic interpolation) </li>
<li>Generate the hillshade from the merged DEM </li>
</ol>
<p>Simple enough to do with GDAL tools on the command line. Here's the typical, <strong>process-as-you-go</strong> implementation:</p>
<div class="highlight"><pre>gdal_merge.py -of GTiff -o srtm_merged.tif srtm_12_*.tif 
gdalwarp -t_srs epsg:3310 -r bilinear -of GTiff srtm_merged.tif srtm_merged_3310.tif 
gdaldem hillshade srtm_merged_3310.tif srtm_merged_3310_shade.tif -of GTiff
</pre></div>


<p>Alternately, we can simulate <strong>lazy evaluation</strong> by using <a href="http://www.gdal.org/gdal_vrttut.html">GDAL Virtual Rasters</a> (VRT) to perform the intermediate steps, only outputting the GeoTiff as the final step. </p>
<div class="highlight"><pre>gdalbuildvrt srtm_merged.vrt srtm_12_0*.tif
gdalwarp -t_srs epsg:3310 -r bilinear -of VRT srtm_merged.vrt srtm_merged_3310.vrt 
gdaldem hillshade srtm_merged_3310.vrt srtm_merged_3310_shade2.tif -of GTiff
</pre></div>


<p>So what's the advantage to doing it the VRT way? They both produce <em>exactly</em> the same output raster. Lets compare:</p>
<table class="table table-striped table-bordered table-condensed">
<thead>
<tr>
<th> </th>
<th>Process-As-You-Go</th>
<th>"Lazy" VRTs</th>
</tr>
</thead>
<tbody>
<tr>
<th>Merge (#1) time</th>
<td>3.1 sec</td>
<td>0.05 sec</td>
</tr>
<tr>
<th>Warp (#2) time </th>
<td>7.3 sec </td>
<td>0.10 sec </td>
</tr>
<tr>
<th>Hillshade (#3) time</th>
<td>10.5 sec </td>
<td>19.75 sec</td>
</tr>
<tr>
<th>Total processing time</th>
<td>20.9 sec</td>
<td>19.9 sec </td>
</tr>
<tr>
<th>Intermediate files</th>
<td>2 tifs</td>
<td>2 vrts</td>
</tr>
<tr>
<th>Intermediate file size</th>
<td>261 MB</td>
<td>0.005 MB</td>
</tr>
</tbody>
</table>

<p>The Lazy VRT method <strong>delays all the computationally-intensive processing until it is actually required</strong>. The intermediate files, instead of containing the raw raster output of the actual computation, are XML files which contain the <em>instructions</em> to get the desired output. This allows GDAL to do all the processing in one step (the final step #3). The <em>total</em> processing time is not significantly different between the two methods but in terms of the productivity of the GIS analyst, the VRT method is superior. Imagine working with datasets 1000x this size with many more steps - having to type the command, wait 2 hours, type the next, etc. would be a waste of human resources versus assembling the instructions into vrts then hitting the final processing step when you leave the office for a long weekend.</p>
<p>Additionaly, the VRT method produces only <strong>small intermediate xml files</strong> instead of having a potentially huge data management nightmare of shuffling around GB (or TB) of intermediate outputs! Plus those xml files serve as an excellent piece of metadata which describe the exact processing steps which you can refer to later or adapt to different datasets. </p>
<p>So next time you have a multi-step raster workflow, use the GDAL VRTs to your full advantage - you'll save yourself time and disk space by being lazy. </p>";}i:22;a:6:{s:5:"title";s:32:"Peaksware licensing revisted …";s:4:"link";s:53:"http://perrygeo.com/peaksware-licensing-revisted.html";s:7:"updated";s:25:"2009-12-16T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:61:"tag:perrygeo.com,2009-12-16:peaksware-licensing-revisted.html";s:7:"summary";s:1796:"<p>I had previously <a href="http://www.perrygeo.net/wordpress/?p=138">bitched and moaned</a> about the licensing restrictions on the <a href="http://www.trainingpeaks.com/WKO">TrainingPeaks WKO+</a> software. Truth be told, the reason I was so put off by their crappy licensing scheme was that my cycling training relied so heavily on their software. It was not perfect but it was the best tool available. I've since discovered <a href="http://goldencheetah.org/">Golden Cheetah</a> which is a viable open-source alternative but it still lags behind WKO+ in many critical features.</p>
<p>Now, fresh in time for the 2010 training season, Peaksware has released a new version 3.0 of WKO+ which, amongst many UI and functionality improvements, has made considerable progress on the licensing front.</p>
<blockquote>
<p>We know, our licensing has been a challenge to deal with for our customers in the past, but we’ve always tried to be as helpful as possible getting you back up and running after a hard drive crash or new computer. To remedy this, we’re pleased to announce an all new flexible licensing system. First, with every purchase we now allow you to install WKO+ 3.0 on up to two computers; second, we’ve built an online activation/deactivation system so you are free to move your active licenses from machine to machine. Are you leaving on a 2 week trip? Just de-activate your home computer, activate your laptop, and you’re on your way. When you get home, de-actiavate your laptop, re-activate your desktop and you’re all set.</p>
</blockquote>
<p>It ain't open source (there is still a place in this world for proprietary software if they can push the boundaries and innovate) but the sensitivity to the licensing issue just may have restored my faith in their company. </p>";}i:23;a:6:{s:5:"title";s:56:"Nice examples of ESRIs geoprocessing python module (9.3)";s:4:"link";s:78:"http://perrygeo.com/nice-examples-of-esris-geoprocessing-python-module-93.html";s:7:"updated";s:25:"2009-08-10T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:86:"tag:perrygeo.com,2009-08-10:nice-examples-of-esris-geoprocessing-python-module-93.html";s:7:"summary";s:748:"<p>Just thought I'd point out a great presentation about the "new" 9.3 geoprocessing (gp) python module from ESRI. </p>
<p>Ghislain Prince and Elizabeth Flanary do a great job of introduction by examples. The latest gp module is much more pythonic and these examples show how to leverage that to its full advantage. If you try to do this with older gp versions, the code would make most pythonistas cringe. This latest version returns objects and lists, use real booleans, and uses true objects instead of funky string parameters. Basic OO stuff for most python libraries but a big improvement for gp. </p>
<p>Here's the <a href="http://arcscripts.esri.com/details.asp?dbid=16509">powerpoint presentation</a>. Thanks to Jamey Rosen for the tip!</p>";}i:24;a:6:{s:5:"title";s:24:"Peaksware licensing hell";s:4:"link";s:49:"http://perrygeo.com/peaksware-licensing-hell.html";s:7:"updated";s:25:"2009-06-23T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:57:"tag:perrygeo.com,2009-06-23:peaksware-licensing-hell.html";s:7:"summary";s:4391:"<p>I've been using Peaksware's WKO+, a cycling and running training tool to manage data from heart rate monitors, GPS units, power meters, etc. Its a powerful tool with a clunky UI but I've gotten used to it. </p>
<p>You pay $100 for a "personal" license. Not a big deal to me since they basically have a monopoly on this software niche. I first installed it on my work computer to test the data from my daily bike commute. Cool it works. Then I went to install it at home since that's where I'll be using it. Works ok. I proceed to gather all my fitness data into their proprietary binary format. </p>
<p>Fast forward a few months. I'm reformatting the hard drive on the laptop and want to move all my data and software to my desktop. But installing WKO+ is giving me a headache ("Error: Too many installations"). The registration process takes a hardware fingerprint and your must active it via the web to get a registration code. However, hidden withing their EULA, is a term which <strong>dissallows the transfer of license</strong> to another computer other than the one to which it was originally installed. The second installation was just an allowance they make to allow for "hard drive crashes" and such.</p>
<p>Since neither of those machines would be available to me, certainly there would be a way to transfer it? After several progressively more desperate communications with Matt Allen at peaksware support, he informed me that there was no way they would transfer the license (the non-transfer clause IS in the EULA after all). <strong>I would need to purchase another license simply because I switched computers</strong>!</p>
<p>Here is my response:</p>
<blockquote>
<p>Basically what you are telling me is that I can no longer use WKO+
without paying again. I get to use the software for a few months and
you revoke my right to use it because I buy a new computer! I am a
paying customer, trying to be totally legit here, willing to support
your business in exchange for a license to use your software and you
insist on screwing me over. Brilliant.</p>
</blockquote>
<p>This is one of the most unprofessional and idiotic stances I have ever
seen from a software company. Your intention appears to be to screw
over your paying customers and milk as much cash from them as possible
- you might want to rethink that business model unless you want to
loose customers! I will never endorse, recommend or purchase another
product or service from peaksware nor will any of my family, friends,
teammates or readers once the word gets out about your disrespectful
policies.</p>
<p>There are numerous typical situations where a new copy of the software
would need to be installed including:</p>
<ul>
<li>Hard drive failure</li>
<li>Operating system upgrades</li>
<li>New computer purchases</li>
<li>Extended traveling and touring (installing onto a laptop or netbook)</li>
</ul>
<p>Now I fully understand why your policy is one license per computer. It
makes perfect sense. I have seen plenty of other software with a
similar licensing model. But they also allow to uninstall the software
and re-register it on another computer due to these circumstances.
There is simply no technological reason why you could not implement a
licensing structure that allowed the user more freedom to transfer
licenses while still preventing piracy. As it stands, your licensing
model treats paying customers like criminals if they happen to run
across any one of the above situations.</p>
<p>So, to sum it up - your foolish license policy has lost you one
customer and many future ones.</p>
<p>Good riddance.</p>
<p>So if you want to support a company that treats its paying customers like criminals because they get a new computer, go right ahead and support Peaksware. But anyone who expects to use software that they pay for even if they happen to buy a new computer should steer clear.</p>
<p>The real kicker is that all that work is locked away in their proprietary file format simply because of their draconian licensing. This is the real take home lesson to all software users (not just fitness geeks): <strong>If you lock your data away in a proprietary format and are beholden to a single company in order to access it, they can and will screw you. Always insist on open data formats, even if using proprietary software</strong>. Oh and always read the EULA carefully before clicking OK!</p>";}i:25;a:6:{s:5:"title";s:34:"Reading XFS partition from Windows";s:4:"link";s:59:"http://perrygeo.com/reading-xfs-partition-from-windows.html";s:7:"updated";s:25:"2009-06-21T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:67:"tag:perrygeo.com,2009-06-21:reading-xfs-partition-from-windows.html";s:7:"summary";s:2558:"<p>When I was setting up my linux system a few years ago, I did some research into filesystems and determined that the <a href="http://en.wikipedia.org/wiki/XFS">XFS file system</a>, being particularly proficient in dealing with large files, would be ideal for my home directory. And it was. But the one factor I didn't consider was portability. Turns out that there is basically no support for XFS in windows. </p>
<p>So how do you access your files from Windows if they are on an XFS partition? I had just shy of 1 TB of data to transfer so using my other linux box and transferring across the network would have taken forever. The solution I came up with is a bit convoluted but it has some real advantages:</p>
<p>1) Install Sun's VirtualBox.
2) Download an iso for your favorite linux distribution (mine being Ubuntu 9.04)
3) Create a virtual machine from the linux iso
4) Install the VBOxGuestAdditions in the linux virtual machine. 
5) Create a Share folder on the windows host and register it with the virtual machine. This will allow you to transfer files from the guest (linux) to the host(windows) You may have to manually mount the drive in the linux guest:</p>
<div class="highlight"><pre>mount -t vboxsf share_name /mnt/share_name
</pre></div>


<p>6) Using the windows host cmd line, create a vmdk from the physical drive that your XFS partition resides on. In this case, PhysicalDrive1 corresponds to the second SATA connector. This will allow your guest OS to talk directly with the drive:</p>
<div class="highlight"><pre>cd C:\Program Files\Sun\xVM VirtualBox
VBoxManage.exe internalcommands createrawvmdk 
  -filename &quot;C:\Documents and Settings\perry\.VirtualBox\HardDisks\Physical1.vmdk&quot; 
  -rawdisk \\.\PhysicalDrive1 -register
</pre></div>


<p>Once completed, you should see:</p>
<div class="highlight"><pre>RAW host disk access VMDK file 
C:\Documents and Settings\perry\.VirtualBox\HardDisks\Physical1.vmdk created successfully.
</pre></div>


<p>7) Make sure to add the physical drive to your list of hard drives in the linux guest options. Restart the linux guest virtual machine and your XFS partition should already be mounted. Now you can begin transfering files between your XFS partition and the shared folder on the windows host.</p>
<p>Whew. Lots of hassle for a simple file transfer, right! But the side benefit is that now you have a fully functional linux virtual machine with a shared folder set up to the windows host. Very useful - even when you must run windows, it helps to have a linux VM standing by!</p>";}i:26;a:6:{s:5:"title";s:52:"IronPython (2.6) and ArcGIS - ready for prime time!!";s:4:"link";s:70:"http://perrygeo.com/ironpython-26-and-arcgis-ready-for-prime-time.html";s:7:"updated";s:25:"2009-06-16T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:78:"tag:perrygeo.com,2009-06-16:ironpython-26-and-arcgis-ready-for-prime-time.html";s:7:"summary";s:600:"<p>Not sure why this didn't occur to me <em>before</em> I wrote <a href="http://www.perrygeo.net/wordpress/?p=135">that last post</a> but I tried the "pythonic" version of the code under the <a href="http://ironpython.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=25126">IronPython 2.6 Beta 1</a> release and it works!</p>
<div class="highlight"><pre>lyr = Carto.LayerFileClass()
lyr.Open(&#39;C:\\test.lyr&#39;)
print lyr.Filename
</pre></div>


<p>Works perfectly now. So IronPython <strong>2.6</strong> promises to be a viable option for extending ArcGIS. My enthusiasm has been renewed.</p>";}i:27;a:6:{s:5:"title";s:54:"IronPython and ArcGIS - not quite ready for prime time";s:4:"link";s:77:"http://perrygeo.com/ironpython-and-arcgis-not-quite-ready-for-prime-time.html";s:7:"updated";s:25:"2009-06-16T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:85:"tag:perrygeo.com,2009-06-16:ironpython-and-arcgis-not-quite-ready-for-prime-time.html";s:7:"summary";s:4406:"<p>Occasionally I find myself in the C#/.NET world in order to write code using ESRI ArcObjects. Today I was toying with the idea of automating the creation of ESRI Layer files (a file which defines the cartographic styling of a dataset). Of course they are in an undocumented binary file format, <a href="http://blog.cleverelephant.ca/2009/04/esri-formats-back-to-future.html">inaccessible to anything but ESRI software</a>. So I pop open Visual Studio .... </p>
<p>I feel a nagging unease every time I type a set of curly braces. And VB just makes me insane. I prefer, of course, to use python. Luckily there is <a href="http://www.codeplex.com/Wiki/View.aspx?ProjectName=IronPython">IronPython</a> which runs on .NET - which means I could theoretically use it to interact with ArcGIS. </p>
<p>I only found a <a href="http://moreati.org.uk/blog/2009/01/27/from-esriarcgis-import-geodatabase/">single working example</a> of using ArcObjects through IronPython. But it looked promising enough to close Visual Studio and give it a go. </p>
<p>The first nagging problem is an IronPython-specific one. Relatively minor annoyance but you have to add the reference to a .NET assembly (library) before you can load it. </p>
<div class="highlight"><pre><span class="kn">import</span> <span class="nn">clr</span>
<span class="n">clr</span><span class="o">.</span><span class="n">AddReference</span><span class="p">(</span><span class="s">&#39;ESRI.ArcGIS.System&#39;</span><span class="p">)</span>
<span class="n">clr</span><span class="o">.</span><span class="n">AddReference</span><span class="p">(</span><span class="s">&#39;ESRI.ArcGIS.Carto&#39;</span><span class="p">)</span>
<span class="kn">from</span> <span class="nn">ESRI.ArcGIS</span> <span class="kn">import</span> <span class="n">esriSystem</span>
<span class="kn">from</span> <span class="nn">ESRI.ArcGIS</span> <span class="kn">import</span> <span class="n">Carto</span>
</pre></div>


<p>Now there is the issue of grabbing an ESRI license. A little verbose IMO but it could easily be encapsulated in a helper function to clean things up. </p>
<div class="highlight"><pre>aoc = esriSystem.AoInitializeClass()
res = esriSystem.IAoInitialize.IsProductCodeAvailable(aoc, 
         esriSystem.esriLicenseProductCode.esriLicenseProductCodeArcView)
if res == esriSystem.esriLicenseStatus.esriLicenseAvailable:
    esriSystem.IAoInitialize.Initialize(aoc, 
      esriSystem.esriLicenseProductCode.esriLicenseProductCodeArcView)
</pre></div>


<p>Now that we've satisfied the demands of our proprietary license overlords, we can proceed with the real work .. in this case I just want to open an existing Layer file and see if the resulting object knows it's own file path. Really simple, right?</p>
<div class="highlight"><pre>lyr = Carto.LayerFileClass()
if &quot;Open&quot; in dir(lyr): print &quot;The Layer object has an Open method but....&quot;
lyr.Open(&#39;C:\\test.lyr&#39;)
print lyr.Filename



The Layer object has an Open method but....
Traceback (most recent call last):
 File &quot;<span class="nt">&lt;stdin&gt;</span>&quot;, line 1, in <span class="nt">&lt;module&gt;</span>
AttributeError: &#39;GenericComObject&#39; object has no attribute &#39;Open&#39;<span class="nt">&lt;/module&gt;&lt;/stdin&gt;</span>
</pre></div>


<p>Hrm. Looks like we've run across <a href="http://www.codeplex.com/IronPython/WorkItem/View.aspx?WorkItemId=1506">bug 1506</a> which doesn't allow access to the properties and methods of a given instance - instead your have to work through the functions provided by the implementation. Grr...</p>
<div class="highlight"><pre>Carto.ILayerFile.Open(lyr, &#39;C:\\test.lyr&#39;)
print Carto.ILayerFile.Filename.GetValue(lyr)
</pre></div>


<p>That is unwieldy, ugly and <a href="http://shalabh.infogami.com/Be_Pythonic2">unpythonic</a>. What's the point of object oriented programming if you can't access the methods and properties of an object directly? Since all ArcObjects applications are based on extending COM interfaces, this would be a major pain in any non-trivial application. Basically, until these .NET-accessible COM objects can be treated in a pythonic way,  I don't see any compelling reason to pursue IronPython and ArcGIS integration. Looks like its back to C# for the moment ... (/me take a deep sigh and opens Visual Studio)  ... unless of course anyone has some brilliant solution to share!!</p>";}i:28;a:6:{s:5:"title";s:24:"The GPS told me to do it";s:4:"link";s:49:"http://perrygeo.com/the-gps-told-me-to-do-it.html";s:7:"updated";s:25:"2009-06-12T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:57:"tag:perrygeo.com,2009-06-12:the-gps-told-me-to-do-it.html";s:7:"summary";s:899:"<p>Another disastrous consequence of inaccurate spatial information... Not only can you accidentally <a href="http://www.perrygeo.net/wordpress/?p=75">tag your neighbor as a criminal</a>, now it appears that sloppy spatial data has lead to <a href="http://www.wsbtv.com/news/19715994/detail.html">the wrong house getting demolished</a>.  </p>
<p>I've asked it before but its worth repeating ... with all the recent advances in spatial data publishing, where are the advances in metadata and data quality assurance? How do you know where the data comes from, what's been done to it and by whom? What is the intended use of the data? For the vast majority of the data being shoved out onto the web, these bits of metadata are sorely lacking.</p>
<p>Of course this case is more a matter of one person's sheer stupidity; I'm not sure any caveats in the metadata would have stopped the wrecking ball!</p>";}i:29;a:6:{s:5:"title";s:16:"The magic bullet";s:4:"link";s:41:"http://perrygeo.com/the-magic-bullet.html";s:7:"updated";s:25:"2009-03-25T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:49:"tag:perrygeo.com,2009-03-25:the-magic-bullet.html";s:7:"summary";s:791:"<p>Dealing with corrupted shapefiles can be a painful experience: programs crash for seemingly no reason, attribute tables get screwy, features get lost, queries results don't look right and ArcGIS processing tools fail with mysterious error codes:</p>
<p><img alt="Dissolve error" src="/assets/img/uploads/2009/03/dissolve_error.jpg" /></p>
<p>Never fear, OGR is here. The magic bullet for fixing corrupted shapefiles is, 90% of the time, accomplished by using ogr2ogr to convert the shapefile to another shapefile. </p>
<div class="highlight"><pre>ogr2ogr -f &quot;ESRI Shapefile&quot;  shiny_new_clean_dataset.shp corrupted_dataset.shp corrupted_dataset
</pre></div>


<p>OGR's internal data model cleans it up and the output is a fresh shiny new shapefile that works without hassle. </p>";}i:30;a:6:{s:5:"title";s:27:"TV cycling coverage is dead";s:4:"link";s:52:"http://perrygeo.com/tv-cycling-coverage-is-dead.html";s:7:"updated";s:25:"2009-02-19T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:60:"tag:perrygeo.com,2009-02-19:tv-cycling-coverage-is-dead.html";s:7:"summary";s:1180:"<p>Real-time spatial application developers take note...</p>
<p>I've been following the Tour of California this week (looking forward to the Solvang Time Trial this Friday) and have been disappointed with the TV coverage on Versus. Its not that the coverage is bad, its just that long-distance endurance sports don't lend themselves to the traditional 2 announcers and 1 camera format. There are multiple groups of riders and so much spatial information to keep track of if one really wants to understand the dynamics of a cycling event.</p>
<p>Maybe I've just been spoiled by the <a href="http://tracker.amgentourofcalifornia.com/">Amgen Tour Tracker</a>. It is a crowning example of a spatially-aware real-time web application.</p>
<p><a href="/assets/img/tour_tracker.png"><img alt="" src="/assets/img/tour_tracker_thumb.jpg" /></a></p>
<p>It provides two cameras of live coverage, live commentary with interviews, chat, summary updates, gps tracking of riders shown on both an elevation profile and a yahoo-based aerial map, "gps+" location prediction, race standings, time checks, etc. Far more information than any TV coverage without resorting to information overload. </p>";}i:31;a:6:{s:5:"title";s:14:"Stimulus watch";s:4:"link";s:39:"http://perrygeo.com/stimulus-watch.html";s:7:"updated";s:25:"2009-02-12T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:47:"tag:perrygeo.com,2009-02-12:stimulus-watch.html";s:7:"summary";s:1620:"<p>Last time I posted on this blog, Hillary and Obama were still battling it out for the Democratic nomination. Now Barack Obama is our president with an uphill battle to save the economy. So yeah, it's been a while. I haven't been doing too much innovative Geo-related stuff lately, hence the lack of blog posts. I'll try to pick up the pace a bit, even if I have to resort to fluff pieces like this one...</p>
<p>Well, it looks like the economic stimulus bill is going to pass. The bill doesn’t actually specify the projects that will be funded; the money will be allocated to cities and some federal grant agencies. The mayors have already proposed thousands of “shovel-ready” projects that might get a green light depending on how much funding the city gets.</p>
<p>There’s a great site, <a href="http://www.stimuluswatch.org">stimuluswatch.org</a>, that allows the public to review these proposals. Good to know where our tax dollars are headed!</p>
<p>There are several <a href="http://www.stimuluswatch.org/project/search/GIS">GIS proposals</a> ranging from projects with specific, well-defined (and measurable) objectives to the nebulous "Give us $500,000 to upgrade our cities' GIS program".  It will be interesting to see which ones pan out, which ones produce results and which ones are just a pure waste of taxpayer dollars. </p>
<p>P.S. If you'd like to see where most of my time and energy is going these days, it's training for the US National Cup mountain bike race series. My <a href="http://viedevelo.wordpress.com/">cycling exploits are available for all</a> who are inclined to read them.</p>";}i:32;a:6:{s:5:"title";s:18:"R is for Radiohead";s:4:"link";s:43:"http://perrygeo.com/r-is-for-radiohead.html";s:7:"updated";s:25:"2008-07-15T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:51:"tag:perrygeo.com,2008-07-15:r-is-for-radiohead.html";s:7:"summary";s:2559:"<p>Radiohead realeased their video for <a href="http://code.google.com/creative/radiohead/">House of Cards</a> yesterday. Besides being a big radiohead fan, I was also loving the <a href="http://www.velodyne.com/lidar/">LIDAR </a><a href="http://www.geometricinformatics.com/">technology </a>behind the video. </p>
<p>If you want to check it out yourself, there are code samples on the site as well as access to the raw data. The csv files have four columns (x, y, z, and intensity). For me the quickest way to visualize the data was through R and it's OpenGL interface called rgl (which is a wonderful high-level 3D data visualization environment). </p>
<p>Assuming you have R installed, rgl is a simple add on through the CRAN repositories:</p>
<div class="highlight"><pre>install.packages(&quot;rgl&quot;)
</pre></div>


<p>Then you need to load the library, load the csv, scale the intensity values from 0 to 1. Then it's a simple rgl.points command to get an interactive 3D rendering:</p>
<div class="highlight"><pre><span class="kn">library</span><span class="p">(</span>rgl<span class="p">)</span>
d <span class="o">&lt;</span> <span class="o">-</span> read.csv<span class="p">(</span><span class="s">&quot;C:/temp/radiohead/22.csv&quot;</span><span class="p">,</span> header<span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span>

<span class="c1"># scale intensity values from 0 to 1</span>
d<span class="o">$</span>int <span class="o">&lt;-</span> d<span class="p">[,</span><span class="m">4</span><span class="p">]</span> <span class="o">/</span> <span class="m">255</span>

<span class="c1"># rgl.points(x,y,z,size=__,color=__)</span>
<span class="c1"># note y value is inverted</span>
<span class="c1"># color is a grayscale rgb based on intensity</span>
rgl.points<span class="p">(</span>d<span class="p">[,</span><span class="m">1</span><span class="p">],</span>d<span class="p">[,</span><span class="m">2</span><span class="p">]</span><span class="o">*</span><span class="m">-1</span><span class="p">,</span>d<span class="p">[,</span><span class="m">3</span><span class="p">],</span> size<span class="o">=</span><span class="m">3</span><span class="p">,</span> color<span class="o">=</span>rgb<span class="p">(</span>d<span class="o">$</span>int<span class="p">,</span>d<span class="o">$</span>int<span class="p">,</span>d<span class="o">$</span>int<span class="p">))</span>
</pre></div>


<p>That's all it takes to render Thom Yorke in all his 3D digital glory:</p>
<p><img alt="" src="/assets/img/radiohead2.jpg" /></p>";}i:33;a:6:{s:5:"title";s:33:"Geospatial Reddit - 2 weeks later";s:4:"link";s:56:"http://perrygeo.com/geospatial-reddit-2-weeks-later.html";s:7:"updated";s:25:"2008-06-12T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:64:"tag:perrygeo.com,2008-06-12:geospatial-reddit-2-weeks-later.html";s:7:"summary";s:640:"<p>So, despite frustrations with getting submitted URLs to appear, <a href="http://www.reddit.com/r/geospatial/">Geospatial Reddit</a> is still puttering along. Not exactly a vibrant community <em>yet</em> but there are currently 133 subscribers. If you're subscribed, take a minute to submit your favorite URLs. If you haven't subscribed, <a href="http://www.reddit.com/r/geospatial/">check it out</a>.</p>
<p>I thought 133 subscribers was a decent number until I found that the <a href="http://www.reddit.com/r/bacon/">Bacon subreddit</a> has over 500. Apparently the world would rather discuss their greasy breakfast food than maps. </p>";}i:34;a:6:{s:5:"title";s:43:"Jabref - Open Source Alternative to EndNote";s:4:"link";s:66:"http://perrygeo.com/jabref-open-source-alternative-to-endnote.html";s:7:"updated";s:25:"2008-06-08T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:74:"tag:perrygeo.com,2008-06-08:jabref-open-source-alternative-to-endnote.html";s:7:"summary";s:867:"<p>For those of you that use EndNote to keep track of your bibliographies/references , there is an alternative. <a href="http://jabref.sourceforge.net">JabRef</a>. I find the <a href="http://jabref.sourceforge.net/images/Jabref-ScreenShot-MainWindow.png">UI</a> to be very intuitive and it has a range of customizable import/export formats. JabRef uses the <a href="http://en.wikipedia.org/wiki/BibTeX">BibTex</a> format as it's native file format so, of course, it integrates very well with <a href="http://en.wikipedia.org/wiki/LaTeX">LaTeX</a>.</p>
<p>One of the neat features is the ability to create custom bibliographies in HTML, complete with javascript-based search capabilities. Here's <a href="http://perrygeo.net/references.html">my reference list</a> which I'll be slowly adding to as I convert all my old text-based and EndNote reference lists over. </p>";}i:35;a:6:{s:5:"title";s:63:"Geospatial Reddit - A democratic solution to geo blog overload?";s:4:"link";s:85:"http://perrygeo.com/geospatial-reddit-a-democratic-solution-to-geo-blog-overload.html";s:7:"updated";s:25:"2008-05-28T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:93:"tag:perrygeo.com,2008-05-28:geospatial-reddit-a-democratic-solution-to-geo-blog-overload.html";s:7:"summary";s:1115:"<p>All the great GIS news/blog aggregators out there (planetgs, slashgeo, etc) are moderator driven - a few people act as the gatekeepers and inevitably <a href="http://www.spatiallyadjusted.com/2008/05/23/planet-geospatial-reboot-coming/">have to decide what information is useful</a>. This is <a href="http://zcologia.com/news/762/planet-geospatial/">not the ideal way</a> to do things. </p>
<p>There's a more democratic and distributed way to spread the role - it's called <em>reddit</em>. <img alt="" src="http://reallystatic.reddit.com/static/create-a-reddit.png" />  More specifically, <a href="http://reddit.com/r/geospatial">Geospatial Reddit</a>. For those unfamiliar with reddit (or similar sites like digg), the idea is simple: users submit stories and users vote on stories. The most popular ones rise to the top and, theoretically, the best articles magically appear on the front page. Much like democracy itself, there are flaws in the theory but its the best thing we've got.</p>
<p>Geospatial Reddit is public so sign up, submit your favorite stories and vote. Lets see if we can make this work.</p>";}i:36;a:6:{s:5:"title";s:28:"Posting to Geospatial Reddit";s:4:"link";s:53:"http://perrygeo.com/posting-to-geospatial-reddit.html";s:7:"updated";s:25:"2008-05-28T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:61:"tag:perrygeo.com,2008-05-28:posting-to-geospatial-reddit.html";s:7:"summary";s:599:"<p>Some folks have had trouble submitting links so I figured I should post a bit more detail on that. To get articles to show up on the <em>geospatial</em> reddit (not the main reddit), go to <a href="http://reddit.com/r/geospatial/submit">http://reddit.com/r/geospatial/submit</a> or click the "Submit a Link" button on the right - from the geospatial page. When you're submitting the url, you should see "submit to geospatial" as the page header. </p>
<p>I know at least 2 of us have been successful at posting. If this doesn't work for you, please let me know and I'll try and figure it out. </p>";}i:37;a:6:{s:5:"title";s:47:"So you want to learn to learn about kriging …";s:4:"link";s:68:"http://perrygeo.com/so-you-want-to-learn-to-learn-about-kriging.html";s:7:"updated";s:25:"2008-05-25T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:76:"tag:perrygeo.com,2008-05-25:so-you-want-to-learn-to-learn-about-kriging.html";s:7:"summary";s:2241:"<p>Guides like <a href="http://spatial-analyst.net/">Tomislav Hengl's</a> <a href="http://eusoils.jrc.it/ESDB_Archive/eusoils_docs/other/EUR22904en.pdf">Practical Guide to Geostatistical Mapping of Environmental Variables</a> and Rossiter's <a href="http://www.itc.nl/~rossiter/teach/stats/ssi_short.pdf">Introduction to applied geostatistics</a> do an excellent job of providing a grounded, relatively easy to understand, introduction to geostatical prediction and kriging.</p>
<p>But if you're an experience learner (like me) you don't absorb the mathematics fully without <em>doing</em> something with the knowledge; Seeing it in action brings the concepts to life. Unfortunately most geostats/kriging software is either too complex for exploratory learning (not enough immediate feedback) or too simplistic (making too many assumptions, disallowing access to the nitty-gritty details). Either way, you're bound to produce output with fundamental flaws because you're not aware of the finer details of variogram modelling. I speak from exerience!</p>
<p>Luckily Dennis J. J. Walvoort of the Wageningen University &amp; Research Center saw the same problem and created an nifty learning to to explore varigoram models and spatial predictions using ordinary kriging - <a href="http://www.ai-geostats.org/index.php?id=114">EZ-Kriging</a>. No degree in math or statistical theory required. Just drag the points around, play with the parameters and alter the underlying data as a table and see the results immediately.</p>
<p><a href="/assets/img/ezkriging.jpg"><img alt="" src="/assets/img/ezkriging_thumb.jpg" /></a></p>
<p>Its nothing more than a simulation so don't expect to load your own datasets or produce any meaningful output with it. But it truly excels as a learning tool to understand the core concepts behind kriging and is a great complement to Hengl and Rossiter's work. With that knowledge you can do the real deal in Surfer, R, ILWIS or your geostats software of choice.</p>
<p>EDIT: One complaint about this EZ-Kriging that I have: it doesn't show the observed sample variogram cloud overlayed on the variogram model. Oh well still a nice tool.</p>
<p>EDIT2: It's a windows .exe but it runs smoothly under wine in linux.</p>";}i:38;a:6:{s:5:"title";s:53:"Ubuntu as a GIS workstation (updated for Hardy Heron)";s:4:"link";s:76:"http://perrygeo.com/ubuntu-as-a-gis-workstation-updated-for-hardy-heron.html";s:7:"updated";s:25:"2008-05-14T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:84:"tag:perrygeo.com,2008-05-14:ubuntu-as-a-gis-workstation-updated-for-hardy-heron.html";s:7:"summary";s:1475:"<p>As a followup to my previous post on <a href="http://www.perrygeo.net/wordpress/?p=10">turning Ubuntu Gutsy into a GIS workstation</a>, Here are the revised instructions for Ubuntu 8.04 (The Hardy Heron). </p>
<p>Note that there are a few additonal apps and changes in here:</p>
<ul>
<li>
<p>Postgis</p>
</li>
<li>
<p>Mapnik</p>
</li>
<li>
<p>New version of QGIS installed via repository</p>
</li>
<li>
<p>OpenStreetMap tools (JOSM and osm2pgsql)</p>
</li>
<li>
<p>Geotiff utilities</p>
</li>
<li>
<p>Some nice python spatial libs (shapely, owslib, geopy and pyproj) </p>
</li>
</ul>
<p>Run the following as root on your new Hardy installation, answer a few configuration questions and you'll be ready to go.</p>
<div class="highlight"><pre>echo &#39;deb http://ppa.launchpad.net/qgis/ubuntu hardy main&#39; &gt;&gt; /etc/apt/sources.list

apt-get update

apt-get -y --force-yes install grass mapserver-bin \
gdal-bin cgi-mapserver python-qt4 python-sip4 python-gdal \
python-mapscript gmt gmt-coastline-data r-recommended gpsbabel \
shapelib qgis qgis-plugin-grass python-setuptools \
python-mapnik mapnik-plugins mapnik-utils osm2pgsql josm postgresql-8.3-postgis \
python-dev build-essential libgdal-dev geotiff-bin sun-java6-jre

easy_install shapely geopy owslib pyproj
</pre></div>


<p>EDIT: If you're looking for more up to date packages for geos, gdal, etc, try adding <code>deb http://les-ejk.cz/ubuntu/ hardy multiverse</code> to your /etc/apt/sources.list </p>";}i:39;a:6:{s:5:"title";s:26:"'Hike of Doom #2- OGC KML'";s:4:"link";s:47:"http://perrygeo.com/hike-of-doom-2-ogc-kml.html";s:7:"updated";s:25:"2008-04-21T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:55:"tag:perrygeo.com,2008-04-21:hike-of-doom-2-ogc-kml.html";s:7:"summary";s:5516:"<p>In commemoration of the <a href="http://www.opengeospatial.org/pressroom/pressreleases/857">OGC approval of KML</a> as an open standard to share geographic content over the web, I'd like to share our recent <a href="/assets/img/hikeofdoom2/hikeofdoom_20080413.kmz">"Hike of Doom #2"</a> (kml provided by Mark Dotson).</p>
<hr />
<p>The first weekend to hit 90 degrees, my friends and I travel inland to dive and swim in the Santa Ynez river. It is billed as a "30 minute" hike to our favorite watering hole. It becomes much more than that. </p>
<p>Of course the road leading up to the trailhead is closed due to construction so we have 3 miles of hiking on pavement just to get to the former trailhead- the Red Rocks parking lot. 
<img alt="" src="/assets/img/hikeofdoom2/IMGP5144.jpg" /> </p>
<p>Then the fun begins. A decent rainy season and some dam releases make for high flows and we've got half-dozen major river crossings to contend with. The recent fires added a good deal of organic matter to the river and the algae has bloomed accordingly. It is a wet, hot, rocky and slimy hike. </p>
<p><img alt="" src="/assets/img/hikeofdoom2/IMGP5178.jpg" /></p>
<p>We make it to the swimming hole and enjoy the day. We dive, laugh, have a few beers.</p>
<p><img alt="" src="/assets/img/hikeofdoom2/IMGP5199.jpg" />
<img alt="" src="/assets/img/hikeofdoom2/IMGP5206.jpg" /> </p>
<p>The sun sets and the fun _ really _ begins. </p>
<p>Klaus, the Bavarian cyclist whom we'd met at the swimming hole, met up with us just after my girlfriend, Joselyne, sprained her ankle on a rock. Her ankle hadn't started to swell yet but I could tell, drawing from my basketball injuries from the past, that she was not putting weight on it any time soon. We fashioned crutches from some driftwood. We met up with some turkey hunters (dressed in more camouflage more effective than most military uniforms) who helped us out by providing us some ankle wrap. 
<img alt="" src="/assets/img/hikeofdoom2/IMGP5254.jpg" /> </p>
<p>David and Andy began the trek back to the car to get help. The rest of us could either go back via the river bed , a rocky and treacherous endeavor given the setting sun, or head up to the main road and get some help. We decided on the main road and Shaun took off to alert the others to our plans. The main fire road was a trek in the _ opposite_ direction - longer, more elevation changes but smooth enough for a bike or truck and more accessible to vehicles. </p>
<p>I carried Jos, over my shoulder fireman-style and/or piggy-back, over the river crossings.
<img alt="" src="/assets/img/hikeofdoom2/IMGP5256.jpg" /> 
On the flats, Mark and I pushed Jos on Klaus' bike. 
<img alt="" src="/assets/img/hikeofdoom2/IMGP5261.jpg" /></p>
<p>We pushed on up the trail until we reached the main road. Klaus, after drinking the last of our beer, biked up to the dam keeper's residence at Gibraltar Dam while Christina, Sarah, Mark, Jos and I  continued up the trail. A half-hour later, Klaus and the dam keeper arrived in a pickup and drove the rest of us back to the Red Rock "parking lot". 
<img alt="" src="/assets/img/hikeofdoom2/IMGP5268.jpg" /> </p>
<p>But the construction and rebar on the causeway meant there was no way to cross with a normal vehicle so we went by foot. Jos got back on Klaus' bike and we pushed. 
<img alt="" src="/assets/img/hikeofdoom2/IMGP5274.jpg" /></p>
<p>Luckily the slight downhill grade allowed her to glide back for a good portion, graciously sparing Mark and I from permanent back injury.</p>
<p>Meanwhile the away team had gotten some semblance of cellular reception and attempted to call the authorities. The goal was to get a ranger truck to drive out to get us or at least unlock the gate to meet us half way at the Red Rock parking lot. The authorities response was fantastic if not a bit overzealous. By the time we had gotten within a 1/4 mile of our car, we spotted helicopters. Then a firetruck. Then an ambulance. Joselyne was coasting by on Klaus' bike and they didn't even stop for her on the first pass! Apparently expecting to rescue a mangled body from the wilderness, the EMTs were somewhat disappointed at the less challenging situation they faced - a girl, coasting down the road on a bike with a sprained ankle. 
<img alt="" src="/assets/img/hikeofdoom2/IMGP5279.jpg" /></p>
<p>We were back in the car, on the road before dark and got home in time for pizza.</p>
<p>So what did we learn from this? Well as a Boy Scout, I am ashamed to say I wasn't prepared. A well prepped emergency kit would have helped a lot. At least we had an LED headlamp. Some rope would have gone a long way towards making a stretcher. An instant-ice-pack, ankle wrap and some ibuprofen would have been handy. We were wet and the mercury was falling quickly; some emergency shelter and clothing would have assuaged my concerns about the nighttime chill.</p>
<p>But this was offset by the generosity of the many people we met for the first time - The hunters who lent us their medical supplies, the dam keeper who got up from his Sunday dinner to make sure we got back safely, the EMTs who put tremendous resources into organizing a military-scale search party, Klauss who so generously stuck with us and shared with us his bike, his wisdom and his company. Without their help and our group of friends, the story might have a less happy ending. </p>
<p>Never underestimate the power of human kindness, generosity and cooperation! And never believe me when I say it's a short hike.</p>";}i:40;a:6:{s:5:"title";s:27:"A quick Cython introduction";s:4:"link";s:52:"http://perrygeo.com/a-quick-cython-introduction.html";s:7:"updated";s:25:"2008-04-19T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:60:"tag:perrygeo.com,2008-04-19:a-quick-cython-introduction.html";s:7:"summary";s:21295:"<p>I love python for its beautiful code and practicality. But it's not going to win a <a href="http://shootout.alioth.debian.org/debian/benchmark.php?test=all&amp;lang=python&amp;lang2=gcc">pure speed race</a> with most languages. Most people think of speed and ease-of-use as polar opposites - probably because they remember the pain of writing C. <a href="http://www.cython.org/">Cython</a> tries to eliminate that duality and lets you have python syntax with C data types and functions - the best of both worlds. Keeping in mind that I'm by no means an expert at this, here are my notes based on my first real experiment with Cython:</p>
<p>EDIT: Based on some feedback I've received there seems to be some confusion - Cython is for generating <em>C extensions to Python</em> not standalone programs. The whole point is to speed up an existing python app one function at a time. No rewriting the whole application in C or Lisp. No <a href="http://www.dalkescientific.com/writings/NBN/c_extensions.html">writing C extensions by hand</a>. Just an easy way to get C speed and C data types into your slow python functions. </p>
<hr />
<p>So lets say we want to make this function faster. It is the <a href="http://mathworld.wolfram.com/GreatCircle.html">"great circle" calculation</a>, a quick spherical trig problem to calculate distance along the earth's surface between two points:</p>
<p><em>p1.py</em></p>
<div class="highlight"><pre><span class="kn">import</span> <span class="nn">math</span>

<span class="k">def</span> <span class="nf">great_circle</span><span class="p">(</span><span class="n">lon1</span><span class="p">,</span><span class="n">lat1</span><span class="p">,</span><span class="n">lon2</span><span class="p">,</span><span class="n">lat2</span><span class="p">):</span>
    <span class="n">radius</span> <span class="o">=</span> <span class="mi">3956</span> <span class="c">#miles</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span><span class="o">/</span><span class="mf">180.0</span>

    <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="mf">90.0</span><span class="o">-</span><span class="n">lat1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="mf">90.0</span><span class="o">-</span><span class="n">lat2</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="n">theta</span> <span class="o">=</span> <span class="p">(</span><span class="n">lon2</span><span class="o">-</span><span class="n">lon1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">acos</span><span class="p">((</span><span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">*</span><span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">b</span><span class="p">))</span> <span class="o">+</span>
                  <span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">*</span><span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="o">*</span><span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">theta</span><span class="p">)))</span>
    <span class="k">return</span> <span class="n">radius</span><span class="o">*</span><span class="n">c</span>
</pre></div>


<p>Lets try it out and <a href="http://www.diveintopython.org/performance_tuning/timeit.html">time it</a> over 1/2 million function calls:</p>
<div class="highlight"><pre><span class="kn">import</span> <span class="nn">timeit</span>

<span class="n">lon1</span><span class="p">,</span> <span class="n">lat1</span><span class="p">,</span> <span class="n">lon2</span><span class="p">,</span> <span class="n">lat2</span> <span class="o">=</span> <span class="o">-</span><span class="mf">72.345</span><span class="p">,</span> <span class="mf">34.323</span><span class="p">,</span> <span class="o">-</span><span class="mf">61.823</span><span class="p">,</span> <span class="mf">54.826</span>
<span class="n">num</span> <span class="o">=</span> <span class="mi">500000</span>

<span class="n">t</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">Timer</span><span class="p">(</span><span class="s">&quot;p1.great_circle(</span><span class="si">%f</span><span class="s">,</span><span class="si">%f</span><span class="s">,</span><span class="si">%f</span><span class="s">,</span><span class="si">%f</span><span class="s">)&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">lon1</span><span class="p">,</span><span class="n">lat1</span><span class="p">,</span><span class="n">lon2</span><span class="p">,</span><span class="n">lat2</span><span class="p">),</span> 
                       <span class="s">&quot;import p1&quot;</span><span class="p">)</span>
<span class="k">print</span> <span class="s">&quot;Pure python function&quot;</span><span class="p">,</span> <span class="n">t</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">num</span><span class="p">),</span> <span class="s">&quot;sec&quot;</span>
</pre></div>


<p>About <strong>2.2 seconds</strong>. Too slow! </p>
<p>Lets try a quick rewrite in Cython and see if that makes a difference:
<em>c1.pyx</em></p>
<div class="highlight"><pre><span class="kn">import</span> <span class="nn">math</span>

<span class="k">def</span> <span class="nf">great_circle</span><span class="p">(</span><span class="nb">float</span> <span class="n">lon1</span><span class="p">,</span><span class="nb">float</span> <span class="n">lat1</span><span class="p">,</span><span class="nb">float</span> <span class="n">lon2</span><span class="p">,</span><span class="nb">float</span> <span class="n">lat2</span><span class="p">):</span>
    <span class="n">cdef</span> <span class="nb">float</span> <span class="n">radius</span> <span class="o">=</span> <span class="mf">3956.0</span> 
    <span class="n">cdef</span> <span class="nb">float</span> <span class="n">pi</span> <span class="o">=</span> <span class="mf">3.14159265</span>
    <span class="n">cdef</span> <span class="nb">float</span> <span class="n">x</span> <span class="o">=</span> <span class="n">pi</span><span class="o">/</span><span class="mf">180.0</span>
    <span class="n">cdef</span> <span class="nb">float</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">theta</span><span class="p">,</span><span class="n">c</span>

    <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="mf">90.0</span><span class="o">-</span><span class="n">lat1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="mf">90.0</span><span class="o">-</span><span class="n">lat2</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="n">theta</span> <span class="o">=</span> <span class="p">(</span><span class="n">lon2</span><span class="o">-</span><span class="n">lon1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">acos</span><span class="p">((</span><span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">*</span><span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">b</span><span class="p">))</span> <span class="o">+</span> <span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">*</span><span class="n">math</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="o">*</span><span class="n">math</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">theta</span><span class="p">)))</span>
    <span class="k">return</span> <span class="n">radius</span><span class="o">*</span><span class="n">c</span>
</pre></div>


<p>Notice that we still <em>import math</em> - cython lets you mix and match python and C data types to some extent. The conversion is handled automatically though not without cost. In this example all we've done is define a <em>python</em> function, declare its input parameters to be floats, and declare a static C float data type for all the variables. It still uses the python math module to do the calcs. </p>
<p>Now we need to convert this to C code and compile the python extension. The best way to do this is through a <a href="http://ldots.org/pyrex-guide/2-compiling.html#distutils">setup.py distutils script</a>. But we'll do it the <a href="http://ldots.org/pyrex-guide/2-compiling.html#gcc">manual way</a> for now to see what's happening:</p>
<div class="highlight"><pre># this will create a c1.c file - the C source code to build a python extension
cython c1.pyx

# Compile the object file   
gcc -c -fPIC -I/usr/include/python2.5/ c1.c

# Link it into a shared library
gcc -shared c1.o -o c1.so
</pre></div>


<p>Now you should have a c1.so (or .dll) file which can be imported in python. Lets give it a run:</p>
<div class="highlight"><pre>    <span class="n">t</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">Timer</span><span class="p">(</span><span class="s">&quot;c1.great_circle(</span><span class="si">%f</span><span class="s">,</span><span class="si">%f</span><span class="s">,</span><span class="si">%f</span><span class="s">,</span><span class="si">%f</span><span class="s">)&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">lon1</span><span class="p">,</span><span class="n">lat1</span><span class="p">,</span><span class="n">lon2</span><span class="p">,</span><span class="n">lat2</span><span class="p">),</span> 
                     <span class="s">&quot;import c1&quot;</span><span class="p">)</span>
    <span class="k">print</span> <span class="s">&quot;Cython function (still using python math)&quot;</span><span class="p">,</span> <span class="n">t</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">num</span><span class="p">),</span> <span class="s">&quot;sec&quot;</span>
</pre></div>


<p>About <strong>1.8 seconds</strong>. Not the kind of speedup we were hoping for but its a start. The bottleneck must be in the usage of the python math module. Lets use the C standard library trig functions instead:</p>
<p><em>c2.pyx</em></p>
<div class="highlight"><pre>cdef extern from &quot;math.h&quot;:
    float cosf(float theta)
    float sinf(float theta)
    float acosf(float theta)

def great_circle(float lon1,float lat1,float lon2,float lat2):
    cdef float radius = 3956.0 
    cdef float pi = 3.14159265
    cdef float x = pi/180.0
    cdef float a,b,theta,c

    a = (90.0-lat1)*(x)
    b = (90.0-lat2)*(x)
    theta = (lon2-lon1)*(x)
    c = acosf((cosf(a)*cosf(b)) + (sinf(a)*sinf(b)*cosf(theta)))
    return radius*c
</pre></div>


<p>Instead of importing the math module, we use <em>cdef extern</em> which uses the C function declarations from the specified include header (in this case  math.h from the C standard library). We've replaced the calls to some of the expensive python functions and are ready to build the new shared library and re-test:</p>
<div class="highlight"><pre>    <span class="n">t</span> <span class="o">=</span> <span class="n">timeit</span><span class="o">.</span><span class="n">Timer</span><span class="p">(</span><span class="s">&quot;c2.great_circle(</span><span class="si">%f</span><span class="s">,</span><span class="si">%f</span><span class="s">,</span><span class="si">%f</span><span class="s">,</span><span class="si">%f</span><span class="s">)&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">lon1</span><span class="p">,</span><span class="n">lat1</span><span class="p">,</span><span class="n">lon2</span><span class="p">,</span><span class="n">lat2</span><span class="p">),</span> 
                     <span class="s">&quot;import c2&quot;</span><span class="p">)</span>
    <span class="k">print</span> <span class="s">&quot;Cython function (using trig function from math.h)&quot;</span><span class="p">,</span> <span class="n">t</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="n">num</span><span class="p">),</span> <span class="s">&quot;sec&quot;</span>
</pre></div>


<p>Now that's a bit more like it. <strong> 0.4 seconds </strong> - a 5x speed increase over the pure python function. What else can we do to speed things up? Well c2.great_circle() is still a python function which means that calling it incurs the overhead of the python API, constructing the argument tuple, etc. If we could write it as a pure C function, we might be able to speed things up a bit. </p>
<p><em>c3.pyx</em></p>
<div class="highlight"><pre>cdef extern from &quot;math.h&quot;:
    float cosf(float theta)
    float sinf(float theta)
    float acosf(float theta)

cdef float _great_circle(float lon1,float lat1,float lon2,float lat2):
    cdef float radius = 3956.0 
    cdef float pi = 3.14159265
    cdef float x = pi/180.0
    cdef float a,b,theta,c

    a = (90.0-lat1)*(x)
    b = (90.0-lat2)*(x)
    theta = (lon2-lon1)*(x)
    c = acosf((cosf(a)*cosf(b)) + (sinf(a)*sinf(b)*cosf(theta)))
    return radius*c

def great_circle(float lon1,float lat1,float lon2,float lat2,int num):
    cdef int i
    cdef float x
    for i from 0 &lt; = i &lt; num:
        x = _great_circle(lon1,lat1,lon2,lat2)
    return x
</pre></div>


<p>Notice that we still have a python function wrapper (<em>def</em>) which takes an extra argument, num. The looping is done inside this function with <code>for i from 0 &lt; = i &lt; num:</code> instead of the more pythonic but slower <code>for i in range(num):</code>. The actual work is done in a C function (<em>cdef</em>) which returns float type. This runs in <strong>0.2 seconds</strong> - a 10x speed boost over the original python function. </p>
<p>Just to confirm that we're doing things optimally, lets write a little app in pure C and time it:</p>
<div class="highlight"><pre><span class="cp">#include &lt;math .h&gt;</span>
<span class="cp">#include &lt;stdio .h&gt;</span>
<span class="cp">#define NUM 500000</span>

<span class="kt">float</span> <span class="nf">great_circle</span><span class="p">(</span><span class="kt">float</span> <span class="n">lon1</span><span class="p">,</span> <span class="kt">float</span> <span class="n">lat1</span><span class="p">,</span> <span class="kt">float</span> <span class="n">lon2</span><span class="p">,</span> <span class="kt">float</span> <span class="n">lat2</span><span class="p">){</span>
    <span class="kt">float</span> <span class="n">radius</span> <span class="o">=</span> <span class="mf">3956.0</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">pi</span> <span class="o">=</span> <span class="mf">3.14159265</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="n">pi</span><span class="o">/</span><span class="mf">180.0</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">theta</span><span class="p">,</span><span class="n">c</span><span class="p">;</span>

    <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="mf">90.0</span><span class="o">-</span><span class="n">lat1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
    <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="mf">90.0</span><span class="o">-</span><span class="n">lat2</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
    <span class="n">theta</span> <span class="o">=</span> <span class="p">(</span><span class="n">lon2</span><span class="o">-</span><span class="n">lon1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">acos</span><span class="p">((</span><span class="n">cos</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">*</span><span class="n">cos</span><span class="p">(</span><span class="n">b</span><span class="p">))</span> <span class="o">+</span> <span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">*</span><span class="n">sin</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="o">*</span><span class="n">cos</span><span class="p">(</span><span class="n">theta</span><span class="p">)));</span>
    <span class="k">return</span> <span class="n">radius</span><span class="o">*</span><span class="n">c</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">x</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="o">=</span> <span class="n">NUM</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> 
        <span class="n">x</span> <span class="o">=</span> <span class="n">great_circle</span><span class="p">(</span><span class="o">-</span><span class="mf">72.345</span><span class="p">,</span> <span class="mf">34.323</span><span class="p">,</span> <span class="o">-</span><span class="mf">61.823</span><span class="p">,</span> <span class="mf">54.826</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%f&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>


<p>Now compile it with <code>gcc -lm -o ctest ctest.c</code> and test it with <code>time ./ctest</code>... about <strong>0.2 seconds as well</strong>. This gives me confidence that my Cython extension is at least as efficient as my C code (which probably isn't saying much as my C skills are weak).</p>
<hr />
<p>Some cases will be more or less optimal for cython depending on how much looping, number-crunching and python-function-calling are slowing you down. In some cases people have reported 100 to 1000x speed boosts. For other tasks it might not be so helpful. Before going crazy rewriting your python code in Cython, keep this in mind:</p>
<blockquote>
<p>"We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil."  -- Donald Knuth</p>
</blockquote>
<p>In other words, write your program in python first and see if it works alright. Most of the time it will... some times it will bog down. Use a <a href="http://docs.python.org/lib/module-hotshot.html">profiler</a> to find the slow functions and re-implement them in cython and you should see a quick return on investment.</p>
<p>Links:
<a href="http://trac.gispython.org/projects/PCL/wiki/WorldMill">WorldMill</a> - a python module by Sean Gillies which uses Cython to provide a fast, clean python interface to the libgdal library for handling vector geospatial data.</p>
<p><a href="http://www.sagemath.org:9001/WritingFastPyrexCode">Writing Fast Pyrex code</a> (Pyrex is the predecessor of Cython with similar goals and syntax)</p>";}i:41;a:6:{s:5:"title";s:22:"Spatial data in SQLite";s:4:"link";s:47:"http://perrygeo.com/spatial-data-in-sqlite.html";s:7:"updated";s:25:"2008-04-15T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:55:"tag:perrygeo.com,2008-04-15:spatial-data-in-sqlite.html";s:7:"summary";s:2402:"<p>Slashgeo pointed me to a very interesting set of projects - <a href="http://www.gaia-gis.it/spatialite/">SpatiaLite and VirtualShape</a>. They provide a spatial data engine for the <a href="http://www.sqlite.org/index.html">sqlite</a> database. Think of it as the PostGIS of SQLite. It looks like this extends sqlite's spatial capabilities far beyond the <a href="http://www.gdal.org/ogr/drv_sqlite.html">sqlite OGR driver</a>.</p>
<p>SpatiaLite provides many of the basic OGC Simple Features functions - transforming geometries between projections, spatial operations of bounding boxes, and some basic functions to disect, analyze and export geometries. </p>
<p>VirtualShape provides the really neat ability to access a shapefile using the SpatiaLite/SQlite interface without having to import a copy - it reads directly off the shapefile by exposing the shapefile and its attributes as a "virtual table". I can think of a million uses for this. For example, lets say you have a shapefile of US counties and the number of voter in the 2004 election as an attribute in the dbf. You want to find the total voter count in each state:</p>
<div class="highlight"><pre><span class="nv">$ </span>ls -1 counties.*
counties.dbf
counties.prj
counties.shp
counties.shx
<span class="nv">$ </span>sqlite3 test.db
sqlite&gt; .load <span class="s1">&#39;SpatiaLite.so&#39;</span>
sqlite&gt; .load <span class="s1">&#39;VirtualShape.so&#39;</span>
sqlite&gt; CREATE virtual table virtual_counties using VirtualShape<span class="o">(</span>counties<span class="o">)</span><span class="p">;</span>
sqlite&gt; <span class="k">select</span> sum<span class="o">(</span>voters<span class="o">)</span> as total_voters, state_name 
            from virtual_counties 
            group by state_name 
            order by total_voters desc<span class="p">;</span>
9830550.0<span class="p">|</span>California
7563055.0<span class="p">|</span>Florida
7346779.0<span class="p">|</span>Texas
...
</pre></div>


<p>Now this is fairly straightforward non-spatial SQL but the ability to run it against a shapfile without having to export to an intermediate data format is a very valuable tool. </p>
<p>Links: 
<em> <a href="http://www.sqlite.org/whentouse.html">When to use SQlite.</a>
</em> A <a href="http://video.google.com/videoplay?docid=-5160435487953918649">video presentation</a> by Richard Hipp (the author of sqlite).</p>";}i:42;a:6:{s:5:"title";s:24:"Shell history - Why not?";s:4:"link";s:46:"http://perrygeo.com/shell-history-why-not.html";s:7:"updated";s:25:"2008-04-11T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:54:"tag:perrygeo.com,2008-04-11:shell-history-why-not.html";s:7:"summary";s:362:"<p>What an odd meme .. I don't know why but I expected some more interesting results. I guess the majority of the commands I use are pretty pedestrian.</p>
<div class="highlight"><pre>history|awk &#39;{a[$2]++ } END{for(i in a){print a[i] &quot; &quot; i}}&#39;|sort -rn|head
163 vi
48 screen
29 python
28 ls
17 cp
17 cd
9 sqlite3
6 rm
5 sudo
4 htop
</pre></div>";}i:43;a:6:{s:5:"title";s:26:"Working hard for some REST";s:4:"link";s:51:"http://perrygeo.com/working-hard-for-some-rest.html";s:7:"updated";s:25:"2008-04-02T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:59:"tag:perrygeo.com,2008-04-02:working-hard-for-some-rest.html";s:7:"summary";s:2047:"<p>I don't spend much time with web programming these days but I decided to give <a href="http://webpy.org/">web.py</a> (the minimalist python web framework) a shot and, while I was at it, try implementing a simple REST api.</p>
<p>First of all, web.py is truly everything it claims to be - small, light and easy to deploy behind <a href="http://www.lighttpd.net/">lighttpd</a>. It gives you a ton of flexibility to implement anything however you want - which is a plus or minus depending on how you look at it. I liked the inifinte flexibility but I can see alot of refactoring taking place and features needing to be implemented just to match the functionality built into a more structured framework like Django.</p>
<p>Back to the REST side of things. So I created a url-mapping to my "resources" or "nouns" and used the HTTP verbs (POST,GET,PUT,DELETE) to supply the interface. This was a joy to do in web.py which made it easy.</p>
<div class="highlight"><pre>urls = (&quot;/thing/(\d+)&quot;, &quot;thing&quot;)
...
class thing:
    def GET(self, thingid):
        # select query and render to template
        ....
    def POST(self, thingid):
        # insert query and redirect to /thing/thingid
        ....
    def DELETE(self, thingid):
        # delete query
        ....
    def PUT(self, thingid):
        # use cgi args to run update query on specified thing
        ....
</pre></div>


<p>The hard part came when I realized that HTML forms do not implement DELETE or PUT methods! 2 of the 4 cornerstone HTTP verbs are not implemented in HTML forms? </p>
<p>Surely this can be accomplished with a top-notch AJAX library. I tried Prototype.js and it appears that the PUT and DELETE methods are simply tunneled over POST with an extra arg attached and the server side has to handle it accordingly. So I ended up just using a straight XMLHttpRequest which works but has it's own problems.</p>
<p>How are you supposed to call PUT or DELETE through a web page? Is XMLHttpRequest the only way? What about browsers without javascript?</p>";}i:44;a:6:{s:5:"title";s:14:"Upcoming books";s:4:"link";s:39:"http://perrygeo.com/upcoming-books.html";s:7:"updated";s:25:"2008-03-12T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:47:"tag:perrygeo.com,2008-03-12:upcoming-books.html";s:7:"summary";s:543:"<p>There are two new books coming out this summer which fill a valuable niche in the open-source GIS bookshelf:</p>
<ul>
<li>
<p><a href="http://www.springer.com/statistics/statistical+theory+and+methods/book/978-0-387-78170-9">Applied Spatial Data Analysis with R</a></p>
</li>
<li>
<p><a href="http://www.pragprog.com/titles/gsdgis">Desktop GIS: Mapping the Planet with Open Source</a></p>
</li>
</ul>
<p>These are both written by some of the top developers within their respective topics and I'm really looking forward to reading them. </p>";}i:45;a:6:{s:5:"title";s:53:"Google Earth and the tilt sensor joystick on the X61s";s:4:"link";s:78:"http://perrygeo.com/google-earth-and-the-tilt-sensor-joystick-on-the-x61s.html";s:7:"updated";s:25:"2008-02-17T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:86:"tag:perrygeo.com,2008-02-17:google-earth-and-the-tilt-sensor-joystick-on-the-x61s.html";s:7:"summary";s:2405:"<p>The X61s is one bad-ass machine. Besides the great performance, battery life and solid engineering, there are other hidden gems. Like the tilt sensors that were designed to protect the hard drive in case of a drop can also be used to detect the laptops motion under more normal circumstances. </p>
<p>There are <a href="http://www-128.ibm.com/developerworks/linux/library/l-knockage.html">some</a> <a href="http://www.pberndt.com/Programme/Linux/pyhdaps/index.html#">interesting</a> <a href="http://blog.micampe.it/articles/2006/06/04/here-comes-the-smackpad">applications</a> that use some simple statistics to determine when the machine is "tapped" or julted to left or right. You can then assign actions to unique combinations of taps.</p>
<p>These applications all use the sysfs interface to the sensors (_ cat /sys/bus/platform/devices/hdaps/position _ will show your position in the x and y axis). But the sensors also provide a joystick interface that allow you to tilt the laptop along the two horizontal axes to control any number of applications. Including Google Earth.</p>
<ol>
<li>
<p>Install <a href="http://www.thinkwiki.org/wiki/Tp_smapi">tp_smapi</a></p>
</li>
<li>
<p>Test the sensors by running hdaps-gl , a simple OpenGL app showing the real-time tilt of your thinkpad.</p>
</li>
<li>
<p>Run jscal to calibrate the joystick. You'll need to install the "joystick" package for this. The command is:
<code>jscal -c /dev/input/js0</code>
After which you should keep your laptop level for a few seconds. Then, when prompted, tilt left, center, right, back (towards you), center, then forward.</p>
</li>
<li>
<p>Now fire up Google Earth. Open the Options menu, go to Navigation and select Enable Contoller. </p>
</li>
</ol>
<p><img alt="" src="/assets/img/GE_joystick.jpg" /></p>
<ol>
<li>You should now be able to zoom around by tilting the laptop.  The keyboard shortcuts really help when you're in this mode (Ctl-Up/Down to zoom, Shift-Up/Down to tilt, Shift-Left/Right to pivot). </li>
</ol>
<p>There's also a neat <a href="http://www.metafilter.com/52312/More-accellerometer-goodness">Perl-script technique to control a web-based google map</a> which has some cool potential for an openlayers based system. </p>
<p>Since most Apple laptops have a similar sensor, you should be able to get the same thing going on your Macbook.  Try it out..its alot more fun that using the mouse!</p>";}i:46;a:6:{s:5:"title";s:18:"The shiny new X61s";s:4:"link";s:43:"http://perrygeo.com/the-shiny-new-x61s.html";s:7:"updated";s:25:"2008-02-16T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:51:"tag:perrygeo.com,2008-02-16:the-shiny-new-x61s.html";s:7:"summary";s:4662:"<p>My HP laptop was nearing 5 years old. It had held up extremely well but most modern software taxed it to the absolute limits (just having firefox open with a flash ad in one tab was enough to send the system load through the roof). So I decided to try something new.</p>
<p>I was looking for something in the ultra-portable range. I tried out the OLPC and looked seriously at the Asus eeepc for a while. But they were far too difficult for me to type on. Ergonomics were extremely important and the only ultraportable that consistently rated high in that department was the IBM/Lenovo thinkpads. The X61s was appealing with its low voltage core2 duo and 2GB of RAM. All that in a small package about 3 lbs and about an inch thick.</p>
<p><img alt="" src="/assets/img/x61s.jpg" /></p>
<p>So the X61s arrived and I figured I'd give it a try with the "stock" software. It was my first experience with Vista and I gave it my best shot. After about 1/2 hour of excessive clicking, boggy performance and pop-up windows, I shrunk the ntfs partition and installed Ubuntu Hardy Heron Alpha 4.  </p>
<p>Sound, wireless with WPA, Compiz with 3D; the major things that normally plague a linux laptop install worked right out of the box. On the other hand, I'm running into a few bugs in nautilus (this is is alpha software after all), I can't get bluetooth working, suspending to ram works but is a little buggy (have to restart some services manually) and I had to edit a few config files and compile a kernel module to utilize all the bells and whistles provided by the hardware. But it is still more fun than using Vista.</p>
<p>One thing that really shines on this machine is the battery. I got the 8-cell extended life battery and used some powertop tweaks cut my power consumption and was able to get the wattage down in the 10 to 15 watt range depending on usage patterns. No wonder it is energy star compliant! With that kind of wattage and battery capacity, I'm easily getting about 6 to 7 full hours of battery life.</p>
<p>Some tips if you're setting up Linux on your X61s:</p>
<ul>
<li>
<p>First and foremost, read <a href="http://thinkwiki.org">thinkwiki</a>. There you'll find 95% of your answers. But to summarize my experience: </p>
</li>
<li>
<p>Upgrade your BIOS first (this is a good reason to keep your Vista partion around since Lenovo ships some handy update utils for windows). </p>
</li>
<li>
<p>Install the <a href="http://www.thinkwiki.org/wiki/Tp_smapi">tp_smapi kernel module</a> with HDAPS support. This will enable Linux to access the hard drive sensors for disk protection, motion sensing and the joystick interface</p>
</li>
<li>
<p>The big blue "Thinkvantage" button doesn't work out of the box. I'm not sure what it <em>should</em> do but its a nicely placed button so <a href="http://www.thinkwiki.org/wiki/How_to_get_special_keys_to_work#acpi_fakekey">don't let it go to waste</a>.</p>
</li>
<li>
<p>Tweak the power consumption. For the impatient, just install powertop and follow the instructions .. it will tell you what processes are waking your CPU and how to stop them. Also check out <a href="http://lesswatts.org">Less Watts</a> - a full resource for tweaking linux power consumption.</p>
</li>
<li>
<p>Configure your <a href="http://www.thinkwiki.org/wiki/How_to_configure_the_TrackPoint">trackpoint</a> pointer and buttons. This involves setting up you xorg.conf file to emulate a middle scroll wheel as well as tweaking the speed and sensitivity of the pointer. BTW - if you've never tried a pointer, give it a shot ... I've found it much more comfortable than a touchpad.</p>
</li>
<li>
<p><a href="http://samwel.tk/laptop_mode/">Laptop-mode</a> , a set of kernel and userspace tools to manage hard-drive power consumption, can be handy. It can also be <a href="https://bugs.launchpad.net/mandriva/+source/laptop-mode-tools/+bug/59695">deadly to your disk if configured incorrectly</a>. Basically it aggressively spins down the disk after short periods of inactivity to save power. Inevitably an application will try to hit the disk again and it will spin right back up. This leads to an unreasonably high amount of load cycles (100 per hour) and the drive can only handle a finite amount before failure (~600,000).  You can configure it for more sane behavior but do your research before you enable laptop-mode! And check out smartctl to monitor the disks health. </p>
</li>
<li>
<p>If, after you unsuspend the machine, your screen is way too dark, try Ctl-Alt-F1 followed by Ctl-Alt-F7. There are some other hacks involving acpi configuration or grub kernel options but none of them have worked for me yet.</p>
</li>
</ul>";}i:47;a:6:{s:5:"title";s:44:"Human Impacts on the Global Marine Ecosystem";s:4:"link";s:69:"http://perrygeo.com/human-impacts-on-the-global-marine-ecosystem.html";s:7:"updated";s:25:"2008-02-15T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:77:"tag:perrygeo.com,2008-02-15:human-impacts-on-the-global-marine-ecosystem.html";s:7:"summary";s:3476:"<p><a href="http://sciencenow.sciencemag.org/cgi/content/full/2008/214/2">We did it</a>!</p>
<p>As some of you may know in 2005 through 2006,  I was part of a research team[1] , led by Ben Halpern at NCEAS, developing a global model of human impacts on the marine ecosystem. We created or compiled 17 high-resolution global datasets of human-induced threats (land-based pollutants, fishing, shipping, climate change, etc.) and 20 ocean habitat datasets. These were combined to create an impact index which models the cumulative level of human-induced stress on our oceans. </p>
<p><a href="http://ebm.nceas.ucsb.edu/GlobalMarine/models/model/jpg/model_high_res.jpg"><img alt="" src="/assets/img/map_400.jpg" /></a></p>
<p>The results were published today in <a href="http://www.sciencemag.org/cgi/content/abstract/319/5865/948">Science</a> magazine and presented yesterday at the <a href="http://news.aaas.org/releases/2008_ann_mtg/scientists-track-human-footpri.html">AAAS Annual Meeting</a>. To summarize, we found that the entire ocean is affected and 40% is heavily impacted. It is not all bad news as there are many areas of relatively low impact which could provide examples for ecosystem restoration and opportunities for conservation. The global map is the first of its kind and will help clarify and quantify our cumulative impacts on the ocean and allow us to focus efforts geographically. The model is not perfect and can't really be used to make decisions at a very localized scale but, given the available globally-consistent, reasonably-high-resolution data for all the various ocean threats and habitats, this is the best effort to date. The model itself is relatively simple with a very clear methodology which will allow scientists to tweak the parameters and add better data as it becomes available. For those of you interested in the GIS modeling end, NCEAS has a <a href="http://www.nceas.ucsb.edu/GlobalMarine">great summary</a> of the data used in the model. Most of the data are available as raster data products or KML.</p>
<p>The media has picked up on the story with <a href="http://www.npr.org/templates/story/story.php?storyId=19059595">NPR</a>, <a href="http://www.msnbc.msn.com/id/23155918/">MSNBC</a>, <a href="http://www.washingtonpost.com/wp-dyn/content/article/2008/02/14/AR2008021401992.html?hpid=topnews">The Washington Post</a>, <a href="http://www.usatoday.com/tech/science/environment/2008-02-14-oceans-human-activity_N.htm">USA Today</a> and <a href="http://news.nationalgeographic.com/news/2008/02/080214-oceans.html">National Geographic</a> covering it (to name a few). I especially recommend the NPR site as it has a great animation and an audio segment. </p>
<p>So congratulations to everyone who made this happen! </p>
<p><em>[1] Benjamin S. Halpern, Shaun Walbridge, Kimberly A. Selkoe, Carrie V. Kappel, Fiorenza Micheli, Caterina D'Agrosa, John F. Bruno, Kenneth S. Casey, Colin Ebert, Helen E. Fox, Rod Fujita, Dennis Heinemann, Hunter S. Lenihan, Elizabeth M.P. Madin, Matthew T. Perry, Elizabeth R. Selig, Mark Spalding, Robert Steneck, Reg Watson (2008). A global map of human impact on marine ecosystems. Science, vol. 319</em></p>
<hr />
<p>EDIT:</p>
<p>Some additional articles:</p>
<ul>
<li>
<p><a href="http://www.nytimes.com/interactive/2008/02/25/science/earth/20080225_COAST_GRAPHIC.html">New York Times</a></p>
</li>
<li>
<p><a href="http://youtube.com/watch?v=0qh49Da5A5M">BBC Video</a> on YouTube </p>
</li>
</ul>";}i:48;a:6:{s:5:"title";s:36:"Why is the command line a dying art?";s:4:"link";s:60:"http://perrygeo.com/why-is-the-command-line-a-dying-art.html";s:7:"updated";s:25:"2008-02-02T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:68:"tag:perrygeo.com,2008-02-02:why-is-the-command-line-a-dying-art.html";s:7:"summary";s:5668:"<p>Sadly, a lot of GIS folks have never come into contact with a command line interface (CLI) . I've met even experienced computer users who, when faced with a command-line prompt, experience some autonomous nervous system lock up that causes their eyes to glaze over and prevents any knowledge from entering their brain from that moment forward. The all-Windows, all-GUI mentality of the current GIS market leaders just doesn't expose you to it (if you remember working with coverages at the ESRI Arc/Info command line, you official qualify as an "old-timer"). And the DOS command line is virtually invisible to XP and vista users. Linux users are more CLI aware but this is even becoming less important as distros such as ubuntu GUI-ify everything.</p>
<p>So why the fear of the command line? Why is it assumed to be more "complicated" than a graphical user interface (GUI)? I have found that, in some cases, the opposite is true ... there is something reassuringly simple about typing something and getting a response back. It feels like you are in direct control of the computer. Which, indeed, you <em>always</em> are. The computers always do exactly what you tell them, whether you are in a GUI or a CLI. But GUIs attempt to abstract away the details so that you <em>don't need to know</em> exactly what you're telling the computer to do. This nice fluffy feeling comes at the cost of many important factors. </p>
<h2>The benefits of the command line interface</h2>
<h3>Automation</h3>
<p>If you had, for instance, monitoring data coming in in a hourly basis and needed to process the data, would you want to be on call 24 hours a day to click a few buttons. Of course not. Write a command that performs the job and schedule it to execute at some regular interval. (I wonder if those guys on LOST ever thought to just set up a cron job to enter the numbers in the hatch?)  </p>
<h3>Repeatability</h3>
<p>Whenever I show someone a CLI-based method for solving their problem, they almost immediately say (or at least imply) that the typing is too much trouble.  Consider this command to convert a .tif image to ERDAS .img (HFA) format:</p>
<div class="highlight"><pre>cd /data/images
gdal_translate -of HFA aerial.tif aerial.tif.img
</pre></div>


<p>You might ask, "Why not just use a GUI, click a button or two, and get your output".  Sure. Now do that for 2,000 tif images. With a CLI you only have to type a few extra lines. </p>
<div class="highlight"><pre><span class="x">cd /data/images</span>
<span class="x">for i in *.tif; do </span>
<span class="x">  gdal_translate -of HFA </span><span class="p">$</span><span class="nv">i</span><span class="x"> </span><span class="p">$</span><span class="nv">i</span><span class="p">.</span><span class="nv">img</span><span class="x">;</span>
<span class="x">done</span>
</pre></div>


<h3>Documentability</h3>
<p>There is nothing more important to a GIS Analyst than documenting his/her work! We live by metadata and methods write-ups.   Now picture an intense 5 hour work session ... everything needed to get out by 2pm. You're done and now it's time to document your procedure and methods. With the CLI, you copy and paste your commands from the terminal or simply look at your command history which will show <em>exactly</em> what you did and how. You can store this in a text file and come back to it months later and be able to re-run the procedure. </p>
<p>With the GUI, you have to remember and describe every click, every sub-menu, every option, every action taken to arrive at the answer. Often this requires verbose description, screenshots, etc. None of which is recorded in any history file of course. And of course, when the client inevitably comes back the next day with modifications, none of it is repeatable in any automated fashion with a GUI. </p>
<h3>Accessibility</h3>
<p>It's just plain text with a CLI. You can print it out and study it on the bus. You can email the whole process to co-workers. You can use a concurrent versioning system to keep track of changes to scripted procedures. You can transfer massive amounts of knowledge without having to sit down and go through everything step-by-step, click-by-click in a visual interface. </p>
<h3>Accuracy</h3>
<p>Far too often, GUI designers make over-reaching assumptions about how things should work. The idea is often that the user should not need to know anything more than the absolute minumum.  To use a car analogy, the driver turns the key, presses the pedal and steers but does not need to know what goes on under the hood.  This works most of the time. But the <a href="http://en.wikipedia.org/wiki/Leaky_abstraction">law of leaky abstractions</a> usually takes hold and something inevitably breaks or performs differently than expected.  Since the CLI does not hold your hand (it executes the exact command you give it) it more accurately mimics the actual physical interaction with the computer and is much more useful in debugging and investigating complex problems. </p>
<p>So basically, don't make the mistake of thinking that a pretty window will always contain the magic button to get the job done. In many cases, a command line is much more efficient, even essential. If you don't know how to effectively work in a command-line environment, do yourself a huge favor and learn.</p>
<p>Oh and I'd be remiss if I didn't mention <a href="http://www.amazon.com/Beginning-was-Command-Line-Neal-Stephenson/dp/0380815931">Neal Stephenson's book </a> on the subject ... a bit technically outdated but a great quick read on why command lines are still very relevant in the face of increasingly sophisticated graphical interfaces.</p>";}i:49;a:6:{s:5:"title";s:41:"Impervious surface deliniation with GRASS";s:4:"link";s:66:"http://perrygeo.com/impervious-surface-deliniation-with-grass.html";s:7:"updated";s:25:"2008-01-26T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:74:"tag:perrygeo.com,2008-01-26:impervious-surface-deliniation-with-grass.html";s:7:"summary";s:4649:"<p>Watersheds with lots of roads, buildings, parking lots, rock surfaces, compacted dirt, etc tend to prevent inflitration and cause rapid runoff in response to rainfall. This poses a <a href="http://chesapeake.towson.edu/landscape/impervious/what_imp.asp">number of challenges for managing stormwater</a> and water quality. Not surprisingly, the percentage of hydrologically impervious surface in a given watershed is an important factor in many hydrologic models. Using standard aerial photography and GRASS, it's a relatively simple process to create an impervious surface map using supervised classification.</p>
<p>First find an aerial photo. I grabbed a NAIP image from <a href="http://new.casil.ucdavis.edu/casil/remote_sensing/naip_2005/county_mosaics/">CASIL</a> but you might want to try <a href="http://crschmidt.net/blog/archives/285/producing-a-large-image-from-openaerialmap/">using OpenAerialMap</a>. The red, green and blue visible bands are usually sufficient for differentiating between impervious and pervious land use types... For distinguishing different types of vegetation you might want to use a multispectral imagery source with non-visible bands (ie near infrared) but this is usually lower resolution (eg. 30 meter pixels of Landsat) or much more expensive.</p>
<p>Next we jump into GRASS and import our image into a new location:</p>
<div class="highlight"><pre>r.in.gdal -e input=naip.img output=naip location=impervious
</pre></div>


<p>Exit and log back into your new location. If you look at the imported rasters, you'll see three rasters, not one. Each band (R, G and B) gets imported separately.</p>
<div class="highlight"><pre>GRASS 6.3.cvs (impervious):~/&gt;  g.list rast
raster files available in mapset permanent:
naip.1 naip.2 naip.3
</pre></div>


<p>We need to indicate that these rasters form a logical group</p>
<div class="highlight"><pre>i.group group=naip2 subgroup=naip2 input=naip.3@PERMANENT,naip.2@PERMANENT,naip.1@PERMANENT
i.target -c group=naip2
</pre></div>


<p>At any time you can list the rasters in a given group/subgroup to confirm.</p>
<div class="highlight"><pre>i.group -l -g group=naip2 subgroup=naip2
</pre></div>


<p>Now the real heart of the process. We need to define "training areas" which are polygons around representative land use types. I used QGIS to load the aerial photo and create a new polygon layer with an integer attribute field called vegnum. I digitized a few rocks, paved areas, rooftops and dirt roads to represent the impervious areas to which I assigned vegnum=1. Then I selected some grasslands, forests, lakes and chaparral  and assigned 2 as the vegnum. The next step is to load the polygon data into GRASS and rasterize it (<em>in retrospect it would have just been easier to create the grass vector layer from scratch in QGIS to avoid the import step</em>). Note that the vegnum field is specified as the raster value column.</p>
<div class="highlight"><pre>v.in.ogr -o dsn=./training/train1_utm/train1_utm.shp output=train1 layer=train1_utm min_area=0.0001 type=boundary snap=-1
v.to.rast input=train1 output=train1 use=attr column=vegnum type=point,line,area layer=1 value=1 rows=4096
</pre></div>


<p>Next we use i.gensig to generate a spectral signature (the statistical profile; mean and covariance matrix of the input pixels) for the training areas.  </p>
<div class="highlight"><pre>i.gensig trainingmap=train1 group=naip2 subgroup=naip2 signaturefile=naip2_train1.sig
</pre></div>


<p>Now that we have a signature of impervious vs. non-impervious surfaces, we can use the maximum likelihood method to classify each pixel into the highest probability category.</p>
<div class="highlight"><pre>i.maxlik group=naip2 subgroup=naip2 sigfile=naip2_train1.sig class=imperv
</pre></div>


<p>You might notice a slight speckled, noisy appearance due to things like shadows, reflections or imperfect training areas. Usually these small 1-pixel deviations are not interesting enough to keep so we can smooth out the image taking the mode (most comon) cell in a 3x3 window.</p>
<div class="highlight"><pre>r.neighbors input=imperv output=imperv_mode method=mode size=3
</pre></div>


<p>And here are the results... calculating imperviousness will most likely be an iterative process so be prepared to evaluate the output, tweak the training areas and rerun the process a few times. Once you're happy with the results, you can use zonal statistics with a tool like starspan to find the percent imperviousness of your watersheds or other regions.</p>
<p><img alt="" src="/assets/img/aerial.jpg" /></p>
<p><img alt="" src="/assets/img/imperv_smooth.png" /></p>";}i:50;a:6:{s:5:"title";s:23:"A GUI for GDAL and GMT'";s:4:"link";s:47:"http://perrygeo.com/a-gui-for-gdal-and-gmt.html";s:7:"updated";s:25:"2008-01-06T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:55:"tag:perrygeo.com,2008-01-06:a-gui-for-gdal-and-gmt.html";s:7:"summary";s:1163:"<p>In the why-haven't-I-ever-heard-of-this department:</p>
<blockquote>
<p><a href="http://w3.ualg.pt/%7Ejluis/mirone/manual.htm">Mirone</a> is a Windows MATLAB-based framework tool that allows the display and manipulation of a large number of grid formats through its interface with the GDAL library. Its main purpose is to provide users with an easy-to-use graphical interface to the more commonly used programs of the GMT package. </p>
</blockquote>
<p>There is also a version that does not depend on MATLAB which is what I decided to try.  This is a great package; easy to install, very usable, lots of high-end raster functionality, and a good sense of humor...</p>
<p><img alt="" src="/assets/img/mirone.png" /></p>
<p>Considering GMT and GDAL can be a bit challenging and unfamiliar for a typical windows user, Mirone is a huge step forward. </p>
<p>Among some of the functionality that is an absolute pleasure to work with compared to some other software packages: surface profiles, image-flipping, DEM derivatives,  color-ramping, contouring, histograms, kernel filtering... And that's just scratching the surface. I highly recommend checking it out.</p>";}i:51;a:6:{s:5:"title";s:44:"More on Google Charts and a python interface";s:4:"link";s:69:"http://perrygeo.com/more-on-google-charts-and-a-python-interface.html";s:7:"updated";s:25:"2007-12-19T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:77:"tag:perrygeo.com,2007-12-19:more-on-google-charts-and-a-python-interface.html";s:7:"summary";s:2490:"<p>Well it's been almost a full two weeks since <a href="http://code.google.com/apis/chart/">google charts API</a> came out.  A really nice service but it's only going to be useful with a high-level programming API. Enter <a href="http://pygooglechart.slowchop.com/">PyGoogleChart</a> .. a python interface to generate google chart urls. </p>
<p>Taking one of my <a href="http://www.perrygeo.net/wordpress/?p=64">previous example datasets</a>, here's the 10-second howto:</p>
<div class="highlight"><pre><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">pygooglechart</span> <span class="kn">import</span> <span class="n">SimpleLineChart</span>
<span class="n">chart</span> <span class="o">=</span> <span class="n">SimpleLineChart</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span><span class="mi">200</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="mf">32.5</span><span class="p">,</span><span class="mf">35.2</span><span class="p">,</span><span class="mf">39.9</span><span class="p">,</span><span class="mf">40.8</span><span class="p">,</span><span class="mf">43.9</span><span class="p">,</span><span class="mf">48.2</span><span class="p">,</span><span class="mf">50.5</span><span class="p">,</span><span class="mf">51.9</span><span class="p">,</span><span class="mf">53.1</span><span class="p">,</span><span class="mf">55.9</span><span class="p">,</span><span class="mf">60.7</span><span class="p">,</span><span class="mf">64.4</span><span class="p">]</span>
<span class="n">chart</span><span class="o">.</span><span class="n">add_data</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">url</span> <span class="o">=</span> <span class="n">chart</span><span class="o">.</span><span class="n">get_url</span><span class="p">()</span>
<span class="k">print</span> <span class="n">url</span>
<span class="o">&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</pre></div>


<p>which gives us:</p>
<blockquote>
<p>http://chart.apis.google.com/chart?cht=lc&chs;=400x200&chd;=t:32.5,35.2,39.9,40.8,43.9,48.2,50.5,51.9,53.1,55.9,60.7,64.4</p>
</blockquote>
<p>and our chart image:</p>
<p><img alt="" src="http://chart.apis.google.com/chart?cht=lc&amp;chs=400x200&amp;chd=t:32.5,35.2,39.9,40.8,43.9,48.2,50.5,51.9,53.1,55.9,60.7,64.4" /></p>";}i:52;a:6:{s:5:"title";s:22:"Geologist vs. Engineer";s:4:"link";s:46:"http://perrygeo.com/geologist-vs-engineer.html";s:7:"updated";s:25:"2007-12-12T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:54:"tag:perrygeo.com,2007-12-12:geologist-vs-engineer.html";s:7:"summary";s:1014:"<p><a href="http://uncyclopedia.org/wiki/Main_Page">Uncylopedia</a>, the self-proclaimed encyclopedia "full of misinformation and utter lies", has a hillarious <a href="http://uncyclopedia.org/wiki/Geologist">article about Geologists</a>. I especially like the "<a href="http://uncyclopedia.org/wiki/Geologist#The_Great_Geologist-Engineer_Controversy">Geologist-Engineer Controversy</a>" which, having worked with both geologists and engineers extensively, is a pretty accurate portrayal of their respective approaches.</p>
<blockquote>
<p>Geology, being an art as much as a science, has always baffled and worried engineers, hence the engineers' defensive weapons of pocket protectors, slide rules, black socks, and eventually computers.</p>
</blockquote>
<p>A related joke:</p>
<blockquote>
<p>A geologist and engineer walk into a job interview. They are each asked a simple math question : 'What is 2 times 2?'.  The engineer replies, 'It's 4.00000'. The geologist replies, 'Ah.. it's about 4'</p>
</blockquote>";}i:53;a:6:{s:5:"title";s:46:"Quick way to publish a point shapefile to html";s:4:"link";s:71:"http://perrygeo.com/quick-way-to-publish-a-point-shapefile-to-html.html";s:7:"updated";s:25:"2007-12-10T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:79:"tag:perrygeo.com,2007-12-10:quick-way-to-publish-a-point-shapefile-to-html.html";s:7:"summary";s:2047:"<p>There are better ways to put data on the web but my latest little project wasn't about the <em>best</em> way but the quickest way to get some spatial data into the hands of those unfortunate souls who don't have GIS software. The goals were pretty simple:</p>
<ul>
<li>
<p>Take a single point shapefile (or other OGR readable vector data source)</p>
</li>
<li>
<p>Convert it into html/js that would use one of the web mapping APIs to display the points and all their attributes. </p>
</li>
<li>
<p>The output had to be a standalone, self-contained html file that could be emailed. No server side anything required.</p>
</li>
</ul>
<p>I came up with a quick python hack to do the job (<a href="http://perrygeo.googlecode.com/svn/trunk/gis-bin/shp2Mapstraction.py">source code</a>). <a href="http://www.mapstraction.com/">Mapstraction</a>, with it's goal of providing a common javascript API for a number of map providers, seemed like an obvious choice.  The python portion of the code reads the shapefile using OGR (you will need the python-gdal bindings, see FWTools) and constructs the html/js. All the javascript is sourced to external URLs so there is no software dependency except for a working network connection. </p>
<p>This allows for a single command:</p>
<blockquote>
<p>shp2Mapstraction.py bearboxes.shp bearboxes.html Yahoo</p>
</blockquote>
<p><img alt="" src="/assets/img/bearboxes.jpg" /></p>
<p>which produces <a href="/assets/img/bearboxes.html">an html file</a> providing a Yahoo maps interface to the data; in this case the point location of all the bear boxes (food storage lockers to keep your stuff separated from the bears) in the Sierra Nevada. </p>
<p>Currently it just supports Microsoft Virtual Earth and Yahoo. I had to bypass Google because their key system is restricted by URL. And the mapstraction-to-openlayers connection wasn't working too well though I haven't really investigated.</p>
<p>Anyways, it provides a quick and easy way to deliver spatial data to anyone with a browser and internet connection. </p>";}i:54;a:6:{s:5:"title";s:40:"Google Charts - their latest web service";s:4:"link";s:63:"http://perrygeo.com/google-charts-their-latest-web-service.html";s:7:"updated";s:25:"2007-12-06T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:71:"tag:perrygeo.com,2007-12-06:google-charts-their-latest-web-service.html";s:7:"summary";s:1842:"<p>Google Charts is a <a href="http://code.google.com/apis/chart/">web based API</a> for generating charts/graphs. It supports alot of the common types of graphics including line, pie, bar, scatter plots and Venn diagrams. I've relied on a bunch of other server-side graph generators (<a href="http://www.maptools.org/owtchart/index.phtml">owtchart</a>, <a href="http://www.aditus.nu/jpgraph/">jpgraph</a>, <a href="http://www.perrygeo.net/wordpress/?p=64">sparklines</a>, <a href="http://matplotlib.sourceforge.net/">matplotlib</a>, etc) but this looks like it might be a contender.</p>
<p>Still there is no higher-level programming API yet ... but give it a few days (interface with numpy anyone?). <a href="http://exilejedi.livejournal.com/189606.html">ExileJedi blog lists </a>some other potential disadvantages:</p>
<blockquote>
<div class="highlight"><pre>* You are limited to 50,000 queries per user per day, which may pose some scalability concerns if you plan to build something big on this.
* You have to be careful about the number of data points you submit in your request as you can quickly exceed the allowable URL length, and furthermore you might end up with illegibly smooshed-together data points due to the scale of your output.
* There&#39;s always the &quot;OMG Google will absorb all our data and become sentient, turn evil, and unleash an army of death robots on us all, run for your lives!&quot; paranoia, but that&#39;s really just silly talk.
</pre></div>


</blockquote>
<p>EDIT:  It appears this service only support GET requests. On one hand you're adding new data so you should be POSTing it, right? On the other hand, you're asking to GET a graphical representation of a set of numerical values. What would a "restful" version of a web graphing API look like? Maybe some of the REST gurus can clear that up.</p>";}i:55;a:6:{s:5:"title";s:27:"Take the larger view of GIS";s:4:"link";s:52:"http://perrygeo.com/take-the-larger-view-of-gis.html";s:7:"updated";s:25:"2007-12-05T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:60:"tag:perrygeo.com,2007-12-05:take-the-larger-view-of-gis.html";s:7:"summary";s:1670:"<p>It's interesting to see the passionate responses to <a href="http://apb.directionsmag.com/archives/3703-Neogeography-is-not-GIS;-not-LI.html">Joe Francia's article</a> claiming that neogeography is != GIS.  One one side there is a small group of folks bashing neogeography and claiming the superiority of "GIS". On the other side there is the attitude claiming that some "revolution" has occurred which has supplanted traditional geographic techniques. You'd think there was a cold war going on! Both memes are as wrong as they are arrogant. </p>
<p>I have always defined GIS as</p>
<blockquote>
<p>Geographic Information System:  The integration of hardware, software, procedures and people to manage the collection, creation, analysis, synthesis, sharing and visualization of spatial information.</p>
</blockquote>
<p>Neogeography easily fits that bill. So does Enterprise IT.  So does Desktop mapping. So does Geostatistics. Geodesy. Web Mapping. Remote Sensing. LBS mobile technologies.  Cartography. Surveying. Spatial Analysis and Modeling. Database management. Sensor webs. GPS...  These disciplines are all a small piece of the larger puzzle that is GIS (whether their staunch adherents will admit to it or not!). </p>
<p>The key word in this controversial acronym is <strong>S</strong>ystem. In order for any organization to implement a successful GIS, they must figure out a) which technologies will work for them and b) how to integrate them into a coherent whole.  All of these aspects of GIS have something to offer so it's important not to get stuck in a rut with blinders on.  This goes for all "sides" of this ridiculous "neogeo vs GIS" argument. </p>";}i:56;a:6:{s:5:"title";s:37:"For the cartographers in the house…";s:4:"link";s:59:"http://perrygeo.com/for-the-cartographers-in-the-house.html";s:7:"updated";s:25:"2007-12-04T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:67:"tag:perrygeo.com,2007-12-04:for-the-cartographers-in-the-house.html";s:7:"summary";s:133:"<p>Here's another one for the blogrolls:</p>
<p><a href="http://strangemaps.wordpress.com/">http://strangemaps.wordpress.com/</a></p>";}i:57;a:6:{s:5:"title";s:47:"Privacy, Location Technology and Bad Journalism";s:4:"link";s:71:"http://perrygeo.com/privacy-location-technology-and-bad-journalism.html";s:7:"updated";s:25:"2007-11-20T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:79:"tag:perrygeo.com,2007-11-20:privacy-location-technology-and-bad-journalism.html";s:7:"summary";s:2104:"<p>The Ventura Star has run an article about <a href="http://www.venturacountystar.com/news/2007/nov/18/where-are-you-in-life-if-you-dont-know-others-do/">privacy issues and modern geolocation technology</a>.</p>
<p>As important as this topic is, <a href="http://www.venturacountystar.com/staff/john-moore/contact/">John Moore</a> (the author) is clearly uninformed. This is a <em>horrible</em> piece of journalism. Moore mixes the potential negative effects of various technology such as RFID, cellular communication, sensor networks, nanotech, community data collection efforts, navigation systems, and GPS into one chilling, over-simplified and baseless viewpoint. Instead of reporting the details of <a href="http://www.geog.ucsb.edu/~good/">Michael Goodchild's</a> talk at Ventura College, he treated us to his own paranoid, incoherent vision of the future of technology. Moore's entire premise is based on the fact that: </p>
<blockquote>
<p>"GPS is a system that basically allows you to know where you are anywhere in the world within one meter"  </p>
</blockquote>
<p>That much is true. He uses this fact to extrapolate the conclusion that GPS allows some nefarious force to monitor your groceries, cell phone calls, and indeed your every movement.</p>
<p>GPS <em>recieves</em> satellite signals translates those signals into a location. It takes an entirely different technology to transmit these locations to some third party. I guarantee you that none of my gps tracks have gotten into anyones hands without my consent (come on John Moore, prove me otherwise). </p>
<p>The title speaks volumes to his ignorance: </p>
<blockquote>
<p>"Where are you in life? If you don't know, others using GPS devices do" </p>
</blockquote>
<p>Suggesting that other people with GPS can a) track my movements or b) be tracked by me , shows a complete lack of understanding of the technology. Sure there are privacy dangers. But those dangers must be presented clearly and concisely by someone with half a clue, not this paranoid bullshit journalism. This article would not even pass as a high school essay. </p>";}i:58;a:6:{s:5:"title";s:26:"Looking for LIDAR services";s:4:"link";s:51:"http://perrygeo.com/looking-for-lidar-services.html";s:7:"updated";s:25:"2007-11-12T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:59:"tag:perrygeo.com,2007-11-12:looking-for-lidar-services.html";s:7:"summary";s:696:"<p>I'm looking for a LIDAR specialist to fly some sensors around San Diego. Ideally we would need someone who could collect both LIDAR data and digital aerial photography (high-res but only visible spectrum), process the data (generate bare-earth DEMs and georeferenced aerials) and deliver it in a GIS-compatible format.   This is in response to the recent fires related to erosion control.. with rainy season coming we'd be on a tight schedule.</p>
<p>Does anyone have any suggestions of good companies who could provide this service? Please feel free to recommend your own services if you think it would be a good fit.</p>
<p>You can also contact me directly at perrygeo+lidar at gmail.com</p>";}i:59;a:6:{s:5:"title";s:22:"Poetics of Cartography";s:4:"link";s:47:"http://perrygeo.com/poetics-of-cartography.html";s:7:"updated";s:25:"2007-10-20T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:55:"tag:perrygeo.com,2007-10-20:poetics-of-cartography.html";s:7:"summary";s:1246:"<p>In case you missed the fantastic Chicago public radio program last night on <a href="http://www.thisamericanlife.org/Radio_Episode.aspx?episode=110">This American Life</a>,  the NPR-syndicated show did an entire program on "mapping". It goes well beyond the idea of simply mapping our physical infrastructure and really opens up the idea of mapping to the widest possible definition; using all our senses to create a multi-dimensional representation of our world. Within the vast experience of life, mapping is described as the abstract process of summarizing and synthesizing a singular slice of that experience.</p>
<p>The show is available<a href="http://www.thisamericanlife.org/Radio_Episode.aspx?episode=110"> as a stream</a> and is really worth a listen this weekend.</p>
<p>P.S. The title of this post comes directly from a quote by Denis Wood, the author of <a href="http://www.amazon.com/Power-Maps-Denis-Wood/dp/0898624932/ref=pd_bbs_2/104-8757092-7919961?ie=UTF8&amp;s=books&amp;qid=1192849090&amp;sr=8-2">The Power Of Maps</a> and geographer who is mapping some non-conventional aspects of his neighborhood in Raleigh, North Carolina. The first and arguably most interesting portion of the show from a geographer's standpoint.</p>";}i:60;a:6:{s:5:"title";s:37:"Turning Ubuntu into a GIS workstation";s:4:"link";s:62:"http://perrygeo.com/turning-ubuntu-into-a-gis-workstation.html";s:7:"updated";s:25:"2007-10-20T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:70:"tag:perrygeo.com,2007-10-20:turning-ubuntu-into-a-gis-workstation.html";s:7:"summary";s:3391:"<p>It just keeps getting easier and easier to get a fully functional open source GIS workstation up and running thanks to Ubuntu. The following instructions will take your vanilla installation of <a href="http://www.ubuntu.com/getubuntu">Ubuntu 7.10</a> and add the following top-notch desktop GIS applications:</p>
<ul>
<li>
<p>Postgresql/PostGIS : a relational database with vector spatial data handling </p>
</li>
<li>
<p>GRASS : A full blown GIS analysis toolset </p>
</li>
<li>
<p>Quantum GIS: A user-friendly graphical GIS application </p>
</li>
<li>
<p>GDAL, Proj, Geos : Libraries and utilities for processing spatial data </p>
</li>
<li>
<p>Mapserver : web mapping program and utilites</p>
</li>
<li>
<p>Python bindings for QGIS, mapserver and GDAL </p>
</li>
<li>
<p>GPSBabel : for converting between various GPS formats </p>
</li>
<li>
<p>R : a high-end statistics package with spatial capabilities </p>
</li>
<li>
<p>GMT : the Generic Mapping Tools for automated high-quality map output </p>
</li>
</ul>
<p>While this is not a comprehensive list of open source GIS software, these packages cover most of my needs. If you want to live on the bleeding edge and have to have the absolute latest versions, you'll be better off installing these from source. But for those of us that want a stable and highly functional GIS workstation with minimal fuss, this is the way to go:</p>
<ol>
<li>
<p>Go to _ System &gt; Administration &gt; Software Sources _ and make sure the universe and multiverse repositories are turned on. Close the window and the list of available software packages will be refreshed.</p>
</li>
<li>
<p>Open up a terminal (ie the command line) via _ Applications &gt; Accessories &gt; Terminal_ and type the following:</p>
</li>
</ol>
<blockquote>
<p>sudo apt-get -y install qgis grass qgis-plugin-grass mapserver-bin gdal-bin cgi-mapserver \
     python-qt4 python-sip4 python-gdal python-mapscript gmt gmt-coastline-data \
     r-recommended gpsbabel shapelib libgdal1-1.4.0-grass</p>
</blockquote>
<p>The <em>sudo</em> part indicates that the command will be run as the administrator user, _ apt-get -y install_  is the command telling it to install the list of packages and answer yes to any questions that pop up. </p>
<ol>
<li>There is one package that is worth upgrading to the latest and greatest - Quantum GIS. The latest version (0.9) is due out very shortly and has the ability to write plugins using the python programming language. A big plus! </li>
</ol>
<p>Download the latest build from <a href="http://qgis.org/uploadfiles/testbuilds/qgis0.9.0.debs_ubuntu_gutsy.tar.gz">http://qgis.org/uploadfiles/testbuilds/qgis0.9.0.debs_ubuntu_gutsy.tar.gz</a> and extract it ( right-click &gt; Extract Here ).  In the directory you'll see 4 .deb files, only 3 of which you'll need unless you plan on doing any development work.</p>
<p>Double click libqgis1_0.9.0_i386.deb and you'll get a message saying an older version is available from directly from ubuntu. We already know this so just close and ignore it.  Click <em>Install Package</em> and wait for it to complete then close out.</p>
<p>Repeat for qgis_0.9.0_i386.deb and qgis-plugin-grass_0.9.0_i386.deb (in that order).</p>
<p>And there we have it,  about 15 minutes depending on your internet speed and you've installed a high-end GIS workstation built completely on free and open source software.</p>";}i:61;a:6:{s:5:"title";s:31:"Update to QGIS Geocoding plugin";s:4:"link";s:56:"http://perrygeo.com/update-to-qgis-geocoding-plugin.html";s:7:"updated";s:25:"2007-10-19T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:64:"tag:perrygeo.com,2007-10-19:update-to-qgis-geocoding-plugin.html";s:7:"summary";s:787:"<p>With the release of QGIS 0.9 imminent , I decided to install in on Windows XP and noticed that <a href="http://www.perrygeo.net/wordpress/?p=60">the geocoding plugin </a>was failing... sure enough I had hardcoded linux temporary directories. So I reworked the python code to determine the temp dir in a more cross-platform way (using tempfile.gettempdir() ) and it works fine.</p>
<p>The update can be downloaded <a href="http://perrygeo.googlecode.com/svn/trunk/qgis/geocode.zip">here</a>.</p>
<p>Assuming you've installed qgis in the standard location, just unzip this into C:\Program Files\Quantum GIS\python\plugins (windows) or /usr/share/qgis/python/plugins (Linux)  and you should be good to go.  Note that you'll have to create the "plugins" directory if it doesn't exist.</p>";}i:62;a:6:{s:5:"title";s:33:"CTech software goes multithreaded";s:4:"link";s:58:"http://perrygeo.com/ctech-software-goes-multithreaded.html";s:7:"updated";s:25:"2007-10-12T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:66:"tag:perrygeo.com,2007-10-12:ctech-software-goes-multithreaded.html";s:7:"summary";s:1089:"<p>CTech has announced that the next version of it's flagship software package,  <a href="http://www.ctech.com/index.php?page=evspro">EVS (Environmental Visualization System)</a>, will take full advantage of multiple processors. </p>
<p><img alt="" src="/assets/img/evs.gif" /></p>
<p>My experience with EVS is mostly in the realm of 3-dimensional kriging and geostatistics. Given the amount of data crunching involved, it's always been sluggish when dealing with a non-trivial amount of data. Nothing is more frustrating that seeing one of your CPU cores cranking away while the others sit idle! But <a href="http://www.ctech.com/forum/viewtopic.php?pid=213#213">some users are reporting</a> that the new multithreaded modules get nearly linear performance increases when adding more processing cores.</p>
<p>CTech is certainly not the first scientific/geostats application to go parallel. But it is the first program that I personally use on a regular basis that will take advantage of a multi-processor system. I hope this marks the beginning of an industry trend in that direction.</p>";}i:63;a:6:{s:5:"title";s:48:"Autodesk open sources coordinate system software";s:4:"link";s:73:"http://perrygeo.com/autodesk-open-sources-coordinate-system-software.html";s:7:"updated";s:25:"2007-09-25T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:81:"tag:perrygeo.com,2007-09-25:autodesk-open-sources-coordinate-system-software.html";s:7:"summary";s:783:"<p>Not very often do I see open source mentioned on the front page of my Google Finance page (let alone Geospatial Open Source). But here it is.. the announcement was made at FOSS4G2007 that <a href="http://money.cnn.com/news/newsfeeds/articles/prnewswire/AQTU16425092007-1.htm"> autodesk will be open sourcing part of it's coordinate system and map projection technology</a>. </p>
<p>So what motivation does Autodesk (or any other company) have to open source it's technology? An important line from Lisa Campbell, vice president, Autodesk Geospatial:</p>
<blockquote>
<p>"Our intent to contribute again to the open source community is a reflection of our customers' desire for faster innovation, more frequent product releases, and lower total cost of ownership."</p>
</blockquote>";}i:64;a:6:{s:5:"title";s:23:"Parallel python and GIS";s:4:"link";s:48:"http://perrygeo.com/parallel-python-and-gis.html";s:7:"updated";s:25:"2007-09-18T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:56:"tag:perrygeo.com,2007-09-18:parallel-python-and-gis.html";s:7:"summary";s:4869:"<p>Let's face it - processing speeds aren't going to be increasing according to Moore's Law anymore; Instead of faster CPUs, <a href="http://www.gotw.ca/publications/concurrency-ddj.htm">we'll be getting more of them</a>. The future of programming, it seems to me, lies in the ability to leverage multiple processors. In other words, we have to write parallel code. Until I read <a href="http://zcologia.com/news/571/catching-up-with-python/">Seans' post</a>, I was unware that there was a viable python solution. I had been growing quite dissillusioned by python's dreaded <a href="http://www.pyzine.com/Issue001/Section_Articles/article_ThreadingGlobalInterpreter.html">Global Interpreter Lock</a> which confines python to a single processing core. I've even started learning <a href="http://www.erlang.org/">Erlang</a> to leverage SMP processing  (until I realized that Erlang and it's standard libraries are virtually useless for anything that needs to handle geospatial data).</p>
<p>So I gave <a href="http://www.parallelpython.com/">Parallel Python</a> (pp) a shot. Since Sean also offered up a bounty for the first GIS application that used pp, I thought it might be a good time to try ;-)</p>
<p>A good candidate for parallel processing is any application that has to crunch away on lists/arrays of data and whose individual members be handled independently (see <a href="http://www.erlang.org/ml-archive/erlang-questions/200606/msg00130.html">pmap in Erlang</a>). I have been working on <a href="http://perrygeo.googlecode.com/svn/trunk/gis-bin/bezier_smooth_pp.py">an application to smooth linework using bezier curves</a>. It's not quite polished yet but the image below shows the before and after</p>
<p><img alt="" src="/assets/img/smoothed.jpg" /></p>
<p>... but <a href="http://en.wikipedia.org/wiki/B%C3%A9zier_curve">bezier curves</a> aren't quite the subject of this post. Let's just say the algorithm takes some time to compute (if you're using a high density of verticies) and can be handled one LineString feature at a time. This makes it a prime candidate for parallelization.</p>
<p>Given a list of input LineStrings, I could process them the sequential way:</p>
<div class="highlight"><pre><span class="nt">&lt;blockquote&gt;</span>smooth_lines = []
for line in lines:
    smooth_lines.append( calcBezierFromLine( line, num_bezpts, beztype, t) )<span class="nt">&lt;/blockquote&gt;</span>
</pre></div>


<p>Or use pp to start up a "job server" which doles the tasks out to as many "workers". A busy worker utilizes a single processing core so a good rule of thumb would be to start up as many workers as you have CPU cores:</p>
<div class="highlight"><pre><span class="nt">&lt;blockquote&gt;</span>numworkers = 2 # dual-core machine
job_server = pp.Server(numworkers, ppservers=ppservers)
smooth_lines = []
jobs = [(line, job_server.submit(calcBezierFromLine, (line, num_bezpts, beztype, t), \
                             (computeBezier, getPointOnCubicBezier), (&quot;numpy&quot;,) ))  for line in lines]
for input, job in jobs:
    smooth_lines.append( job() )<span class="nt">&lt;/blockquote&gt;</span>
</pre></div>


<p>Theoretically the parellized version should run twice as fast as the sequential version on my core2 duo machine. And reality was pretty darn close to that:</p>
<div class="highlight"><pre><span class="nt">&lt;blockquote&gt;</span>$ time python bezier_smooth_pp.py 2
Shapefile contains 1114 lines
Starting pp with 2 workers
Completed 1114 new lines with 8 additional verticies for each line segment along a cubic bezier curve

real    0m10.908s
...

$ time python bezier_smooth_pp.py 1
Shapefile contains 1114 lines
Starting pp with 1 workers
Completed 1114 new lines with 8 additional verticies for each line segment along a cubic bezier curve

real    0m20.007s
...
<span class="nt">&lt;/blockquote&gt;</span>
</pre></div>


<p>Just think of the possibilities. In the forseeable future, the average computer might have 8+ cores to work with. This could mean that your app will move 8x faster if you parallize the code (assuming there are no IO or bandwidth bottlenecks). I'd love to test it out on a system with more than 2 processing cores but, unfortunately, I don't have access to any <a href="http://www.calvin.edu/~adams/research/microwulf/">beowulf clusters</a>, <a href="http://www.sun.com/processors/UltraSPARC-T1/"> Sun UltraSparc servers,</a> or <a href="http://www.apple.com/macpro/">8-core Xeon Mac Pros</a>. This is what I <em>really need</em> to complete my research ;-) So if anyone want to donate to the cause, send me an email! </p>
<p>And to answer Sean's bounty, I don't consider this an actual application (yet) but I hope it can spur some interest and move things in that direction. But if you feel the need to send me some New Belgium swag (or one of the machines listed above), feel free ;-)</p>";}i:65;a:6:{s:5:"title";s:30:"The world turned right-side up";s:4:"link";s:55:"http://perrygeo.com/the-world-turned-right-side-up.html";s:7:"updated";s:25:"2007-09-05T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:63:"tag:perrygeo.com,2007-09-05:the-world-turned-right-side-up.html";s:7:"summary";s:2186:"<p>I've been working alot in <a href="http://www.goldensoftware.com/products/surfer/surfer.shtml">Surfer</a> these days; an excellent geostats and surface mapping package. I was very happy to find that GDAL read it's .grd binary format until I noticed the output from gdalinfo:</p>
<div class="highlight"><pre>&gt; C:\Workspace\Temp\interpolation&gt;gdalinfo svpce_5.grd
Driver: GS7BG/Golden Software 7 Binary Grid (.grd)
Files: svpce_5.grd
Size is 555, 339
Coordinate System is `&#39;
Origin = (383371.000000000000000,3764907.000000000000000)
Pixel Size = (0.500000000000000,0.500000000000000)
Corner Coordinates:
Upper Left  (  383371.000, 3764907.000)
Lower Left  (  383371.000, 3765076.500)
Upper Right (  383648.500, 3764907.000)
Lower Right (  383648.500, 3765076.500)
Center      (  383509.750, 3764991.750)
Band 1 Block=555x1 Type=Float64, ColorInterp=Undefined
 NoData Value=1.70141e+038
</pre></div>


<p>Notice that upper Y value is <em>south</em> of the lower Y value! Basically the raster lines order is reversed (bottom-to-top instead of the normal raster orientation of top-to-bottom). I've also experienced the same issue with some NetCDF files so I thought it would be good to have a generic solution to the problem.</p>
<p>So I hacked up the gdal_merge.py script (distributed with gdal, fwtools, etc) and created a raster flip script that will invert the image along the y axis and retain the georeferencing and metadata. The resulting <a href="http://perrygeo.googlecode.com/svn/trunk/gis-bin/flip_raster.py">flip_raster.py</a> script seems to work pretty well though it is far from tested.</p>
<p>Here's an example:</p>
<p>The standard gdal_translate method (which doesn't account for the inverted coordinate space):</p>
<blockquote>
<p>gdal_translate -of GTiff krig1.grd krig1_translate.tif</p>
</blockquote>
<p><img alt="" src="/assets/img/standard.jpg" /></p>
<p>And the flipped raster method:</p>
<blockquote>
<p>flip_raster.py -o krig1_flip.tif -of GTiff krig1.grd </p>
</blockquote>
<p><img alt="" src="/assets/img/flipped.jpg" /></p>
<p>And we're good.  gdalinfo confirms that we have the same extents, pixel sizes, metadata, etc as the original dataset. </p>";}i:66;a:6:{s:5:"title";s:29:"Mapserver vs Mapnik revisited";s:4:"link";s:54:"http://perrygeo.com/mapserver-vs-mapnik-revisited.html";s:7:"updated";s:25:"2007-09-04T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:62:"tag:perrygeo.com,2007-09-04:mapserver-vs-mapnik-revisited.html";s:7:"summary";s:1999:"<p>A while ago, I was enamored with mapnik's image quality despite it's limitations compared to the vast configurability of the mapserver mapfile. Now that mapserver uses the AGG rendering library,  it might not be necessary to compromise configurability in order to get beautiful linework. I just installed the recent beta of mapserver 5.0 and the image quality is very crisp... but this comes at the expense of rendering speed.</p>
<p>All the times below are the average of ten runs using a full global view of a simplified shapefile of country borders. </p>
<p><img alt="" src="/assets/img/mapserver_gd_test.jpg" /></p>
<p><strong>mapserver (gd) : 0.082 sec , 18kb</strong></p>
<blockquote>
<p>OUTPUTFORMAT
  NAME "GD_JPEG"
  DRIVER "GD/JPEG"
  MIMETYPE "image/jpeg"
  IMAGEMODE RGB
  EXTENSION "jpg"
END</p>
</blockquote>
<p>shp2img -m test.map -o mapserver_gd_test.jpg</p>
<p><img alt="" src="/assets/img/mapserver_agg_test.jpg" /></p>
<p><strong>mapserver (agg) : 0.188 sec , 16kb</strong></p>
<blockquote>
<p>IMAGEQUALITY 80 
OUTPUTFORMAT
  NAME 'AGG_JPEG'
  DRIVER AGG/JPEG
  IMAGEMODE RGB
END</p>
</blockquote>
<ul>
<li>Note that if we bump up imagequality to 90% to (roughly) match the mapnik image, the rendering time and size increase a bit (.201 sec, 25kb)</li>
</ul>
<p>shp2img -m test.map -o mapserver_agg_test.jpg</p>
<p><img alt="" src="/assets/img/mapnik_output.jpg" /></p>
<p><strong>mapnik (agg) : 0.282 sec, 23kb</strong>
python test_mapnik.py</p>
<ul>
<li>Running this through the python interpreter is likely to interfere with the speed of the results so these times may not be very comparable to shp2img.</li>
</ul>
<p>Using these preliminary results, it looks like mapserver 5.0 with AGG rendering is roughly equal to mapnik based on a balance of quality/speed/image size. But since I'd prefer to use mapfiles over the undocumented mapnik xml format any day, I think I'll stick with my beloved mapserver. Kudos to the mapserver developers for raising the bar once again.</p>";}i:67;a:6:{s:5:"title";s:42:"Performance testing rasters with mapserver";s:4:"link";s:67:"http://perrygeo.com/performance-testing-rasters-with-mapserver.html";s:7:"updated";s:25:"2007-09-04T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:75:"tag:perrygeo.com,2007-09-04:performance-testing-rasters-with-mapserver.html";s:7:"summary";s:1921:"<p>There's been some good talk on the mapserver list (thanks to Gregor's diligent testing) about performance related to serving up raster imagery. </p>
<p>First off, comparisons of <a href="http://lists.umn.edu/cgi-bin/wa?A2=ind0709&amp;L=mapserver-users&amp;T=0&amp;O=D&amp;P=1526">image</a> <a href="http://lists.umn.edu/cgi-bin/wa?A2=ind0709&amp;L=mapserver-users&amp;T=0&amp;O=D&amp;P=1526">formats. </a>Then a look at some TIFF <a href="http://lists.umn.edu/cgi-bin/wa?A2=ind0709&amp;L=mapserver-users&amp;T=0&amp;O=D&amp;P=2214">optimization</a> <a href="http://lists.umn.edu/cgi-bin/wa?A2=ind0709&amp;L=mapserver-users&amp;T=0&amp;O=D&amp;P=4492">techniques</a> like overviews (similar to "pyramids" in ESRI land) and internal tiling to boost rendering speed. </p>
<p>Most of the conclusions are not all that staggering: </p>
<ul>
<li>
<p>TIFF is fastest but takes up more space compared to ECW and JPEG2000. </p>
</li>
<li>
<p>Overviews speed up TIFFs tremendously when zoomed out (ie when mapserver would otherwise have to perform some heavy downsampling) </p>
</li>
<li>
<p>Internal tiles in GeoTIFF format give a boost when zoomed in (only the necessary tiles are read from disk) </p>
</li>
<li>
<p>The TIFF comparison was run on two setups; a monsterous 8-core, RAID-5 equipped beast and a low-memory virtual machine on low-end PC hardware. The TIFF optimizations are very noticeable on the lesser machine but almost completely negligible on the high-end machine. </p>
</li>
</ul>
<blockquote>
<p>Both tiling and overviews are useful, but only on machines with resource 
shortages, such as slow disks or a lack of spare RAM for caching.</p>
</blockquote>
<p>Nothing earth-shattering (these techniques are often mentioned as best practices) but is very nice to see some hard numbers to back it up.  Plus the verbose test logs provide a good example for a newbie trying to implement them. Good stuff Gregor!</p>";}i:68;a:6:{s:5:"title";s:23:"Mapping the Undesirable";s:4:"link";s:48:"http://perrygeo.com/mapping-the-undesirable.html";s:7:"updated";s:25:"2007-08-28T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:56:"tag:perrygeo.com,2007-08-28:mapping-the-undesirable.html";s:7:"summary";s:1743:"<p>While by no means a new phenomenon, <a href="http://www.thevision2020.com/LocateSexOffenders.aspx"> Vision 20/20</a> is offering a service allowing you to see a map of the registered sex offenders in your area. WorldChanging, one of my favorite blogs on emerging technologies, has a great article discussing the issues surrounding <a href="http://www.worldchanging.com/archives/007189.html"> mapping of sex offenders </a>.  </p>
<blockquote>
<p>Is this sort of service, based on powerful networked technologies -- and one being sold on the basis of fear -- an appropriate use of the technology? Where is the data being sourced from? How are the people inputting it being supervised? And what rights to privacy and presumptions of innocence are the people it tracks entitled to? </p>
</blockquote>
<p>These are good points, but even more disturbing to me as a citizen and a GIS professional, is that these maps use geocoding services that are <a href="http://www.ij-healthgeographics.com/content/2/1/10/abstract/"> not nearly accurate enough</a> for the scale at which they are being viewed. Even in suburban areas, using linear-referenced geocoding techniques can still yield errors of 100s of meters! The margin of error in the geocoding engine alone is enough to place the sex offender icon directly on an innocent citizens' home.</p>
<p>For instance, which of the homes in the map below is the residence of a sex offender? Does the ambiguity bother you? Would it matter more if <em>you</em> were the innocent person living next door?</p>
<p><img alt="" src="/assets/img/offender.png" /></p>
<p>For maps with this much social weight, I think that a bit more diligence is due to ensure that this data is as accurate as it needs to be! </p>";}i:69;a:6:{s:5:"title";s:18:"Zaca Lake Fire Map";s:4:"link";s:43:"http://perrygeo.com/zaca-lake-fire-map.html";s:7:"updated";s:25:"2007-08-03T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:51:"tag:perrygeo.com,2007-08-03:zaca-lake-fire-map.html";s:7:"summary";s:1033:"<p><img alt="" src="/assets/img/viewfromwest027.jpg" /></p>
<p>Ah the joys of living in southern california. The Zaca Lake fire has been burning since July 4th and recently <a href="http://independent.com/news/2007/aug/03/zaca-fire-explodes/">flared up again</a> with a shift in winds which is blowing ash and a very ominous plume of smoke all over downtown santa barbara. While it's still burning in the wilderness areas north of town, the Paradise Road area along the Santa Ynez river has been evacuated. <a href="http://maps.google.com/maps/ms?ie=UTF8&amp;hl=en&amp;msa=0&amp;msid=105524280382284020010.0004351434f7c4b6bb5eb&amp;ll=34.787162,-120.029583&amp;spn=0.137739,0.144711&amp;t=h&amp;z=13&amp;om=1">Check it out on google maps</a>.</p>
<p>The Santa Barbara News Press is reporting the fire has reached 39,000 acres and has cost $43 million thus far to contain. The county supervisors are likely to declare a state of emergency and there is already a health warning in effect. So much for my bike ride this afternoon...</p>";}i:70;a:6:{s:5:"title";s:17:"Desktop vs Web UI";s:4:"link";s:42:"http://perrygeo.com/desktop-vs-web-ui.html";s:7:"updated";s:25:"2007-06-11T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:50:"tag:perrygeo.com,2007-06-11:desktop-vs-web-ui.html";s:7:"summary";s:563:"<p>This might be a dup story for some but I thought it was interesting enough to post nonetheless:</p>
<p>Jeff Atwood wrote an interesting piece about Desktop vs Web UI that is directly relevant to mapping : <a href="http://www.codinghorror.com/blog/archives/000883.html">Who Killed the Desktop Application?</a>. He compares the usability of Microsoft Streets and Trips with Google Maps and concludes </p>
<blockquote>
<p>All the innovation in user interface seems to be taking place on the web, and desktop applications just aren't keeping up. </p>
</blockquote>";}i:71;a:6:{s:5:"title";s:27:"OGR and matplotlib examples";s:4:"link";s:52:"http://perrygeo.com/ogr-and-matplotlib-examples.html";s:7:"updated";s:25:"2007-06-10T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:60:"tag:perrygeo.com,2007-06-10:ogr-and-matplotlib-examples.html";s:7:"summary";s:209:"<p>Jose Gomez-Dans posted a great example of using OGR, Postgis and Matplotlib with Python - <a href="http://jgomezdans.googlepages.com/ogr%2Cpythonymatplotlib">OGR, Python y Matplotlib</a> (Spanish only).</p>";}i:72;a:6:{s:5:"title";s:23:"FDO, GDAL/OGR and FME ?";s:4:"link";s:44:"http://perrygeo.com/fdo-gdalogr-and-fme.html";s:7:"updated";s:25:"2007-05-31T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:52:"tag:perrygeo.com,2007-05-31:fdo-gdalogr-and-fme.html";s:7:"summary";s:383:"<p><a href="http://fdo.osgeo.org/">FDO</a>, <a href="http://gdal.osgeo.org/">GDAL</a> and <a href="http://safe.com/products/fme/index.php">FME</a> all seem to operate in roughly the same domain - Providing a data model, API and tools to translate between spatial data formats. Does anyone know of any good write-ups comparing/contrasting the features of these three libraries?   </p>";}i:73;a:6:{s:5:"title";s:21:"QGIS Geocoding plugin";s:4:"link";s:46:"http://perrygeo.com/qgis-geocoding-plugin.html";s:7:"updated";s:25:"2007-05-28T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:54:"tag:perrygeo.com,2007-05-28:qgis-geocoding-plugin.html";s:7:"summary";s:2034:"<p>A few weeks back, I decided to take the plunge and learn the python bindings for QGIS 0.9. My first experiment was to implement a geocoder plugin. What started mostly as a learning experiment turned into something that might actually be useful!</p>
<p>The idea was to use web services to do all the actual geocoding work (the hard part!) and the delimited text provider to load the results into qgis. Right now it's built on top of the <a href="http://developer.yahoo.com/maps/rest/V1/geocode.html">Yahoo geocoder</a> which is, IMO, the best out there.. very flexible about the input format. The <a href="http://exogen.case.edu/projects/geopy/">geopy module</a> is used to interact with the geocoding services so it could potentially support other engines such as geocoder.us, virtual earth, google, etc. </p>
<p>The user interface is very straightforward; enter list of addresses/placenames seperated by a line break, pick an output file and go. To be legitimate, you should also sign up for a yahoo api key, though the 'YahooDemo' key will work ok for testing purposes.</p>
<p><a href="/assets/img/dialog.jpg"><img alt="" src="/assets/img/dialog_thumb.jpg" /></a></p>
<p><a href="/assets/img/result.jpg"><img alt="" src="/assets/img/result_thumb.jpg" /></a></p>
<p>Here's the install process (assuming you already have <a href="http://www.reprojected.com/presentations/Videos/qgis_install_051407/install_qgis.txt">python, pyqt4, qgis 0.9, qgis bindings, etc. set up</a>):</p>
<blockquote>
<p>svn checkout http://perrygeo.googlecode.com/svn/trunk/qgis/geocode
     cd geocode
     emacs Makefile # change install directory if needed
     sudo make install</p>
</blockquote>
<p>This is just a rough cut and it's my first attempt at using the qgis and qt apis so there are probably many things that could be improved upon. Ideally this plugin could:</p>
<ul>
<li>
<p>Parse text files as input </p>
</li>
<li>
<p>Allow for a choice of geocoding engine </p>
</li>
<li>
<p>??? </p>
</li>
</ul>
<p>Feedback (and patches) welcome ;-)</p>";}i:74;a:6:{s:5:"title";s:20:"Python gpsd bindings";s:4:"link";s:45:"http://perrygeo.com/python-gpsd-bindings.html";s:7:"updated";s:25:"2007-05-27T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:53:"tag:perrygeo.com,2007-05-27:python-gpsd-bindings.html";s:7:"summary";s:5738:"<p>If you want to get a linux/unix machine talking to your GPS unit, most likely you'll be using <a href="http://gpsd.berlios.de/">gpsd</a>. There are many great apps that build off of gpsd such as kismet and gpsdrive. </p>
<p>Installing gpsd on debian/ubuntu systems is as simple as </p>
<div class="highlight"><pre>sudo apt-get install gpsd gpsd-clients
</pre></div>


<p>You should be able to connect your gps via serial port and start a gpsd server </p>
<div class="highlight"><pre>sudo gpsd /dev/ttyS0
</pre></div>


<p>The gpsd server reads NMEA sentences from the gps unit and is accessed on port 2947. You can test if everything is working by running a pre-built gpsd client such as xgps.</p>
<p>This is very useful for situations where you need lower-level access to the gps data; for logging your position to a postgres database for example. The debian packages (and most others I'm assuming) come with gps.py, a python interface to gpsd allowing you to pull your lat/long from the gps in real time. This opens the door for all sorts of neat real-time gps apps.</p>
<blockquote>
<div class="highlight"><pre><span class="kn">import</span> <span class="nn">gps</span><span class="o">,</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">time</span>

<span class="n">session</span> <span class="o">=</span> <span class="n">gps</span><span class="o">.</span><span class="n">gps</span><span class="p">()</span>

<span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
    <span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s">&#39;clear&#39;</span><span class="p">)</span>
    <span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s">&#39;admosy&#39;</span><span class="p">)</span> 
    <span class="c"># a = altitude, d = date/time, m=mode,  </span>
    <span class="c"># o=postion/fix, s=status, y=satellites</span>

    <span class="k">print</span>
    <span class="k">print</span> <span class="s">&#39; GPS reading&#39;</span>
    <span class="k">print</span> <span class="s">&#39;----------------------------------------&#39;</span>
    <span class="k">print</span> <span class="s">&#39;latitude    &#39;</span> <span class="p">,</span> <span class="n">session</span><span class="o">.</span><span class="n">fix</span><span class="o">.</span><span class="n">latitude</span>
    <span class="k">print</span> <span class="s">&#39;longitude   &#39;</span> <span class="p">,</span> <span class="n">session</span><span class="o">.</span><span class="n">fix</span><span class="o">.</span><span class="n">longitude</span>
    <span class="k">print</span> <span class="s">&#39;time utc    &#39;</span> <span class="p">,</span> <span class="n">session</span><span class="o">.</span><span class="n">utc</span><span class="p">,</span> <span class="n">session</span><span class="o">.</span><span class="n">fix</span><span class="o">.</span><span class="n">time</span>
    <span class="k">print</span> <span class="s">&#39;altitude    &#39;</span> <span class="p">,</span> <span class="n">session</span><span class="o">.</span><span class="n">fix</span><span class="o">.</span><span class="n">altitude</span>
    <span class="k">print</span> <span class="s">&#39;eph         &#39;</span> <span class="p">,</span> <span class="n">session</span><span class="o">.</span><span class="n">fix</span><span class="o">.</span><span class="n">eph</span>
    <span class="k">print</span> <span class="s">&#39;epv         &#39;</span> <span class="p">,</span> <span class="n">session</span><span class="o">.</span><span class="n">fix</span><span class="o">.</span><span class="n">epv</span>
    <span class="k">print</span> <span class="s">&#39;ept         &#39;</span> <span class="p">,</span> <span class="n">session</span><span class="o">.</span><span class="n">fix</span><span class="o">.</span><span class="n">ept</span>
    <span class="k">print</span> <span class="s">&#39;speed       &#39;</span> <span class="p">,</span> <span class="n">session</span><span class="o">.</span><span class="n">fix</span><span class="o">.</span><span class="n">speed</span>
    <span class="k">print</span> <span class="s">&#39;climb       &#39;</span> <span class="p">,</span> <span class="n">session</span><span class="o">.</span><span class="n">fix</span><span class="o">.</span><span class="n">climb</span>

    <span class="k">print</span>
    <span class="k">print</span> <span class="s">&#39; Satellites (total of&#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">session</span><span class="o">.</span><span class="n">satellites</span><span class="p">)</span> <span class="p">,</span> <span class="s">&#39; in view)&#39;</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">session</span><span class="o">.</span><span class="n">satellites</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span><span class="p">,</span> <span class="n">i</span>

    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</pre></div>


</blockquote>
<p>... which gives you a simple readout to the terminal every 3 seconds.</p>
<p><img alt="" src="/assets/img/gpsd_python.jpg" /></p>
<p>Obviously there are much more interesting applications for this ( logging data to postgis, displaying real-time tracking data in QGIS via a python plugin, etc). But this is a good start for any python based app.</p>";}i:75;a:6:{s:5:"title";s:20:"Sparklines in python";s:4:"link";s:45:"http://perrygeo.com/sparklines-in-python.html";s:7:"updated";s:25:"2007-05-19T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:53:"tag:perrygeo.com,2007-05-19:sparklines-in-python.html";s:7:"summary";s:3008:"<p>Edward Tufte, the outspoken guru of data visualization, has long been an advocate of clear and concise (almost minimalist) graphical representations of data. He's got a lot of great ideas relevant to cartography (my cartography course at Humboldt State used his book "The Visual Display of Quantitative Information" as our text). </p>
<p>One of the coolest ideas are "sparklines" which he describes as "data-intense, design-simple, word-sized graphics". Instead of standalone charts that are often placed on their own and separate from the text that discusses them, sparklines are meant to be placed in-line with the text and provide memorable, simple and contextually-relevant data to support the surrounding text. For example:</p>
<p>_The US National Debt as a percentage of GDP increased during the Reagan and Bush presidencies <img alt="" src="/assets/img/reaganbush.GIF" /> but dropped off slightly during the Clinton administration  <img alt="" src="/assets/img/clinton.GIF" /> . _</p>
<p>Now of course I had to figure out how to produce these in python.  Theres a great <a href="http://bitworking.org/projects/sparklines/#source">cgi application</a>, written in python by Joe Gregorio, that does sparklines. I needed something that was abstracted away from the CGI framework, more of a proper python module. Replacing all the CGI-specific code was straightforward and I came up with a standalone sparkline python module (<a href="http://perrygeo.googlecode.com/svn/trunk/gis-bin/spark.py"> View / Download the Source Code. </a> ) The only dependencies are python and the python imaging library.</p>
<p>In the minimalist spirt of sparklines, the interface was kept simple. First you create a list of data values then simply pass the list to one of the sparkline generators:</p>
<blockquote>
<p>import spark
a = [32.5,35.2,39.9,40.8,43.9,48.2,50.5,51.9,53.1,55.9,60.7,64.4]
spark.sparkline_smooth(a).show()</p>
</blockquote>
<p>Or if you prefer a more discrete, bar-graph-style <img alt="" src="/assets/img/discrete.GIF" /> instead of a smooth line:</p>
<blockquote>
<p>spark.sparkline_discrete(a).show()</p>
</blockquote>
<p>There's plenty of room for configuration. For example, in the national debt example above I wanted to keep the y axis at the same scale (instead of the default min-max scaling) and make each step 6 pixels wide:</p>
<blockquote>
<p>spark.sparkline_smooth(a, dmin=30,dmax=70, step=6).show()</p>
</blockquote>
<p>How does this relate to cartography? GIS typically takes a snapshot representation of earth, frozen in time. Since sparklines seem particularly good at representing change-over-time, it could be an interesting way to add a time dimension to a 2-D map. For example, instead of just displaying country polygons with labels, you could place a sparkline right under the label showing the population changes over the last century. It seems like it would be an ideal way to embed alot of useful information into a small map. </p>
<p>Anyone know of any good examples?</p>";}i:76;a:6:{s:5:"title";s:45:"Blessed Unrest - Paul Hawken’s presentation";s:4:"link";s:65:"http://perrygeo.com/blessed-unrest-paul-hawkens-presentation.html";s:7:"updated";s:25:"2007-05-14T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:73:"tag:perrygeo.com,2007-05-14:blessed-unrest-paul-hawkens-presentation.html";s:7:"summary";s:2256:"<p>I got the chance to see Paul Hawken speak tonight in Santa Barbara. I knew him best as the author of <a href="http://www.natcap.org/">Natural Capitalism</a> which provided a great roadmap for integrating ecologically sustainable practices with the business world. This talk was based on his recent book - <a href="http://blessedunrest.com/">Blessed Unrest - How the Largest Movement in the World Came into Being and Why No One Saw It Coming</a>.  </p>
<p>The basis of this book is simple: that organically-developed, bottom-up, non-hierarchical organizations (which number in the millions according to his research) are now leading the world in many diverse areas of service. He describes these environmental and social justice organizations as the "immune system" of our societies; our response to destructive and corrupt habits perpetrated by those in power who are willing to compromise our future for short-term gain. </p>
<p>One thing that struck me about the subject was the importance of sharing <em>information</em> and <em>ideas</em> (as opposed to spreading an <em>ideology</em>). I thought one of the most interesting stories of the night was his description of how the meme of non-violent civil disobedience evolved... from Emerson, to Thoreau, to Ghandi, to Rosa Parks to Martin Luther King, Jr. At each turn of the story, there was someone (often unnamed but vitally important) who turned on each of these people to the ideas of those who came before. </p>
<p>Paul was eager to point out the role of technology in this inter-connected mesh of grassroots community organizations. He mentioned open-source software a few times and even gave a shout out to Ruby on Rails (which I gather was the backbone for his <a href="http://wiserearth.org/">WiserEarth.org</a> site focussed on connecting these diverse organizations).</p>
<p>It was a careful mix of optimism and pessimism; Paul was careful in noting the many severe challenges we've been handed but was confident that this bottom-up mesh of interconnected citizens can form a community strong enough to withstand anything that comes it's way. In the end, his message was about doing what you love, connecting with others and standing up for your values. Sounds like good advice to me.</p>";}i:77;a:6:{s:5:"title";s:33:"Cleaning up CAD data with postgis";s:4:"link";s:58:"http://perrygeo.com/cleaning-up-cad-data-with-postgis.html";s:7:"updated";s:25:"2007-05-14T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:66:"tag:perrygeo.com,2007-05-14:cleaning-up-cad-data-with-postgis.html";s:7:"summary";s:903:"<p>Don't you just love getting CAD data into GIS! I received a .dwg file with study areas delineated as polylines which we needed as polygons for analysis purposes. And it wasn't just one polyline surrounding each study area ... there were hundreds of little line segments which outlined a couple dozen areas (what was this CAD tech thinking?) . Luckily each segment had a name to associate it with the proper area.</p>
<p>I found that ArcMap's tools for doing this are painfully inadequate so I turned to postgis. After converting the dataset to a shapefile, the solution was simple:</p>
<blockquote>
<p>shp2pgsql "study_areas.shp" areas | psql -d gisdata
pgsql2shp -f "study_areas_poly.shp" gisdata \
   "SELECT BuildArea(collect(the_geom)) AS the_geom, name 
    FROM areas 
    GROUP by name"</p>
</blockquote>
<p>Viola... a new shapefile with my proper polygons instead of CAD chicken scratch. </p>";}i:78;a:6:{s:5:"title";s:17:"Back on the train";s:4:"link";s:42:"http://perrygeo.com/back-on-the-train.html";s:7:"updated";s:25:"2007-05-13T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:50:"tag:perrygeo.com,2007-05-13:back-on-the-train.html";s:7:"summary";s:432:"<p>I'd like to have some interesting excuse as to why I haven't posted since last July. But I don't. </p>
<p>I've since left my postion at NCEAS, started a new job at <a href="http://www.geosyntec.com">Geosyntec</a> and have been keeping busy with life, love and the pursuit of happiness. Oh and GIS of course.</p>
<p>Anyway, I expect to be posting on a much more regular basis from here on (unless I get distracted again ;-) ).</p>";}i:79;a:6:{s:5:"title";s:31:"Worldwind Java - Jython example";s:4:"link";s:54:"http://perrygeo.com/worldwind-java-jython-example.html";s:7:"updated";s:25:"2007-05-13T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:62:"tag:perrygeo.com,2007-05-13:worldwind-java-jython-example.html";s:7:"summary";s:1830:"<p>The <a href="http://worldwind.arc.nasa.gov/java/index.html"> worldwind java sdk </a> has finally been released.  It's a neat SDK, well organized, <a href="http://tleilax.chinoy.com/worldwind/articles/20070510-FirstImpressions.html">easy to bring into Eclipse</a> with some good examples to start hacking away.</p>
<p>The only problem is the examples are written in Java  ;-) . If braces make you cringe but you still want to work with all the excellent Java libraries out there, you'll want to take a look at Jython. Taking the AWT1Up.java code and porting a subset of the functionality to Jython was surprisingly easy and yielded much more readable code in my opinion. And the ability to manipulate objects at the interactive prompt is just so sweet. </p>
<p><a href="/assets/img/wwj_jython.jpg"> <img alt="" src="/assets/img/wwj_jython_thumb.jpg" /> </a></p>
<p><a href="http://perrygeo.googlecode.com/svn/trunk/gis-bin/wwj_demo.py"> View the Source Code </a></p>
<p>Setup is not too terrible:</p>
<ol>
<li>
<p>Get a Java JDK (I'm using sun java 6) </p>
</li>
<li>
<p>Download and install Jython 2.2b2 </p>
</li>
<li>
<p>Download and unzip the worldwind java sdk (ex: /opt/wwj )</p>
</li>
<li>
<p>Set your LD_LIBRARY_PATH variable to /opt/wwj</p>
</li>
<li>
<p>Set your CLASSPATH variable to /opt/wwj/worldwind.jar</p>
</li>
<li>
<p>Run <code>jython wwj_demo.py</code></p>
</li>
</ol>
<p>One thing that is a bit disappointing with the WorldWind SDK in general is the lack of support for rendering common formats. Maybe I missed something but I couldn't get gpx or georss feeds working properly.  It is version 0.2 so I expect support for GeoRSS and GPX to improve and for GML, KML, GeoJSON, Shapefiles, Rasters, WMS, etc to be included eventually.</p>
<p>Anyone else out there started playing with Jython / Worldwind yet?</p>";}i:80;a:6:{s:5:"title";s:31:"The reliability of web services";s:4:"link";s:56:"http://perrygeo.com/the-reliability-of-web-services.html";s:7:"updated";s:25:"2006-07-24T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:64:"tag:perrygeo.com,2006-07-24:the-reliability-of-web-services.html";s:7:"summary";s:1182:"<p>A few months back I posted a link to my <a href="http://www.perrygeo.net/wordpress/?p=35">ten favorite Web Mapping Services</a>. The post included live links directly to the WMS servers. At first I questioned this move as locally hosted images would be far more reliable. But I thought it would be a neat experiment to see the downtime of each site. So I checked it daily just out of curiosity...</p>
<p>Well with today's apparent disappearance of the <a href="http://wms.jpl.nasa.gov/wms.cgi?request=GetCapabilities">NASA JPL site</a>, all but one of my WMS layers mentioned have been down for at least a significant portion of a day. (The only one that's been consitently up has been http://mesonet.agron.iastate.edu) .</p>
<p>This echos back to what I was complaining about with the whole <a href="http://www.perrygeo.net/wordpress/?p=43">USGS National Map debacle</a>. The bottom line is that whenever we rely heavily on a web service to deliver essential data, we are risking the integrity of the end product. The chain is only as strong as it's weakest link and, unfortunately as the USGS and NASA have shown, those links can and will fail completely from time to time.</p>";}i:81;a:6:{s:5:"title";s:39:"Converting Shapefiles (and more) to KML";s:4:"link";s:62:"http://perrygeo.com/converting-shapefiles-and-more-to-kml.html";s:7:"updated";s:25:"2006-07-14T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:70:"tag:perrygeo.com,2006-07-14:converting-shapefiles-and-more-to-kml.html";s:7:"summary";s:2215:"<p>A while back I wrote about converting <a href="http://www.perrygeo.net/wordpress/?p=3">KML files into a shapefile</a> for use with GIS apps other than GoogleEarth. I got a ton of emails and site traffic from people looking to go the opposite direction; getting their GIS data into KML. </p>
<p>There are, of course, a couple of utilities already implemented: ArcMap-based extensions including <a href="http://arcscripts.esri.com/details.asp?dbid=14344">KML Home Companion</a> and <a href="http://www.arc2earth.com/">Arc2Earth</a>, a nice MapWindow app called <a href="http://interactiveearth.blogspot.com/2006/06/download-shape2earth-beta-2.html"> Shape2Earth</a>, and the open source WMS <a href="http://docs.codehaus.org/display/GEOS/Home">Geoserver</a> all support KML output. </p>
<p>Not to be left behind, GDAL/OGR now supports KML output.  Oddly enough it does not yet read KML. But hand it any <a href="http://ogr.maptools.org/ogr_formats.html">OGR-readable vector dataset</a> and it can be converted into KML. It currently doesn't offer as much control over the output as the above options but is quicker to implement, works with a wide variety of input formats and can be easily scripted.</p>
<p>This functionality is in CVS only at the moment but should be included in the next release. If you can't wait and don't feel like compiling from cvs source, try the 1.0.5 version of <a href="http://fwtools.maptools.org/">FWTools</a> (for Windows and Linux).</p>
<p>The conversion process is pretty straightforward. For example, the following will convert a shapefile (sbpoints.shp) to KML (mypoints.kml). </p>
<div class="highlight"><pre>ogr2ogr -f KML mypoints.kml sbpoints.shp sbpoints
</pre></div>


<p>The KML format flys in the face of the GIS mantra stating that content should be seperate from styling. Since styling information is purposefully absent from most standard vector formats, it makes for pretty bland KML output. The attributes just get dumped out into one big text block and there is no classification or styling control.
<img alt="" src="/assets/img/ogrkml.jpg" /></p>
<p>But in terms of getting your data into Google Earth quickly (esp. point data), the OGR method looks promising.</p>";}i:82;a:6:{s:5:"title";s:45:"Wardriving with Ubuntu Linux and Google Earth";s:4:"link";s:70:"http://perrygeo.com/wardriving-with-ubuntu-linux-and-google-earth.html";s:7:"updated";s:25:"2006-07-03T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:78:"tag:perrygeo.com,2006-07-03:wardriving-with-ubuntu-linux-and-google-earth.html";s:7:"summary";s:3761:"<p>Wardriving is fun. Going around the neighborhood and mapping all the wireless networks may be nothing more than a geeky hobby but it can sure teach you alot. And viewing the results in Google Earth is icing on the cake.</p>
<p>I've used NetStumbler on windows and this works great but since my computers at home are now nearly Microsoft-free, I had to relearn the process on Linux. It breaks down into a few easy steps:</p>
<ol>
<li>
<p>Install the <strong>drivers</strong> for you wireless card. On my HP laptop with a Broadcom card, I followed the instructions on the <a href="http://ubuntuforums.org/showthread.php?p=1071920&amp;mode=linear"> ubuntu forums </a> which worked great with one exception: the driver link on that page doesn't have a valid md5 sum so you can download it from <a href="http://forums.fedoraforum.org/forum/attachment.php?attachmentid=7759">this url</a> instead</p>
</li>
<li>
<p>Install <strong>gpsd.</strong> This is the software that talks to your gps unit and is available in the ubuntu packages through apt. The one hitch is that I had to set up my Magellan GPS unit up for the correct baud rate and NMEA output. Once installed, I connected the GPS unit via a serial port, turned it on and ran _ gpsd /dev/ttyS0 _ to start the gpsd server.</p>
</li>
<li>
<p>Install <strong>kismet,</strong> the wireless packet sniffer. The version in the ubuntu repository is not recent enough to support my Broadcom driver so I had to download the latest source and compile it with the standard _ configure, make, sudo make install <em>.  Then I had to edit the /usr/local/etc/kismet.conf to reflect my system configuration; I changed the _suiduser</em>, <em>source</em> and <em>logtemplate</em> variables. Once configured, you can start it with the command <em>sudo kismet</em>.</p>
</li>
<li>
<p>Now <strong>drive/bike/walk around</strong> for a bit with your laptop and gps unit. When you're done, shutdown kismet and you'll have a bunch of fresh logfiles to work with.</p>
</li>
<li>
<p>The main kismet log is an xml file containing all the info on the available wireless networks including their SSID, their encryption sheme, transfer rater and their geographic position via gpsd. I worked up a small python script, <a href="http://perrygeo.googlecode.com/svn/trunk/gis-bin/kismet2kml.py">kismet2kml.py</a> (based on a blog entry at <a href="http://www.larsen-b.com/Article/204.html">jkx@Home</a>), to <strong>parse the logfile into a KML file</strong> for use with Google Earth. It could certainly use some tweaking but it's a start. To run it, give it the kismet logfile and pipe the output to a kml file:  </p>
</li>
</ol>
<div class="highlight"><pre>kismet2kml.py kismet-log-Jul-03-2006-1.xml &gt; wardrive.kml
</pre></div>


<ol>
<li>Now fire up <strong>Google Earth</strong> (Linux version now available!) and load your KML file.</li>
</ol>
<p><img alt="" src="/assets/img/kismetkml.jpg" /></p>
<p>Also, as James Fee <a href="http://www.spatiallyadjusted.com/2006/07/03/help-me-think-of-a-good-mashup-to-create/">points out</a>, posting your data as KML files means that the data can be integrated into a growing number of kml-ready apps including google maps (just upload the kml and point your browser to <em>http://maps.google.com/maps?q=http://your.server/wardrive.kml</em>).  </p>
<p>Another neat application I've found for dealing with kismet logs is the <a href="http://wiki.openstreetmap.org/index.php/User:Dutch#Converting_Kismet_.gps_files_to_gpx">kismet2gpx script</a> for converting the kismet gps tracklog into gpx. Since most gps units have pretty tight limitations on the length of stored tracks, logging them to your laptop with kismet could be an effective way of creating detailed tracks on very long trips.</p>";}i:83;a:6:{s:5:"title";s:17:"Mapserver Include";s:4:"link";s:42:"http://perrygeo.com/mapserver-include.html";s:7:"updated";s:25:"2006-06-25T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:50:"tag:perrygeo.com,2006-06-25:mapserver-include.html";s:7:"summary";s:1691:"<p>If you mange even a small number of Mapserver sites, eventually you notice that you use a number of identical layers in multiple mapfiles. The way this is typically done is to copy and paste the LAYER definition into each mapfile. But inevitably you'll need to change the styling or the data source and you have to manually go through each mapfile to sync the changes. Wouldn't it be nice to define the layer in a single file and use it in many mapfiles?</p>
<p>While Mapserver has no concept of an "include", the C preprocessor (cpp) does. This is mentioned on the Mapserver list every time the subject of includes comes up. Still I have yet to find an actual example so I thought I'd share my notes on how I accomplish a mapserver include:</p>
<ol>
<li>Create your mapfile as usual but leave out any LAYER definitions that you wish to share amongst mapfiles. Instead use something like :</li>
</ol>
<blockquote>
<h1>include "landsat.layer"</h1>
</blockquote>
<ol>
<li>
<p>The C Preprocessor doesn't deal well with "#" which is the mapfile's chosen comment charachter. Instead replace with "##" to indicate a comment </p>
</li>
<li>
<p>Save this pseudo-mapfile as <em>mymap.template</em></p>
</li>
<li>
<p>Create a file in the same directory called <em>landsat.layer</em> with the LAYER block. </p>
</li>
<li>
<p>Run the template through the preprocessor to generate the real mapfile :</p>
</li>
</ol>
<blockquote>
<p>cpp -P -C -o mymap.map mymap.template </p>
</blockquote>
<p>The next step would be to script the preprocessing of <em>all</em> your mapfiles so that changing a layer definition in multiple mapfiles was as simple as changing the *.layer file and running the script. </p>";}i:84;a:6:{s:5:"title";s:26:"Some thoughts on Where 2.0";s:4:"link";s:50:"http://perrygeo.com/some-thoughts-on-where-20.html";s:7:"updated";s:25:"2006-06-15T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:58:"tag:perrygeo.com,2006-06-15:some-thoughts-on-where-20.html";s:7:"summary";s:6512:"<p>Oh man, it's a long drive from San Jose back to Santa Barbara! Anyways, just got back from where 2.0 and want to throw out my quick summary of the event.</p>
<ul>
<li>There was alot of talk about all things <strong>open</strong>; open data, open source and open standards. There was lots of buzz around the open street map project, osgeo applications like grass, ossim, gdal, mapbender, etc., and tons of discussion of WMS, WFS and other relevant standards. This is great as I think all three will be the cornerstone of the spatial industry in the near future. </li>
</ul>
<p>But, as I've mentioned before, people throw the word "open" around so much that it begins to loose meaning. From alot of conversations I had, I found many people were confused about the differences. Some folks seemed to think that the osgeo foundation was a data repository for open data (it may soon be! .. but not quite yet) and also that osgeo was an open standards organization trying to "compete" with the OGC. But that is what an event like this is for; to reach out and communicate, clarify and bridge the gaps between communities.</p>
<p>Of course I had to laugh as I heard a couple dozen people refer to Google Maps as an "open source" application.... it's proprietary source code using proprietary data through a proprietary data transfer mechanism. It may be "free" as in beer but that's about the extent of it's openness.</p>
<ul>
<li>
<p><strong>Social Data</strong>: using location technology as the basis for sharing personal experiences and social networking was a powerful theme at Where 2.0. It ran the gammut from tagging locations to writing personal travelogs to mobile location-based games to virtual worlds to mobile apps that would could differentiate stangers vs aquantainces in range of your bluetooth device. </p>
</li>
<li>
<p><strong>Security and privacy</strong>: There are implications to the web/where2.0 mindframe. Publishing your location and personal information in real time through the web and mobile devices brings up some frightening security and privacy issues. Who owns the data? What licenses are your personal data distributed under? Do you need others permission to post their photos or locations? Who decides what is acceptable and what gets taken down? How is spam dealt with? Only two speakers were brave enough to fully address these issues head on and the panel had some good discussion on these topics. Kudos to them. </p>
</li>
<li>
<p>Bringing location technology to <strong>the masses</strong>: This was repeated by a few speakers; that in order to be successful in spatial technologies you need to bring your service to the masses. Certainly if you're trying to compete in the social networking space, this is true. But in general GIS and spatial tech has application that are far beyond the interests of the vast majority of people.. emergency management, infrastructure, environmental, real estate, etc.  </p>
</li>
</ul>
<p>The mantra that spatial data and services must appeal to a wide audience is analogous to saying that family cars are the only successful type of motorized vehicle. In terms of numbers, they may be a majority. But in terms of utility, there is a reason that construction companies pay hundreds of thousands of dollars for heavy industrial machinery.. because trying to haul tons of earth and debris with a Toyota Camry just doesn't work.  Likewise there is a similar reason most municipalities don't use a Google Mashup to manage their parcel data.. it simply doesn't work. So what is appropriate for mass consumption may have little applicabilty to business/government/industry/research. And vice versa. </p>
<ul>
<li>
<p><strong>Mobile Applications</strong>: So much potential here and some really cool innovations in geotagging content. Really, for the first time, I got a sense that these personal devices could become a means for creating a vast database of socially relevant information. But the lack of security and privacy safegaurds along with the domination of the cellular networks and the heterogenous environment of mobile platforms, I still view most of this as pie-in-the-sky.</p>
</li>
<li>
<p>Some new discoveries: </p>
<ul>
<li>
<p>metacarta: A text parsing engine with a public API to extract geo info from plain text! </p>
</li>
<li>
<p>gutenkarte: An application of the above to classic works of literature.</p>
</li>
<li>
<p>open layers: A javascript application with a slick UI and simple API for displaying WMS and WFS</p>
</li>
<li>
<p>open street map: A fantastic project focussing on collaborative development of a public street database </p>
</li>
<li>
<p>mapstraction: A javascript layer on top of the 'Big 3' Mapping APIs that allows yoiu to switch seamlessly between the service providers.</p>
</li>
<li>
<p>Google Earth &amp; Sketchup: GE for linux!!! Wooo-hooo!! There was also a sweet demo of creating 3D drawings in Sketchup and placing them in GE. Very slick.</p>
</li>
<li>
<p>Google Maps: Now with kml support! Just try http://maps.google.com/?q=http://path.to.your.kml </p>
</li>
<li>
<p>Mapguide: I am embarrased to say I have never tried out Autodesk's open source offering but the demo was sweet.. a very high powered GIS for a web app. And the Autodesk folks were about the nicest group of guys you could meet.</p>
</li>
<li>
<p>ArcGIS/Server 9.2: Author a map in ArcMap. Save as .mxd. Drop into web server. Instant kml and wms server! </p>
</li>
<li>
<p>And while not new to me, there were alot of good overviews of some of my favorite software packages like OSSIM, GRASS, GDAL, Geoserver and World Wind (Java version coming this fall!!). </p>
</li>
</ul>
</li>
<li>
<p>Finally, the prize for most interesting talk goes to Chris Spurgeon who spoke about the best geohacks  of the last 3000 years. Long before computers, Chris showed how Eratosthenes measured the diameter of the earth, how the Polypenesian's used the stars as an advanced navigation system, how the  post-renaissance world _re_discovered stars as a the key to navigation. And in more recent times he showed how Harry Beck reinvented the cartography of transportation with the London subway maps and how the VOR transmitters created highways in the featureless sky. This presentation really put current innovations in location technologies into perspective.</p>
</li>
</ul>
<p>OK sorry about the lack of links but it's too late in the evening for that. Hope you enjoyed my rundown and I'm sure I'll have more to say after I get some sleep!</p>";}i:85;a:6:{s:5:"title";s:25:"Animating the Blue Marble";s:4:"link";s:50:"http://perrygeo.com/animating-the-blue-marble.html";s:7:"updated";s:25:"2006-06-09T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:58:"tag:perrygeo.com,2006-06-09:animating-the-blue-marble.html";s:7:"summary";s:717:"<p>A while back I posted my technique for creating an <a href="http://www.perrygeo.net/wordpress/?p=39">animated gif</a> out of a time series of maps. While this may have been the pinnacle of web animation circa 1997, the animated gif just didn't quite seem hip enough for this day and age.</p>
<p>Today I found a more modern example. This <a href="http://worldkit.org/wmstimenav/">WorldKit interface</a>, built with Flash, shows the seasonal progression of snow and land cover changes courtesy of the next generation Blue marble images. Complete with time slider, image fading and full animation controls, this interface really shines at providing an interactive experience rather than a passive visual display. </p>";}i:86;a:6:{s:5:"title";s:26:"HostGIS Linux 3.6 Released";s:4:"link";s:50:"http://perrygeo.com/hostgis-linux-36-released.html";s:7:"updated";s:25:"2006-06-03T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:58:"tag:perrygeo.com,2006-06-03:hostgis-linux-36-released.html";s:7:"summary";s:3563:"<p>Though probably not as big of a news item as this week's <a href="http://www.ubuntu.com/news/606released">release of Ubuntu Dapper</a>, there's another Linux release that might be of interest to us GIS folk:</p>
<p>Built off of a <a href="http://www.slackware.com/">Slackware</a> base (one of the oldest, most stable linux distros), <a href="http://www.hostgis.com/linux/">HostGIS Linux</a> aims to be a "minimal yet complete" distribution specifically built with GIS in mind. It is first and foremost a server platform; it does not include any window system at all. If you're looking for desktop GIS applications out-of-box, it might not be the best for you. </p>
<p>But for a GIS server, it comes with most of the open source stack preinstalled and configured. This latest release has <a href="http://www.hostgis.com/linux/manual/changes.html">a few changes</a> and version upgrades for most of the components.</p>
<ul>
<li>
<p>PHP, Python and Perl Mapscript </p>
</li>
<li>
<p>GDAL/OGR with PHP, Python and perl bindings </p>
</li>
<li>
<p>Postgresql 8.1 with PostGIS 1.1 </p>
</li>
<li>
<p>drivers for many extra formats including jpeg2000 and ecw </p>
</li>
<li>
<p>Apache web server with Mapserver CGI </p>
</li>
</ul>
<p>The primary motivation for creating HGL was to speed up the installation of new gis-enabled servers. Gregor Mosheh, the head programmer for HostGIS, has done an excellent job pretty much single-handedly putting this together. ( In full disclosure, I do consulting work for HostGIS, though I wasn't really involved in the creation of HostGIS Linux. )</p>
<p>The setup is your standard text-based install and is a piece of cake if you've ever installed Linux before. When you're through, you have the good ole' black and white text console staring at you. Not very interesting... But the really satisfying part is to fire up a web browser after the install and be able to point it to a working webGIS application. Anyone who has spent the time to set up the mapserver stack and its seemingly infinite dependencies can appreciate the amount of work this saves! </p>
<p>If you're not into learning a new distro, there is always the <a href="http://www.maptools.org/fgs/">FGS</a> linux installer which will set up a similar software stack on pretty much any linux.</p>
<p>And for Desktop GIS, many linux distros have a selection of GIS apps in their package repositories (You'll want to certainly grab GRASS, GDAL and QGIS) . <a href="http://fwtools.maptools.org/">FWTools</a> can be a good option on both Linux and Windows to get you up and running quickly. Finally there are a number of other more desktop-oriented distros for GIS including <a href="http://www.sourcepole.com/gis-knoppix/"> Knoppix GIS</a> and <a href="http://www.geolivre.org.br/modules/news/">GeoLivre</a>, both of which run as a live-cd so you can check it out before you install.</p>
<p>Anyways, back to sum up HostGIS Linux: </p>
<p>If you need to set up a GIS server with minimal fuss and you have some experience with Linux, you might like to try it out. It will save lots of time. </p>
<p>If you're a GIS user who needs a graphic windows environment to do GIS work on the Desktop, HostGIS Linux will not really make you happy out-of-the-box. Of course, since HGL is slackware based, you <em>can</em> use the slackware package management system to build an impressive Desktop system. But if you don't need to run a server or really care about having the latest versions, Ubuntu comes with a solid desktop environment and packages for alot of good GIS apps. </p>";}i:87;a:6:{s:5:"title";s:18:"More on Mapnik WMS";s:4:"link";s:43:"http://perrygeo.com/more-on-mapnik-wms.html";s:7:"updated";s:25:"2006-05-18T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:51:"tag:perrygeo.com,2006-05-18:more-on-mapnik-wms.html";s:7:"summary";s:4318:"<p>One of my initial complaints about the Mapnik WMS server was that it would not accept any parameters that were not in the OGC WMS spec. Some WMS clients will tag on extra parameters for various reasons and the OGC supports this in relation to vendor-specific parameters. The fix was pretty simple;in <strong>mapnik/ogcserver/common.py</strong> you can simply comment out         </p>
<blockquote></blockquote>
<div class="highlight"><pre>    #for paramname in params.keys():
    #    if paramname not in self.SERVICE_PARAMS[requestname].keys():
    #        raise OGCException(&#39;Unknown request parameter &quot;%s&quot;.&#39; % paramname)
</pre></div>


<p>to get the desired effect.</p>
<hr />
<p>There was also the question of speed and how it compared to other WMS servers such as Mapserver. Since I already had both a Mapnik and Mapserver WMS set up using the exact same data source, styled in the same fashion, it was pretty simple to write a quick python script that would smack each WMS server with a given number of back-to-back WMS GetMap requests:</p>
<blockquote>
<table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span class="c">#!/usr/bin/env python</span>
<span class="kn">import</span> <span class="nn">urllib</span>

<span class="n">server</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">hits</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>

<span class="k">if</span> <span class="n">server</span> <span class="o">==</span> <span class="s">&#39;mapnik&#39;</span><span class="p">:</span>
    <span class="n">url</span> <span class="o">=</span> <span class="s">&quot;http://localhost/fcgi-bin/wms?VERSION=1.1.1&amp;REQUEST;=GetMap&amp;SERVICE;=WMS&amp;LAYERS;=world_borders&amp;SRS;=EPSG:4326&amp;BBOX;=-4.313249999999993,20.803500000000003,59.58675000000002,52.75350000000002&amp;WIDTH;=800&amp;HEIGHT;=400&amp;FORMAT;=image/png&amp;STYLES;=&amp;TRANSPARENT;=TRUE&amp;UNIQUEID;=&quot;</span>
<span class="k">elif</span> <span class="n">server</span> <span class="o">==</span> <span class="s">&#39;mapserver&#39;</span><span class="p">:</span>
    <span class="n">url</span> <span class="o">=</span> <span class="s">&quot;http://localhost/cgi-bin/mapserv?map=/home/perrygeo/mapfiles/world.map&amp;VERSION;=1.1.1&amp;REQUEST;=GetMap&amp;SERVICE;=WMS&amp;LAYERS;=worldborders&amp;SRS;=EPSG:4326&amp;BBOX;=-4.313249999999993,20.803500000000003,59.58675000000002,52.75350000000002&amp;WIDTH;=800&amp;HEIGHT;=400&amp;FORMAT;=image/png&amp;STYLES;=&amp;TRANSPARENT;=TRUE&amp;UNIQUEID;=&quot;</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">hits</span><span class="p">):</span>
    <span class="n">urllib</span><span class="o">.</span><span class="n">urlretrieve</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</pre></div>
</td></tr></table>

</blockquote>
<p>Then just run the script from the command line, specifying the server and number of hits, and wrap it in the <em>time</em> command. Here are the results:</p>
<p><img alt="" src="/assets/img/manik_vs_mapserv_speed.png" /></p>
<p>Pretty close. Mapserver was just slightly faster in every case. Now this is just a preliminary test and it would be interested to see a comparison:</p>
<ul>
<li>
<p>With larger datasets and more complex styling including classification and text labelling</p>
</li>
<li>
<p>With data from other sources such as postgis where the connection overhead might be significant</p>
</li>
<li>
<p>With Mapserver running as a fastcgi </p>
</li>
<li>
<p>With concurrent requests as opposed to back-to-back requests </p>
</li>
</ul>
<p>Overall though, my opinion of Mapnik WMS remains high and I'd love to put it in production use in the near future. Stay tuned...</p>";}i:88;a:6:{s:5:"title";s:17:"Mapnik WMS Server";s:4:"link";s:42:"http://perrygeo.com/mapnik-wms-server.html";s:7:"updated";s:25:"2006-05-17T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:50:"tag:perrygeo.com,2006-05-17:mapnik-wms-server.html";s:7:"summary";s:13305:"<p>A few months ago, <a href="http://mapnik.org/"> Mapnik</a> came onto my radar and I was immediately impressed with the <a href="http://mapnik.org/maps/">beautiful</a> <a href="http://static.flickr.com/35/106561736_afcdc30ddb_o.png">cartography</a>. But, until recently, it was just a C++ libary with some python bindings that could be used to programmatically build nice map images from shapfiles, geotiffs or postgis layers. There were no common interfaces such as WMS to access mapnik... until last month. Jean Francois Doyon recently added <a href="http://mapnik.org/news/2006/apr/18/wms/">a prototype WMS interface</a> to Mapnik. It runs as a fastcgi script under apache. It is still a bit rough around the edges but the result is well worth a little extra setup effort. </p>
<p>I set up Mapnik as a WMS server recently and would like to share my process and results. This tutorial assumes you already have python, postgresql/postgis, proj4, python imaging library and apache2 already running. The examples are for Ubuntu Dapper Drake.. they may work well on other versions of Ubuntu and Debian but for other unixes (and certainly windows) many things may need to be tweaked.</p>
<p>First off, we have to install the base mapnik libs. These depend on the boost python bindings and the whole compile process is very simple (if a bit slow) in Ubuntu:</p>
<blockquote>
<div class="highlight"><pre>sudo apt-get install \
 libboost-python1.33.1 libboost-python-dev \
 libboost-regex1.33.1 libboost-regex-dev \
 libboost-serialization-dev \
 libboost-signals1.33.1 libboost-signals-dev \
 libboost-thread1.33.1 libboost-thread-dev \
 libboost-program-options1.33.1 libboost-program-options-dev \
 libboost-filesystem1.33.1 libboost-filesystem-dev \
 libboost-iostreams1.33.1 libboost-iostreams-dev
cd ~/src
svn checkout svn://svn.berlios.de/mapnik/trunk mapnik
cd mapnik
python scons/scons.py PYTHON=/usr/bin/python PGSQL_INCLUDES=/usr/local/include/postgresql \
  PGSQL_LIBS=/usr/local/lib/postgresql BOOST_INCLUDES=/usr/include/boost BOOST_LIBS=/usr/lib
sudo python scons/scons.py install PYTHON=/usr/bin/python PGSQL_INCLUDES=/usr/local/include/postgresql \
  PGSQL_LIBS=/usr/local/lib/postgresql BOOST_INCLUDES=/usr/include/boost BOOST_LIBS=/usr/lib
sudo ldconfig
</pre></div>


</blockquote>
<p>Now we have to set up some additional libs in order to run the WMS:</p>
<blockquote>
<div class="highlight"><pre>cd ~/src
wget http://easynews.dl.sourceforge.net/sourceforge/jonpy/jonpy-0.06.tar.gz
tar -xzvf jonpy-0.06.tar.gz
cd jonpy-0.06/
sudo python setup.py install









# copy the ogcserver stuff into its own dir
mkdir /opt/mapnik; cd /opt/mapnik
cp ~/src/mapnik/utils/ogcserver/* .
</pre></div>


</blockquote>
<p>Now you'll want to edit the <strong>ogcserver.conf</strong> file and change the following lines. The <em>module</em> is essentially the name of a python file (minus the .py extension) that we'll create later. The height and width just cutoff the maximum possible image size that can be requested.</p>
<blockquote>
<div class="highlight"><pre>  <span class="k">module</span>=<span class="n">worldMapFactory</span>
  <span class="n">maxheight</span>=<span class="mi">2048</span>
  <span class="n">maxwidth</span>=<span class="mi">2048</span>
</pre></div>


</blockquote>
<p>Create our "map factory" module defining data sources, styles, etc.( <strong>worldMapFactory.py</strong> ). Most of this configuration is explained in the mapnik docs and well-commented examples. One thing to note is that the shapefile must be specified <em>without</em> the .shp extension :</p>
<blockquote>
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">mapnik.ogcserver.WMS</span> <span class="kn">import</span> <span class="n">BaseWMSFactory</span>
<span class="kn">from</span> <span class="nn">mapnik</span> <span class="kn">import</span> <span class="o">*</span>

<span class="k">class</span> <span class="nc">WMSFactory</span><span class="p">(</span><span class="n">BaseWMSFactory</span><span class="p">):</span>

        <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
                <span class="n">BaseWMSFactory</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
                <span class="n">sty</span> <span class="o">=</span> <span class="n">Style</span><span class="p">()</span>

      <span class="n">rl</span> <span class="o">=</span> <span class="n">Rule</span><span class="p">()</span>
      <span class="n">rl</span><span class="o">.</span><span class="n">symbols</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">PolygonSymbolizer</span><span class="p">(</span><span class="n">Color</span><span class="p">(</span><span class="mi">248</span><span class="p">,</span><span class="mi">216</span><span class="p">,</span><span class="mi">136</span><span class="p">)))</span>
      <span class="n">rl</span><span class="o">.</span><span class="n">symbols</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">LineSymbolizer</span><span class="p">(</span><span class="n">Color</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="mi">1</span><span class="p">))</span>
                <span class="n">sty</span><span class="o">.</span><span class="n">rules</span><span class="o">.</span><span class="n">append</span><span class="p">(</span> <span class="n">rl</span> <span class="p">)</span>

      <span class="bp">self</span><span class="o">.</span><span class="n">register_style</span><span class="p">(</span><span class="s">&#39;style1&#39;</span><span class="p">,</span> <span class="n">sty</span><span class="p">)</span>

                <span class="n">lyr</span> <span class="o">=</span> <span class="n">Layer</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;world_borders&#39;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;shape&#39;</span><span class="p">,</span> \
                            <span class="nb">file</span><span class="o">=</span><span class="s">&#39;/opt/data/world_borders/world_borders&#39;</span><span class="p">)</span>

                <span class="n">lyr</span><span class="o">.</span><span class="n">styles</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;style1&#39;</span><span class="p">)</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">register_layer</span><span class="p">(</span><span class="n">lyr</span><span class="p">)</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">finalize</span><span class="p">()</span>
</pre></div>


</blockquote>
<p>Now we need to set up apache2 to handle fastcgi:</p>
<blockquote>
<div class="highlight"><pre>sudo apt-get install libapache2-mod-fcgid
sudo a2enmod fcgid
</pre></div>


</blockquote>
<p>... and add some config lines to the apache config files, usually /etc/apache/httpd.conf but, in the case of this Ubuntu install, <strong>/etc/apache2/sites-enabled/default</strong> :</p>
<blockquote>
<div class="highlight"><pre>        ScriptAlias /fcgi-bin/ /usr/lib/fcgi-bin/
        &lt; Directory &quot;/usr/lib/fcgi-bin&quot; &gt;
                AllowOverride All
                Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
                Order allow,deny
                Allow from all
                SetHandler fastcgi-script
        &lt; Directory&gt;
</pre></div>


</blockquote>
<p>Create the fast-cgi directory refered to by apache</p>
<blockquote>
<div class="highlight"><pre>sudo mkdir /usr/lib/fcgi-bin
</pre></div>


</blockquote>
<p>Now create the actual server script as <strong>/usr/lib/fcgi-bin/wms</strong></p>
<blockquote>
<table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span class="c">#!/usr/bin/env python</span>

<span class="c"># Your mapnik dir containing the map factory </span>
<span class="c"># must be in the python path!</span>

<span class="kn">import</span> <span class="nn">sys</span>
<span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;/opt/mapnik&#39;</span><span class="p">)</span>

<span class="kn">from</span> <span class="nn">mapnik.ogcserver.cgiserver</span> <span class="kn">import</span> <span class="n">Handler</span>
<span class="kn">import</span> <span class="nn">jon.fcgi</span> <span class="kn">as</span> <span class="nn">fcgi</span>

<span class="k">class</span> <span class="nc">WMSHandler</span><span class="p">(</span><span class="n">Handler</span><span class="p">):</span>
    <span class="n">configpath</span> <span class="o">=</span> <span class="s">&#39;/opt/mapnik/ogcserver.conf&#39;</span>

<span class="n">fcgi</span><span class="o">.</span><span class="n">Server</span><span class="p">({</span><span class="n">fcgi</span><span class="o">.</span><span class="n">FCGI_RESPONDER</span><span class="p">:</span> <span class="n">WMSHandler</span><span class="p">})</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</pre></div>
</td></tr></table>

</blockquote>
<p>Finally restart the apache server </p>
<blockquote>
<div class="highlight"><pre>sudo /etc/init.d/apache2 force-reload
</pre></div>


</blockquote>
<p>Now you can access it with a WMS request like so:</p>
<blockquote>
<div class="highlight"><pre><span class="nt">http</span><span class="o">://</span><span class="nt">localhost</span><span class="o">/</span><span class="nt">fcgi-bin</span><span class="o">/</span><span class="nt">wms</span><span class="o">?</span><span class="nt">VERSION</span><span class="o">=</span><span class="nt">1</span><span class="nc">.1.1</span><span class="o">&amp;</span><span class="nt">REQUEST</span><span class="o">;=</span><span class="nt">GetMap</span><span class="o">&amp;</span><span class="nt">LAYERS</span><span class="o">;=</span><span class="nt">world_borders</span><span class="o">&amp;</span>
<span class="nt">FORMAT</span><span class="o">=</span><span class="nt">image</span><span class="o">/</span><span class="nt">png</span><span class="o">&amp;</span><span class="nt">SRS</span><span class="o">;=</span><span class="nt">EPSG</span><span class="nd">:4326</span><span class="o">&amp;</span><span class="nt">STYLES</span><span class="o">;=&amp;</span><span class="nt">BBOX</span><span class="o">;=</span><span class="nt">-81</span><span class="nc">.54375</span><span class="o">,</span><span class="nt">-58</span><span class="nc">.3125</span><span class="o">,</span><span class="nt">-59</span><span class="nc">.04375</span><span class="o">,</span><span class="nt">-47</span><span class="nc">.0625</span><span class="o">&amp;</span>
<span class="nt">EXCEPTIONS</span><span class="o">=</span><span class="nt">application</span><span class="o">/</span><span class="nt">vnd</span><span class="nc">.ogc.se_inimage</span><span class="o">&amp;</span><span class="nt">width</span><span class="o">;=</span><span class="nt">600</span><span class="o">&amp;</span><span class="nt">height</span><span class="o">;=</span><span class="nt">300</span>
</pre></div>


</blockquote>
<p><img alt="" src="/assets/img/mapnik.png" /></p>
<p>Compare the linework with a comparable WMS service with UMN Mapserver on the backend. I'll let the results speak for themselves...</p>
<p><img alt="" src="/assets/img/mapserv.png" /></p>
<p>Even if it's map rendering is smooth, Mapnik's WMS server is still a bit rough around the edges:</p>
<ul>
<li>
<p>It does not support GetFeatureInfo requests</p>
</li>
<li>
<p>The server has trouble with extra parameters. For instance some WMS clients like mapbuilder like to 
tag on an extra 'UNIQUEID' parameter to the URL and this causes an unnecessary error with mapnik's WMS server.</p>
</li>
<li>
<p>Mapnik intself does not support reprojection </p>
</li>
<li>
<p>It only supports shapefiles, geotiffs and postgis layers.</p>
</li>
</ul>
<p>The readme.txt file in docs/ogcserver/ directory of the recent mapnik SVN checkout has a full list of known features and caveats so refer to them for the complete story.</p>
<p>But, all in all, I am <em>very</em> impressed with the quality of the Mapnik WMS server. I figured that, since Mapnik's goal has been high-quality cartographic output, speed would be sacrificed but I didn't notice any significant lag; on the contrary I think it was actually about on-par with Mapserver running as a CGI. If it was any slower, I didn' t notice it immediately. But then again it was only working with a relatively small shapefile and I was the only user. I'd like to do more rigourous stress tests on the Mapnik WMS to see how it compares to Mapserver and Geoserver under varying loads with greater volumes of data.</p>";}i:89;a:6:{s:5:"title";s:35:"Educational ways to waste some time";s:4:"link";s:60:"http://perrygeo.com/educational-ways-to-waste-some-time.html";s:7:"updated";s:25:"2006-05-12T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:68:"tag:perrygeo.com,2006-05-12:educational-ways-to-waste-some-time.html";s:7:"summary";s:1854:"<p>It's always great to find fun internet-based games that actually challenge you in "real world" skills.  (And no, working on your wizard's Ether Flame spell in EverQuest is NOT a real world skill). After all, if you going to waste some time, it might as well be educational, right. Can you tell that my mother is a school teacher?  Happy Mothers day!</p>
<p>Anyways, these might be old news to some folks but I've found two fun games that will keep your brain fresh.</p>
<p>First, there is <a href="http://geosense.net">GeoSense</a>. This is a fanstastic interactive game that pits users one-on-one in a timed geography quiz. You're given a city and country and you have 10 seconds to click the map. The player with the best combination of speed and accuracy wins. Given <a href="http://news.nationalgeographic.com/news/2006/05/0502_060502_geography.html">American youth's horrible knowledge of geography</a>, this site could be really helpful.  I would recommend it to children of all ages if it weren't for the chatroom being infested with pubescent teen sex fiends. Just go use use myspace or something...</p>
<p>Secondly, for you Python programmers out there, there is the <a href="http://www.pythonchallenge.com/">Python Challenge</a>, a surprisingly challenging and mind-boggling course of puzzles that can be solved with Python. Actually some people have solved them with UNIX shell commands, perl or ruby, but many of the hints are python specific. They require a good dose of logic, persistence, knowledge of python libraries and a knack for finding patterns. Basically your goal is, given a minimal set of hints to find and process the data that will lead you to the next URL. I'm on level 9 right now and, well, I'm not going to admit to anyone how long it took to get there. Addictively challenging...</p>
<p>Thats it for now. Have fun.</p>";}i:90;a:6:{s:5:"title";s:43:"The impact of urban areas on CO2 emmissions";s:4:"link";s:68:"http://perrygeo.com/the-impact-of-urban-areas-on-co2-emmissions.html";s:7:"updated";s:25:"2006-05-06T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:76:"tag:perrygeo.com,2006-05-06:the-impact-of-urban-areas-on-co2-emmissions.html";s:7:"summary";s:1470:"<p>Increases in atmoshperic carbon dioxide (CO2) due to vehicle emmisions are considered one of the most important human-induced factors of climate change. Conventional wisdom would say that urban areas, with their huge populations, dense road networks and congested freeways, are the biggest offenders. This is true to some extent. But, viewed from a different perspective, the <em>per-capita</em> CO2 emmissions for these urban areas can be considerably less than surrounding rural and suburban areas.</p>
<p>Travelmatter.org has posted <a href="http://www.travelmatters.org/maps/regional/"> a series of maps</a> comparing these two conflicting views. Here's a sample from Chicago that demonstrates the sharp dichotomy; both entirely accurate but different ways of analyzing the same data:</p>
<p><img alt="" src="/assets/img/co2-map-chi-med.gif" /></p>
<p>In every case, the <em>total</em> CO2 emmissions are much greater in dense urban areas. But, <em>per-capita</em>, the urban areas have much lower emmissions, sometimes dramatically lower. This second view indicates, as <a href="http://www.worldchanging.com/archives/004390.html"> WorldChanging </a> points out, that living in denser neighborhoods can reduce your climate impact. It makes sense that living closer to the places you need to go on a daily basis and having more access to public transportation would reduce the emmissions impact. Maybe cities are "greener" than most of us percieve them to be? </p>";}i:91;a:6:{s:5:"title";s:21:"USGS Seamless is back";s:4:"link";s:46:"http://perrygeo.com/usgs-seamless-is-back.html";s:7:"updated";s:25:"2006-05-05T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:54:"tag:perrygeo.com,2006-05-05:usgs-seamless-is-back.html";s:7:"summary";s:534:"<p>Two weeks after I first noticed something had gone awry with the USGS Seamless site, they appear to have fixed their server issues. As of this morning, the interactive <a href="http://seamless.usgs.gov/website/seamless/viewer.php">data viewer and download interface</a> is fully functionaly as far as I can tell. </p>
<p>Now be gentle on their server. Rumour has it, if you download more than 3 DEMs at a time, the server might go down for another 2 weeks! Just kidding... everything seems to be working fine. Download away....</p>";}i:92;a:6:{s:5:"title";s:42:"What’s going on with seamless.usgs.gov ?";s:4:"link";s:60:"http://perrygeo.com/whats-going-on-with-seamlessusgsgov.html";s:7:"updated";s:25:"2006-04-25T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:68:"tag:perrygeo.com,2006-04-25:whats-going-on-with-seamlessusgsgov.html";s:7:"summary";s:2501:"<p>Since April 21, I have not been able to view or extract any data from the USGS Seamless site, ostensibly the central distribution center for the US National Map. The site has been changing rapidly from day to day ever since and it seems that changes are underway so at least we know someone is working on it.. or hacking it to pieces. The last day or two they appear to have given up and are just redirecting people to gisdata.usgs.gov which, of course, has no mention of the outage on the home page.</p>
<p>When I develop an internet application, even if it's only used by a few people, I usually seperate the development version from the stable, live version to minimize any downtime. And if you absolutely can't keep the app running, at least put a big banner on the page indicating that the system is down so people (like me) don't waste half an hour trying to figure out what they're doing wrong.  Is this too much to ask of the USGS? They are supposed to be the official portal for accessing our nation's spatial data, right? And we're not talking about a small server hiccup here, it has been down since at least April 21st with no public indication that problems are occuring on the site. </p>
<p>I just recieved an email this morning from the USGS web mapping admin. The emphasis is mine:</p>
<blockquote>
<p>We apologize for any issues you may have experienced lately. The Seamless server, and all related map services will be unavailable for at least the next few days. During this time, <strong>the sites may still appear to be functioning.</strong> Some may ask for a password, and others may not show up at all. Normally our status messages are posted at http://seamless.usgs.gov. However, since this server has been affected by this outage, users are being re-directed to http://gisdata.usgs.net. We are in the process of posting a message here as well, which you will be able to monitor for any updates. We are estimating that the site will be available again by <strong>Monday May 1st 2006.</strong> Our team is working diligently to have this service available as soon as possible. We appreciate you patience during this time. </p>
</blockquote>
<p>I really shouldn't be surprised that a government agency botched it so badly; that seems to be the norm here in the US.  But I've really come to rely on the seamless site for alot of data and it seems that 10 days of downtime for the <em>sole</em> distributor of our seamless national spatial data archive is a bit... amateur. </p>";}i:93;a:6:{s:5:"title";s:54:"The distinction between open source and open standards";s:4:"link";s:79:"http://perrygeo.com/the-distinction-between-open-source-and-open-standards.html";s:7:"updated";s:25:"2006-04-23T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:87:"tag:perrygeo.com,2006-04-23:the-distinction-between-open-source-and-open-standards.html";s:7:"summary";s:2657:"<p>Time and time again I see <em>open source</em> and <em>open standards</em> mentioned in the <a href="http://veryspatial.com/?p=802">same</a> <a href="http://www.ced.org/projects/ecom.shtml#open">sentence</a>. While I'm a strong proponet of both, it is a bit disheartening to see how closely intertwined the two concepts are in the eyes of many GIS folks. </p>
<p>Open source refers to <em>software</em> distributed with a license that allows access to view and modify the source code. There are also some <a href="http://www.opensource.org/index.php">other criteria</a> but unrestricted access to the source code is the key component. </p>
<p>Open standards refers to <em>software-neutral</em> specifications, usually developed collaboratively,  to accomplish a technical goal. In the GIS world, this typically means <a href="http://www.opengeospatial.org/specs/?page=specs">OpenGIS specifications</a> for sharing data across a network (WMS/ WFS/ WCS), data formats (GML), or for working with spatial data in a relational database (Simple Features Spec for SQL).  We could arguably include pseudo-open specifications for data such as <a href="http://www.esri.com/library/whitepapers/pdfs/shapefile.pdf">shapfiles</a> and <a href="http://earth.google.com/kml/kml_intro.html">KML</a>.</p>
<p>Open source applications do not always conform to open standards. Standards-compliant software does not necessarily have to be open source. So why are the two often mentioned in the same breath as though they were synonymous? Perhaps open source software is perceived as being "ahead" of other types of software in terms of adoption of standards; and maybe that's true. But there are many proprietary software companies that have devoted alot of effort towards making their software communicate via open standards and their efforts should not go unnoticed (<a href="http://www.esri.com/software/standards/ogc-support.html">ESRI</a> and <a href="http://www.cadcorp.com/">Cadcorp</a> just to name the two I'm familiar with). </p>
<p>The promise of open standards is that anyone can develop and use compliant applications that can easily interoperate regardless of the chosen software package. While that promise is far from being fully realized, associating open standards with a particular type of software will not get us any closer.  </p>
<p><strong>Update</strong>: Or maybe we <em>are</em> getting close... check out <a href="http://geospatial.blogs.com/geospatial/2006/04/interoperabilit.html">Geoff Ziess' post</a> on the OGC interoperability demonstration in Tampa. Ten vendors interoperating and sharing data in real time... this is what it's all about.</p>";}i:94;a:6:{s:5:"title";s:63:"Animating Static Maps - The Geologic Evolution of North America";s:4:"link";s:86:"http://perrygeo.com/animating-static-maps-the-geologic-evolution-of-north-america.html";s:7:"updated";s:25:"2006-04-11T00:00:00-07:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:94:"tag:perrygeo.com,2006-04-11:animating-static-maps-the-geologic-evolution-of-north-america.html";s:7:"summary";s:2690:"<p>The Cartography blog <a href="http://ccablog.blogspot.com/2006/04/paleogeographic-maps.html"> recently talked about </a> a series of <a href="http://jan.ucc.nau.edu/%7Ercb7/nam.html">excellent Paleogeographic maps</a> developed by Dr. Ron Blakey at Northern Arizona University.  Ever since I first studied geology, I had dreamed of an atlas that would clearly and visually demostrate how our current land masses came to be.  This time series of maps focuses on North America and the geologic events that shaped have shaped it for the last 500 million years. Truly fascinating and excellent work. I encourage everyone to check out the site and read a little about it as well as <a href="http://bldgblog.blogspot.com/2006/04/assembling-north-america_11.html"> the narrative by Geoff Manaugh</a> . </p>
<p><img alt="" src="/assets/img/29.gif" /></p>
<p>Now it occured to me that a time series of maps lends itself very well to an animated sequence. While I am no graphic artist, I have done a few projects in the past that required stiching together a time-series of maps into an animated gif. The process is fairly simple:</p>
<ol>
<li>
<p>Download or create each map you want to include in the series. For best results, all maps should have the same size and extents.</p>
</li>
<li>
<p>Rename the images in alpha-numeric order (001.jpg, 002.jpg.... 045.jpg) </p>
</li>
<li>
<p>Install <a href="http://www.imagemagick.org/script/index.php">ImageMagick</a> - a collection of efficient command line tools for image processing. It supports almost every common image format available these days.</p>
</li>
<li>
<p>run the <em>convert</em> command to create the animated gif:</p>
</li>
</ol>
<div class="highlight"><pre>convert -geometry 500x483 -delay 200 -loop 0 *.jpg mymovie.gif
</pre></div>


<p>The geometry is simply the WIDTHxHEIGHT dimensions of the output image (it helps if this is proportional to the original image dimensions). </p>
<p>The delay parameter specifies how many hundreths of a second delay occurs between each frame. </p>
<p>The loop parameter, when set to zero, indicates the gif will loop infinitely.</p>
<p>The *.jpg, if your operating environment supports wildcards, will take each of the jpg images in the current directory and stich them into an animated gif named mymovie.gif</p>
<p>Viola! An animated movie from a series of static maps. In the case of the Paleogeologic maps, there were 41 maps which produced a sizable animated gif (about 7.5 MB). You can <a href="/assets/img/geo_evolution.gif">check out the results here</a>. I could watch this play for hours!! Really fascinating stuff.. many thanks to Dr. Ron Blakey for putting this project together.</p>";}i:95;a:6:{s:5:"title";s:44:"LIDAR data processing with open source tools";s:4:"link";s:69:"http://perrygeo.com/lidar-data-processing-with-open-source-tools.html";s:7:"updated";s:25:"2006-04-01T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:77:"tag:perrygeo.com,2006-04-01:lidar-data-processing-with-open-source-tools.html";s:7:"summary";s:4845:"<p>LIDAR data is certainly a hot technology these days.   LIght Detection And Ranging data can be used to create extremely detailed terrain models but there are lots of barriers to using LIDAR data effectively. <a href="http://lidar.cr.usgs.gov/"> USGS Center for LIDAR Information Coordination and Knowledge </a> was put in place to "<em>facilitate data access, user coordination and education of lidar remote sensing for scientific needs</em>".  </p>
<p>Beyond the sheer size of the datasets and the knowledge and hardware required to process them, software is a big issue. In the realm of open-source GIS tools, there are many applications (GRASS being the most prominent) for dealing with elevation point data and processing it into more meaningful products such as elevation DEMs and contours. </p>
<p>Usually the data comes as simple ASCII text files and the x,y and z values are easily extracted from such a file. But take a look at the USGS data distribution site and you'll notice some of the datasets are distributed as <a href="http://www.lasformat.org/">LAS binary files</a>. It makes sense to store such massive datasets in binary so I started looking for some LAS conversion tools.So after some searching, I found a bunch of proprietary products for working with LAS but no open source tools. Luckily, the format is <a href="http://www.lasformat.org/documents/ASPRS%20LAS%20Format%20Documentation%20-%20V1.1%20-%2003.07.05.pdf">well documented</a> thanks to the efforts by the ASPRS to make it an open specification.</p>
<p>So dusting off my notes about parsing binary files in python, I set out to create a python module for extracting LIDAR data from LAS files. The LAS format contains a header which needs to be parsed first in order to read the point cloud. Once you have the header info, you can scan your way through the dataset to pick out the x,y,z values. </p>
<p>Here's an example of the python interface that will read the first 10,000 points into a 2D shapefile with the elevation as a attribute in the dbf:</p>
<blockquote>
<div class="highlight"><pre><span class="kn">import</span> <span class="nn">pylas</span>
<span class="n">infile</span> <span class="o">=</span> <span class="s">&#39;sanand000001.las&#39;</span>
<span class="n">outfile</span> <span class="o">=</span> <span class="s">&#39;lidar.shp&#39;</span>
<span class="n">header</span> <span class="o">=</span> <span class="n">pylas</span><span class="o">.</span><span class="n">parseHeader</span><span class="p">(</span><span class="n">infile</span><span class="p">)</span>
<span class="n">pylas</span><span class="o">.</span><span class="n">createShp</span><span class="p">(</span><span class="n">outfile</span><span class="p">,</span> <span class="n">header</span><span class="p">,</span> <span class="n">numpts</span><span class="o">=</span><span class="mi">10000</span><span class="p">,</span> <span class="n">rand</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</pre></div>


</blockquote>
<p>The issue I struggled with is the sheer size of these datasets. A USGS quarter quad can contain 10 million points which is an excessive number of points to create, say,  a 10 meter DEM over such a small area. Clearly there was a need to extract a subset of this dataset but just taking the points sequentially gives you a subset of the total area. So, by default, pylas randomly scans the data to pull the number of specified points so that the point cloud could cover the entire area (at a much lower point density). Without numpts specified, it will randomly select 1/2000th of the total number.</p>
<p>So the simplified interface to make a more manageable lidar shapefile would be:</p>
<blockquote>
<div class="highlight"><pre>header = pylas.parseHeader(infile)
pylas.createShp(outfile, header)
</pre></div>


</blockquote>
<p>Once the shapefile is created, you can bring it into GRASS to do the processing to generate DEMs, contours and other derived elevation products:</p>
<blockquote>
<div class="highlight"><pre>v.in.ogr dsn=lidar.shp layer=lidar output=lidar
g.region vect=lidar
g.region res=10
v.surf.rst input=lidar elev=lidar_dem zcolumn=elev

# Launch the interactive 3D viewer
nviz lidar_dem
</pre></div>


</blockquote>
<p><img alt="" src="/assets/img/nviz_lidar.png" /></p>
<p>Of course the method I just described is very simplistic and does not even come close to utilizing the full potential of the LIDAR point cloud, but it's a start.</p>
<p>The pylas.py module can be <a href="http://pylas.googlecode.com/svn/trunk/pylas.py">downloaded here</a>. The code has worked for me on the few datasets I've tested it with but it should certainly be considered a rough-cut, alpha product. There is much room for improvement and, of course, if you have any suggestions or contributions, please get in touch.</p>";}i:96;a:6:{s:5:"title";s:11:"My Top Ten'";s:4:"link";s:35:"http://perrygeo.com/my-top-ten.html";s:7:"updated";s:25:"2006-03-26T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:43:"tag:perrygeo.com,2006-03-26:my-top-ten.html";s:7:"summary";s:8728:"<p>Web Mapping Services (WMS) are not always my prefered option for accessing data; relying on a remote server to generate a pretty picture of the data is hardly a substitute for having the raw data in hand. But for many cases, I just need a decent looking basemap image and don't want to download gigabytes of data, especially if that data is updated frequently. </p>
<p>Software like GeoServer and Mapserver are making it easier to publish data via WMS and the number of WMS servers is surely growing... but how do you find them? There is no central registry for WMS servers but efforts like the <a href="http://www.refractions.net/white_papers/ogcsurvey/">refractions research ogc survey</a>, <a href="http://www.mapdex.org/wms_list.cfm">mapdex</a> and a few <a href="http://chris.narx.net/2006/01/19/wms-service-mining/">google tricks</a> are making it easier to find data distributed via WMS.  After many hours digging through WMS services to find the ones that suite my mapping needs, I've come across a number of gems that I use time and time again. Hopefully this will inspire some others to share their secret stash of WMS servers! </p>
<p>(<strong>Update:</strong> <a href="http://my.opera.com/gisuser/blog/show.dml/199960">Anything Geospatial</a> has a great link to a well-organized <a href="http://www.skylab-mobilesystems.com/en/wms_serverlist.html"> WMS server list</a> for public use. Nice. )</p>
<p>You should be able to provide the online resource URL to your favorite WMS client software (my personal choice is  <a href="http://openjump.org/wiki/show/HomePage">openjump</a>) and the client should display the list of layers available from that service. </p>
<p>If you're contructing WMS URLs "by hand" or in a browser, you can do a capabilities request (the online resource URL with _service=WMS?request=GetCapabilities _ appended to it) which will return an XML document describing the available layers, image formats, projections,etc. Take a look at the image src for any of the thumbnails below to see how the map request is constructed.</p>
<ol>
<li>TerraServer Digital Raster Graphic (DRG): USGS Topo Quads
 <strong> Online Resource URL </strong> : _ http://terraservice.net/ogcmap.ashx? _   </li>
</ol>
<p><strong> Layer Name </strong> : <em>DRG</em>
<img alt="" src="http://terraservice.net/ogcmap.ashx?VERSION=1.1.1&amp;SERVICE=wms&amp;request=GetMap&amp;LAYERS=DRG&amp;FORMAT=jpeg&amp;styles=&amp;SRS=EPSG:4326&amp;BBOX=-124.1,41.2,-123.9,41.4&amp;WIDTH=150&amp;HEIGHT=150" /></p>
<ol>
<li>TerraServer Digital Ortho Photo Quads (DRG): Black and white aerial photos for the US
 <strong> Online Resource URL </strong> : _ http://terraservice.net/ogcmap.ashx? _   </li>
</ol>
<p><strong> Layer Name </strong> : <em>DOQ</em>
<img alt="" src="http://terraservice.net/ogcmap.ashx?VERSION=1.1.1&amp;SERVICE=wms&amp;request=GetMap&amp;LAYERS=DOQ&amp;FORMAT=jpeg&amp;styles=&amp;SRS=EPSG:4326&amp;BBOX=-124.1,41.2,-123.9,41.4&amp;WIDTH=150&amp;HEIGHT=150" /></p>
<ol>
<li>NASA Landsat Imagery
 The Landsat mosaic is available in fase color (default) or in natural color (style=visual) as shown below.   </li>
</ol>
<p><strong> Online Resource URL </strong> : <em>http://onearth.jpl.nasa.gov/wms.cgi?</em>   </p>
<p><strong> Layer Name </strong> : <em>global_mosaic</em> 
<img alt="" src="http://onearth.jpl.nasa.gov/wms.cgi?VERSION=1.1.1&amp;SERVICE=wms&amp;request=GetMap&amp;LAYERS=global_mosaic&amp;FORMAT=image/png&amp;styles=visual&amp;SRS=EPSG:4326&amp;BBOX=-124.1,41.2,-123.9,41.4&amp;WIDTH=150&amp;HEIGHT=150" /></p>
<ol>
<li>45-minute Weather Radar Images (NEXRAD Base Reflectivity).
Since this is a dynamic data source, the image below may look really boring (ie blank) if there's no storms over the Continental US.   </li>
</ol>
<p><strong> Online Resource URL </strong> : <em>http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi?</em>   </p>
<p><strong> Layer Name </strong> : <em>nexrad-n0r-m45m</em> </p>
<p><img alt="" src="http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi?VERSION=1.1.1&amp;SERVICE=wms&amp;request=GetMap&amp;LAYERS=nexrad-n0r-m45m&amp;FORMAT=jpeg&amp;styles=&amp;SRS=EPSG:4326&amp;BBOX=-125,25,-65,55&amp;WIDTH=300&amp;HEIGHT=150" /></p>
<ol>
<li>USGS National Landcover
The 30-meter natial landcover dataset. USGS is nice enough to provide a legend, of course.   </li>
</ol>
<p><strong> Online Resource URL </strong> : <em>http://gisdata.usgs.net/servlet/com.esri.wms.Esrimap?ServiceName=USGS_WMS_NLCD&amp;</em>   </p>
<p><strong> Layer Name </strong> : <em>US_NLCD</em> </p>
<p><img alt="" src="http://gisdata.usgs.net/servlet/com.esri.wms.Esrimap?ServiceName=USGS_WMS_NLCD&amp;request=GetMap&amp;LAYERS=US_NLCD&amp;FORMAT=image/png&amp;SRS=EPSG:4326&amp;BBOX=-124.1,41.2,-123.9,41.4&amp;WIDTH=150&amp;HEIGHT=150" /></p>
<p><img alt="" src="http://gisdata.usgs.net/Image_Library/legends/Legend_NLCD5.png" /></p>
<ol>
<li>USGS National Elevation - Shaded Relief
 <strong> Online Resource URL </strong> : <em>http://gisdata.usgs.net:80/servlet/com.esri.wms.Esrimap?servicename=USGS_WMS_NED&amp;</em>   </li>
</ol>
<p><strong> Layer Name </strong> : <em>US_NED_Shaded_Relief</em> 
<img alt="" src="http://gisdata.usgs.net:80/servlet/com.esri.wms.Esrimap?servicename=USGS_WMS_NED&amp;request=GetMap&amp;LAYERS=US_NED_Shaded_Relief&amp;FORMAT=image/jpeg&amp;SRS=EPSG:4326&amp;BBOX=-124.1,41.2,-123.9,41.4&amp;WIDTH=150&amp;HEIGHT=150" /></p>
<ol>
<li>USGS Reference Maps 
 <strong> Online Resource URL </strong> : <em>http://gisdata.usgs.net:80/servlet/com.esri.wms.Esrimap?servicename=USGS_WMS_REF&amp;</em>   </li>
</ol>
<p><strong> Layer Names </strong> : <em>States,County,Roads,Route_Numbers,Streams,Federal_Lands</em> 
<img alt="" src="http://gisdata.usgs.net:80/servlet/com.esri.wms.Esrimap?servicename=USGS_WMS_REF&amp;request=GetMap&amp;LAYERS=States,County,Roads,Route_Numbers,Streams,Federal_Lands&amp;FORMAT=image/png&amp;SRS=EPSG:4326&amp;BBOX=-124.1,41.2,-123.9,41.4&amp;WIDTH=150&amp;HEIGHT=150" /></p>
<ol>
<li>Life Mapper 
Besides the standard WMS paramters, some services can take extra parameters in order to render a map. In this excellent service, LifeMapper requires that you provide the species name and it will render maps of known species locations and modelled distributions. Here's an example of the distribution of Black Bear (ie. <em>Ursus americanus</em>) over central california   </li>
</ol>
<p><strong> Online Resource URL </strong> : <em>http://www.lifemapper.org/Services/WMS/?ScientificName=Ursus%20americanus&amp;</em>   </p>
<p><strong> Layer Names </strong> : <em>Species Distribution Models,Political Boundaries,Species Data Points</em> </p>
<p><img alt="" src="http://www.lifemapper.org/Services/WMS/?Version=1.1.0&amp;Request=GetMap&amp;width=150&amp;height=150&amp;Bbox=-124.1,35.4,-118.1,41.4&amp;Layers=Species%20Distribution%20Models,Political%20Boundaries,Species%20Data%20Points&amp;Styles=&amp;ScientificName=Ursus%20americanus&amp;SRS=EPSG:4326&amp;format=image/gif" /></p>
<ol>
<li>MODIS Daily Satellite Imagery
 <strong> Online Resource URL </strong> : <em>http://wms.jpl.nasa.gov/wms.cgi?</em>   </li>
</ol>
<p><strong> Layer Names </strong> : <em>daily_terra, daily_aqua</em> </p>
<p>Terra 
Aqua </p>
<p><img alt="" src="http://wms.jpl.nasa.gov/wms.cgi?request=GetMap&amp;LAYERS=daily_terra&amp;FORMAT=image/png&amp;SRS=EPSG:4326&amp;BBOX=-124.1,35.4,-118.1,41.4&amp;WIDTH=150&amp;HEIGHT=150&amp;styles=" /></p>
<p><img alt="" src="http://wms.jpl.nasa.gov/wms.cgi?request=GetMap&amp;LAYERS=daily_aqua&amp;FORMAT=image/png&amp;SRS=EPSG:4326&amp;BBOX=-124.1,35.4,-118.1,41.4&amp;WIDTH=150&amp;HEIGHT=150&amp;styles=" /></p>
<ol>
<li>SRTMPlus 90 Meter DEM
The image below doesn't make for a very good basemap OR a very good DEM for analytical purposes since all the values are scaled to an 8-bit color depth. However, JPL also offers this layer as an integer (16bit) GeoTIFF (Use <em>format=image/geotiff</em> and <em>styles=short_int</em>), so this can be a valuable way to quickly grab a DEM for a given region. 
 <strong> Online Resource URL </strong> : <em>http://wms.jpl.nasa.gov/wms.cgi?</em>   </li>
</ol>
<p><strong> Layer Names </strong> : <em>srtmplus</em> 
<img alt="" src="http://wms.jpl.nasa.gov/wms.cgi?request=GetMap&amp;LAYERS=srtmplus&amp;FORMAT=image/png&amp;SRS=EPSG:4326&amp;BBOX=-124.1,35.4,-118.1,41.4&amp;WIDTH=150&amp;HEIGHT=150&amp;styles=" /></p>
<hr />
<p>If you'd like to view these layers interactively, here's a mapserver application which "cascades" the above WMS layers through a single interface. If you're interested in setting up these layers in a mapserver application, check out the <a href="http://perrygeo.net/download/fav_wms.txt">WMS Mapfile </a> for some examples.</p>";}i:97;a:6:{s:5:"title";s:38:"StarSpan for vector-on-raster analysis";s:4:"link";s:63:"http://perrygeo.com/starspan-for-vector-on-raster-analysis.html";s:7:"updated";s:25:"2006-02-17T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:71:"tag:perrygeo.com,2006-02-17:starspan-for-vector-on-raster-analysis.html";s:7:"summary";s:4419:"<p>It's amazing how many excellent open source GIS applications are out there just waiting to be discovered. I've been working with open source GIS for over 3 years now and I still find new and interesting software on a regular basis. The latest "Why haven't I heard of this before?" discovery came from the GRASS mailing list discussion on <a href="http://starspan.casil.ucdavis.edu/">StarSpan</a>, a tool developed at University of California at Davis "<em>designed to bridge the raster and vector worlds of spatial analysis using fast algorithms for pixel level extraction from geometry features</em>". </p>
<p>Our research project for the <a href="http://ebm.nceas.ucsb.edu">Ecosystem Based Management group at UCSB</a> is in need of this exact tool in order to extract raster statistics based on a vector watersheds layer. ArcGIS and GRASS both have <em>some</em> of the capabilities we need through the Zonal_Statistics and v.rast.stats functions respectively. However they have their limitations and neither really handles categorical raster summaries by polygon. StarSpan looks like a more efficient option in terms of speed, scriptability and capabilities.</p>
<p>Installation is very smooth. It requires a recent version of GDAL (&gt;= 1.2.6) and GEOS (&gt;= 2.1.2). Once the dependencies are met, compilation on a unix system is as easy as configure, make, make install (There are also Windows binaries available). There is a single command line interface for all the functionality and StarSpan is able to handle all <a href="http://www.gdal.org/formats_list.html">GDAL rasters</a> and <a href="http://www.gdal.org/ogr/ogr_formats.html">OGR vectors</a>.</p>
<p>For classified rasters such as a land cover raster, we'd like to get the number of pixels for each landcover class by watershed. StarSpan creates a nice, normalized csv with three columns; The vector feature id, the raster value, and the number of pixels. There will be up to  (number of features X number of classes) rows.</p>
<blockquote>
<p>starspan --vector watershed.shp --raster landcover.tif --count-by-class landcover_by_watershed.csv</p>
</blockquote>
<p>In order to find the percentage of a given raster class for each watershed, you can bring the csv into a relational database and do a quick SQL query. Here's an example of finding the percentage of cropland (class value is 12) for each watershed:</p>
<blockquote>
<div class="highlight"><pre>SELECT t.fid AS fid, (t.count::numeric / s.total::numeric) * 100 AS percentage_cropland
FROM landcover_by_watershed t,
               (SELECT fid, sum(count) AS total 
                FROM lancover_by_watershed 
                GROUP BY fid) as s 
WHERE t.fid = s.fid
AND t.class = 12;
</pre></div>


</blockquote>
<p>Which gives us...</p>
<blockquote>
<div class="highlight"><pre> fid |      percentage_cropland
-----+------------------------------------------------
   1 | 28.571428571428571429
   2 | 71.428571428571428571
   3 | 36.363636363636363636
   4 | 63.636363636363636364
</pre></div>


</blockquote>
<p>For continuous surfaces such as elevations and slopes, we'll need to get quantitative statistics of those rasters by watershed. StarSpan can easily generate averages, mode, standard deviation, min and max:</p>
<blockquote>
<p>starspan --vector watershed.shp --raster slope.tif --stats slope_stats.csv avg mode stdev min max</p>
</blockquote>
<p>Which outputs a csv with one row per feature identified by feature id and each stat as a column:</p>
<blockquote>
<div class="highlight"><pre>FID,numPixels,avg_Band1,mode_Band1,stdev_Band1,min_Band1,max_Band1
1,25921,34.694822,38.917000,14.491952,0.347465,66.241035
2,21755,7.965552,0.000000,5.484245,0.000000,42.017155
...
</pre></div>


</blockquote>
<p>While I can confirm that these small test cases work very quickly and give us pretty much the exact outputs we need, it will be interesting to see how well it stacks up to ArcGIS and GRASS when it comes to cranking out the big datasets. We'll likely try all three methods and I'll make sure to post the results. </p>
<p>Oh and the comparison between StarSpan and GRASS may become at moot point in the future since there is talk about integrating it with the GRASS project. While a GRASS module would be nice, not everyone has GRASS installed so I would hope the stand-alone version is still maintained since it can deal with pretty much any vector or raster data source.</p>";}i:98;a:6:{s:5:"title";s:49:"Forest Service plans largest land sale in decades";s:4:"link";s:74:"http://perrygeo.com/forest-service-plans-largest-land-sale-in-decades.html";s:7:"updated";s:25:"2006-02-13T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:82:"tag:perrygeo.com,2006-02-13:forest-service-plans-largest-land-sale-in-decades.html";s:7:"summary";s:1309:"<p>The <a href="http://archives.seattletimes.nwsource.com/cgi-bin/texis.cgi/web/vortex/display?slug=landsales11m&amp;date=20060211">Seattle Times is reporting</a> some details on President Bush's "Secure Rural Schools Initiative" which involves the largest US Forest Service land sales in decades in order to pay for rural school and roads. Some 309,421 acres will be up for sale which amounts to only 0.16 % of the 190 million acres managed by the Forest Service.  Most of the parcels are isolated areas bordering private land. </p>
<p>Details and some limited maps of the initiative can be found <a href="http://www.fs.fed.us/land/staff/rural_schools.shtml">here</a> as well as <a href="http://www.fs.fed.us/land/staff/spd.html"> a listing of forest service land</a> that are potentially eligible for sale. </p>
<p>No doubt environmentalists, developers and timber companies will be scrutinizing these pieces of land in the coming months. More details and maps should be available around Feb 28th. Since the Forest Service is required to request public input on the sales, it would be nice if they could provide a GIS version of the maps for download... A public web GIS would inform the process immensely. I'll be keeping an eye out for some detailed GIS data. Let me know if you know of a good source.</p>";}i:99;a:6:{s:5:"title";s:24:"GDAL-based DEM utilities";s:4:"link";s:49:"http://perrygeo.com/gdal-based-dem-utilities.html";s:7:"updated";s:25:"2006-02-08T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:57:"tag:perrygeo.com,2006-02-08:gdal-based-dem-utilities.html";s:7:"summary";s:5917:"<div class="alert alert-error">These DEM tools have been incorporated into GDAL. The code referenced on this page is no longer maintained and I'd highly recommend using <a href="http://www.gdal.org/gdaldem.html">gdaldem</a> instead.</div>

<p>A few months ago, I began looking for some efficient command-line tools to analyze and visualize DEMs. I typically use GRASS for such tasks but GRASS only works with it's native raster format. Sure you can import/export to common formats but that's not as efficient as a single command line tool that could work with the native DEM format, run on systems without GRASS installed and provide easy scriptablity.  </p>
<p>Not having found anything that fit the bill, I decided to port some of the common GRASS DEM modules to C++ using the GDAL libraries. For someone with very little experience with C++, this was surprisingly not that difficult though I learned quite alot along the way.  The result: 3 command line utilities to generate hillshades, slope and aspect maps and 1 excellent utility contributed by Paul Surgeon to apply color ramping to a DEM.</p>
<h3>Installation</h3>
<h4>Requirements</h4>
<p>I built these utilities on Ubuntu Linux. I admittedly have no idea how to compile them on Windows but some folks have confirmed that the hillshade code compiles under VC++. So to get these running under Linux (and presumably other unixes), there are very minimal requirements</p>
<ol>
<li>GDAL shared libraries  </li>
<li>GNU C++ Compiler</li>
</ol>
<h4>Download</h4>
<p>Get the <a href="/download/gdaldemtools_20060207.zip">current source</a> and unzip it.  <em><strong>EDIT </strong></em>: This code is now avaible through my SVN repository : <a href="http://perrygeo.googlecode.com/svn/trunk/demtools/">http://perrygeo.googlecode.com/svn/trunk/demtools/</a>,</p>
<h4>Compiling</h4>
<p>Alas there is no makefile but installation should be fairly painless. To compile the source code under linux, the following commands should take care of it:</p>
<div class="highlight"><pre>g++ hillshade.cpp -lgdal -o hillshade
g++ color-relief.cxx -lgdal -o color-relief
g++ aspect.cpp -lgdal -o aspect
g++ slope.cpp -lgdal -o slope
</pre></div>


<p>The four binaries can then be placed wherever your local binaries reside (typically /usr/local/bin)</p>
<h3>Examples</h3>
<h4>The original DEM</h4>
<p>In this particular example the input DEM is a GeoTIFF but these utilities can use any <a href="http://gdal.maptools.org/formats_list.html">GDAL-supported raster source</a>.</p>
<p><img alt="" src="/assets/img/dem/dem.jpg" /></p>
<h4>Slope</h4>
<p>This command will take a DEM raster and output a 32-bit GeoTiff with slope values. You have the option of specifying the type of slope value you want: degrees or percent slope. In cases where the horizontal units differ from the vertical units, you can also supply a scaling factor.</p>
<div class="highlight"><pre>slope dem.tif slope.tif
</pre></div>


<p><img alt="" src="/assets/img/dem/slope.jpg" /></p>
<h4>Aspect</h4>
<p>This command outputs a 32-bit GeoTiff with values between 0 and 360 representing the azimuth of the terrain.</p>
<div class="highlight"><pre>aspect dem.tif aspect.tif
</pre></div>


<p><img alt="" src="/assets/img/dem/aspect.jpg" /></p>
<h4>Hillshade</h4>
<p>This command outputs an 8-bit GeoTiff with a nice shaded relief effect. It's very useful for visualizing the terrain. You can optionally specify the azimuth and altitude of the light source, a vertical exaggeration factor and a scaling factor to account for differences between vertical and horizontal units.</p>
<div class="highlight"><pre>hillshade dem.tif shade.tif
</pre></div>


<p><img alt="" src="/assets/img/dem/shade.jpg" /></p>
<h4>Color ramps</h4>
<p>After I posted the hillshade utility to the gdal-dev mailing list, there was some discussion about creating color relief maps to supplement the hillshades. Paul Surgeon took up the challenge and created a gdal-based C++ utility to colorize DEMs (or any other single band raster data sources for that matter). The technique is simple and powerful; by using a text-based color configuration file, you can create any range of color ramps for your data. </p>
<div class="highlight"><pre>color-relief dem.tif scale.txt colordem.tif
</pre></div>


<p>Where scale.txt is a text file containting 4 columns per line, the elevation value and the corresponding RGB values:</p>
<div class="highlight"><pre>3500   255 255 255
2500   235 220 175
1500   190 185 135
700    240 250 150
0      50  180  50
-32768 200 230 255
</pre></div>


<p>The colors between the given elevation values are blended smoothly and the result is a nice colorized DEM:
<img alt="" src="/assets/img/dem/colordem.jpg" /></p>
<h4>Color Shaded Relief (blending hillshade and colorized DEM)</h4>
<p>There are two ways I've come up with to blend the hillshade and the colorized DEM:</p>
<ol>
<li>
<p>Using GIMP or Photoshop, open both images, copy the shaded relief, paste on top of the color DEM and adjust the opacity in the layers dialog.</p>
</li>
<li>
<p>If you're publishing to the web with Mapserver, just stack the two images in your mapfile and set the TRANSPARENCY for the hillshade to a value between 30 and 70 depending on your preference</p>
</li>
</ol>
<p>Though both methods work nicely, neither is really ideal since they don't generate a georeferenced tiff.  You can get around this in the GIMP method by creating a <a href="http://gdal.maptools.org/frmt_various.html#WLD">world file (.tfw)</a> for the output tiff. It might be nice, in the future, to do this step programatically but for now...
<img alt="" src="/assets/img/dem/combine.jpg" /></p>
<p>Let me know if you've got any suggestions or comments. The technique for all of these utilities is a simple 3x3 moving window so this code might serve as a good template to develop other raster processing utilities... let me know what you come up with!</p>";}i:100;a:6:{s:5:"title";s:55:"First thoughts on the Open Source Geospatial Foundation";s:4:"link";s:80:"http://perrygeo.com/first-thoughts-on-the-open-source-geospatial-foundation.html";s:7:"updated";s:25:"2006-02-04T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:88:"tag:perrygeo.com,2006-02-04:first-thoughts-on-the-open-source-geospatial-foundation.html";s:7:"summary";s:4265:"<p>Well after a long and productive day in Chicago, the 25 attendees (and a few dozen more from IRC) were able to establish a solid plan for the foundation. Gary Sherman at Spatial Galaxy has <a href="http://spatialgalaxy.net/?p=8">a good overview of the meeting outcome</a> and has set up a very helpful <a href="http://logs.qgis.org/geofoundation/">IRC log</a> of the meeting and the focus group discussions (Go Gary!).  Tyler Mitchell has posted some <a href="http://www1.mapserverfoundation.org/chicago-pics/images.html">photos of the meeting</a>. I attended via IRC and phone for only a few hours so my understanding of the entire meeting is limited but I'll add a few thoughts on what went down.</p>
<p>First of all, the name was decided early on to be the "<em>Open Source Geospatial Foundation</em>". IMO, this name fits very well. Now that Autodesk's open source contribution has <a href="http://www.oreillynet.com/pub/wlg/9055?wlg=yes"> been rebranded</a> from <em>Mapserver Enterprise</em> to <em>MapGuide Open Source</em>, I am glad to see the final chapter in the whole naming debacle! </p>
<p>I was also very interested in the funding discussion. The general consesus seemed to be that the foundation would generate income through sponsorships. The benefits to being a sponsor/supporter of OSGF include official recognition and the obvious PR value in addition to being able to direct your funds to a particular project. It would work something like this: 2/3 of your donation could be directed to a particular software project while 1/3 would go to the foundation itself. Of the 2/3 going to the project, the Project Steering Comittee (PSC) would decide how to best allocate those funds. There was brief discussion of doing some sort of "bounty" system that would allow sponsors to fund a particular feature but this was generally thought to be a bad idea since there are so many aspects of software development that are not "sexy" enough to generate income... like cleaning up and optimizing code, bug fixes, etc. By allowing the PSC to allocate the funds, the focus can be on a solid code base and careful feature additions. Of course those who want to fund specific features can still contract directly with the developers.</p>
<p>One of the ironies of the initial foundation's project membership is that Mapserver (the project that was the center of the original Mapserver Foundation) is not yet a member! While this may seem strange at first, the reasoning is so that the Mapserver community can vote on the matter. Other community-based efforts such as QGIS are likely waiting to hear from their users as well. Once the official statements from the OSGF are released, I suspect there will be a vote from these communities (and others) to decide whether they should join.</p>
<p>The criteria for projects to join the foundation was not entirely clear but it appears that they will be based on the commonalities of the initial projects. Requirements such as licensing and open standards are still foggy but will likely be written in such a way that they don't conflict with any of the initial projects.. a sort of reverse engineering of the criteria if you will. </p>
<p>There were many interesting discussions as far as the implementation of the foundation web presence, the legal protections that would be provided by the foundation, the expected costs of running the foundation, promotion and the structure of the governing board. I'll wait until the official announcement to see how these issues were resolved.</p>
<p>Overall it was an exciting and historic day for open source GIS. Many thanks to all the attendees and IRC participants for all the interesting and productive discussions. The future of the foundation is looking very bright and I look forward to seeing where it's heading in the coming months...</p>
<p>One quick update: Schuyler Erle, who deserves an extra round of thanks for his amazing efforts to keep us IRC attendees informed of the meeting, has some great first-hand <a href="http://mappinghacks.com/index.cgi/2006/02/04#osgeo-foundation">insights on the OSGF</a>.</p>
<p>OK another quick update: The official foundation website will <em>eventually</em> reside at <a href="http://www.osgeo.org">www.osgeo.org</a>. </p>";}i:101;a:6:{s:5:"title";s:30:"Mexico-US Border Crossing Maps";s:4:"link";s:55:"http://perrygeo.com/mexico-us-border-crossing-maps.html";s:7:"updated";s:25:"2006-01-24T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:63:"tag:perrygeo.com,2006-01-24:mexico-us-border-crossing-maps.html";s:7:"summary";s:1640:"<p>Thousands of Mexicans come to the United States every year and, besides the legal troubles of border crossing, they face a tough journey across the desert in order to reach their destination. They have very little information to go on and many die from dehydration as they attempt to find their way through the vast deserts of the american southwest. </p>
<p>A faith-based organization called <a href="http://www.humaneborders.org/about/about_index.html"> Humane Borders</a> is trying to help the situation. They have produced <a href="http://www.humaneborders.org/news/news4.html">a number of maps</a> documenting town locations, roads, water stations, walking distances, cell phone towers and even places where other immigrants have died along the way. This was made possible in part by GIS software donated by ESRI.</p>
<p>I heard today on CNN with Lou Dobbs that the Mexican government is now printing and distributing these maps to citizens. Though the maps will clearly state "Don't Do It! It's Hard! There's Not Enough Water!",  critics are saying the maps aid criminals and will enourage illegal aliens to cross the border. Others have pointed out that, from an economic standpoint, this may benefit the US border patrol since so much of their budget is devoted to aiding sick and injured imigrants and properly taking care of the dead.  Humane Borders is hoping to make people aware of the risks so that they can either choose not to go or be better prepared should they decide to cross.</p>
<p>In any case, it is an interesting example of how geographic information is still so important (and controversial) in our society.</p>";}i:102;a:6:{s:5:"title";s:38:"Geocoding an address list to shapefile";s:4:"link";s:63:"http://perrygeo.com/geocoding-an-address-list-to-shapefile.html";s:7:"updated";s:25:"2006-01-20T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:71:"tag:perrygeo.com,2006-01-20:geocoding-an-address-list-to-shapefile.html";s:7:"summary";s:3323:"<p>Most commercial software comes with fairly elaborate geocoding engines and there are nice geocoding services on the web that can do one-at-a-time geocoding but the <a href="http://www.spatiallyadjusted.com/2006/01/20/batch-geocode-tabular-address-data-via-your-web-browser/">recent post</a> at Spatially Adjusted pointed out a great free resource for batch geocoding named, conveniently enough, <a href="http://www.batchgeocode.com/">Batch Geocode</a>. Just give it a list of tab or pipe delimited addresses and it outputs a table with your original data plus a lat/long for every row.</p>
<p>I have been working on a python script to convert text files into point shapefiles and thought this would be a great chance to put it to work. The only dependency is a recent version of python with the ogr module (see <a href="http://fwtools.maptools.org">FWTools</a> for an easy to install package for windows or linux).</p>
<p>First, I take a list of cities and feed it to batchgeocode.com (a very nice feature is that the yahoo geocoder, on which batchgeocode is based, does not <em>require</em> street level addresses):</p>
<blockquote>
<p>City|State
    Santa Barbara|CA
    Arcata|CA
    New Milford|CT
    Blacksburg|VA</p>
</blockquote>
<p>After running the geocoder, I get back a table with lat/longs:</p>
<blockquote>
<div class="highlight"><pre>City|State|lat|long|precision
Santa Barbara|CA|34.419769|-119.696747|city
Arcata|CA|40.866261|-124.081673|city
New Milford|CT|41.576599|-73.408821|city
Blacksburg|VA|37.229359|-80.413963|city
</pre></div>


</blockquote>
<p>Copy and paste that into a text file and add a second header row that defines the data type for each column. It would be possible to autodetect the column types but there are cases where a string of numeric digits should be kept as a string (for instance the zipcode <em>06776</em> would become <em>6776</em> if it was read as an integer).The possible column types are <em>string, integer,real, x</em> and <em>y</em> with x and y representing the coordinates.</p>
<blockquote>
<div class="highlight"><pre>City|State|lat|long|precision
string|string|y|x|string
Santa Barbara|CA|34.419769|-119.696747|city
Arcata|CA|40.866261|-124.081673|city
New Milford|CT|41.576599|-73.408821|city
Blacksburg|VA|37.229359|-80.413963|city
</pre></div>


</blockquote>
<p>Now run the <em>txt2shp.py</em> utility. The input and output parameters are self-explanatory and the d parameter defines the string used as a delimiter. Notice that the syntax follows the GRASS standard of <em>parameter=value</em>:</p>
<blockquote>
<div class="highlight"><pre>txt2shp.py input=cities.txt output=cities.shp d=&#39;|&#39;
</pre></div>


</blockquote>
<p>And now you've got a shapefile of the geocoded cities! </p>
<p><img alt="Cities Shapefile" src="/assets/img/cities.png" /></p>
<p>The txt2shp.py script can be downloaded <a href="http://perrygeo.net/download/txt2shp.py"> here</a>. Try it out and let me know how  it's working for you.</p>
<p><strong>Update:</strong> In order to generate a .prj file for your output shapefile, you can use the epsg_tr.py utility if you know the EPSG code. Batch Geocoder returns everything in lat/long (presumably with a WGS84 datum?) so you can use EPSG code 4326:</p>
<blockquote>
<p>epsg_tr.py -wkt 4326 &gt; cities.prj</p>
</blockquote>";}i:103;a:6:{s:5:"title";s:26:"KML to Shapefile Scripting";s:4:"link";s:51:"http://perrygeo.com/kml-to-shapefile-scripting.html";s:7:"updated";s:25:"2005-12-11T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:59:"tag:perrygeo.com,2005-12-11:kml-to-shapefile-scripting.html";s:7:"summary";s:2214:"<p>Christian Spanring has been doing some great work with Google Earth's KML data format. The latest offering is a fairly robust <a href="http://spanring.name/blog/2005/12/11/kml2gml/">XSLT stylesheet for transforming KML into GML</a>. </p>
<p>In the article, he mentions ogr2ogr as a method to convert GML to shapefiles so I immediately had to try it out! I came up with a simple bash script, <strong>kml2shp.sh</strong>, that provides a quick command-line interface:</p>
<blockquote>
<p>kml2shp.sh input.kml output.shp</p>
</blockquote>
<p>Here's the step-by-step:</p>
<ol>
<li>
<p>Make sure you have xsltproc (the command-line xslt processor) and OGR installed.</p>
</li>
<li>
<p>Copy the <a href="http://spanring.name/blog/wp-content/files/kml2gml.xsl">xslt stylesheet </a> to /usr/local/share/kml2gml/</p>
</li>
<li>
<p>Create the kml2shp.sh script below (make sure to change the paths to reflect your system, chmod +x it, etc)</p>
</li>
</ol>
<blockquote>
<h1>!/bin/bash</h1>
</blockquote>
<p>if [ $# -ne 2 ]; then
  echo "usage: kml2shp.sh input.kml output.shp"
  exit
fi</p>
<p>echo "Processing KML file"
sed 's/ xmlns=\"http\:\/\/earth.google.com\/kml\/2.0\"//' $1 &gt; /tmp/temp.kml
xsltproc -o /tmp/temp.gml /usr/local/share/kml2gml/kml2gml.xsl /tmp/temp.kml</p>
<p>echo "Creating new Shapefile"
ogr2ogr $2 /tmp/temp.gml myFeature</p>
<p>echo "Cleaning up temp files"
rm /tmp/temp.gml
rm /tmp/temp.kml</p>
<p>echo "New shapefile has been created:"
echo $2</p>
<p>Now as far as I can tell, the XSLT is fairly robust although I've only tested it on a few datasets. The wrapper script, however, could use alot of work. Type and error checking would be nice for starters and a better method to remove the xml namespace might be necessary. This is really meant as a starting point.</p>
<p>One potential problem with this technique is that you will most likely get a 3D shapefile (x, y AND z coordinates). Many applications can handle 3D shapefiles but some (QGIS, others?) cannot at the present time. Once the geometry type is known, one could always specify the ogr2ogr "-nlt" parameter to force 2D output. But that's all for now... let me know if anyone has any suggestions on improving this technique.</p>";}i:104;a:6:{s:5:"title";s:63:"Tissot Indicatrix - Examining the distortion of map projections";s:4:"link";s:86:"http://perrygeo.com/tissot-indicatrix-examining-the-distortion-of-map-projections.html";s:7:"updated";s:25:"2005-12-11T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:94:"tag:perrygeo.com,2005-12-11:tissot-indicatrix-examining-the-distortion-of-map-projections.html";s:7:"summary";s:9047:"<p>The Tissot Indicatrix is a valuable tool for showing the distortions caused by map projections. It is essentially a series of imaginary polygons that represent perfect circles of equal area on a 3D globe. When projected onto a 2D map, their shape, size and/or angles will be distorted accordingly allowing you to quickly assess the projection's accuracy for a given part of the globe. </p>
<p>I've seen great Tissot diagrams in text books but I wanted to create the indicatrix as a polygon dataset so that I could project and overlay it with other data in a GIS. To do this I wrote a python script using the OGR libraries, which I will revist in a minute. But first the visually interesting part:</p>
<p>Here is a world countries shapefile overlaid with the Tissot circles in geographic (unprojected lat-long) coordinates:</p>
<p><img alt="Latlong tissot" src="/assets/img/latlong.png" /></p>
<p>Next I reprojected the datasets to the Mercator projection using ogr2ogr:</p>
<div class="highlight"><pre>ogr2ogr -t_srs &quot;+proj=merc&quot; countries_merc.shp countries_simpl.shp countries_simpl
ogr2ogr -t_srs &quot;+proj=merc&quot; tissot_merc.shp tissot.shp tissot
</pre></div>


<p>Note that the angles are perfectly preserved (the trademark feature of the Mercator projection) but the size is badly distorted.</p>
<p><img alt="Mercator tissot" src="/assets/img/mercator.png" /></p>
<p>Now lets try Lambert Azimuthal Equal Area (in this case the US National Atlas standard projection - EPSG code 2163). </p>
<div class="highlight"><pre>ogr2ogr -t_srs &quot;epsg:2163&quot; countries_lambert.shp countries_simpl.shp countries_simpl
ogr2ogr -t_srs &quot;epsg:2163&quot; tissot_lambert.shp tissot.shp tissot
</pre></div>


<p>This is a great projection for preserving area but get outside the center and shapes become badly distorted:</p>
<p><img alt="LAEA tissot" src="/assets/img/lambert.png" /></p>
<p>The best way to experiment with this is to bring the tissot.shp file into ArcMap (or another program that supports on-the-fly projection) and play with it in real time. The distortions of every projection just leap off the screen...</p>
<p>OK, now for the geeky part. Here's the python/OGR script used to create the tissot shapefile. The basic process is to lay out a grid of points across the globe in latlong, loop through the points and reproject each one to an orthographic projection centered directly on the point, buffer it, then reproject to latlong. The end result is a latlong shapefile representing circles of equal area on a globe.</p>
<div class="highlight"><pre> <span class="c">#!/usr/bin/env python</span>
 <span class="c"># Tissot Circles</span>
 <span class="c"># Represent perfect circles of equal area on a globe</span>
 <span class="c"># but will appear distorted in ANY 2d projection.</span>
 <span class="c"># Used to show the size, shape and directional distortion</span>
 <span class="c"># by Matthew T. Perry</span>
 <span class="c"># 12/10/2005</span>

 <span class="kn">import</span> <span class="nn">ogr</span>
 <span class="kn">import</span> <span class="nn">os</span>
 <span class="kn">import</span> <span class="nn">osr</span>

 <span class="n">output</span> <span class="o">=</span> <span class="s">&#39;tissot.shp&#39;</span>
 <span class="n">debug</span> <span class="o">=</span> <span class="bp">False</span>

 <span class="c"># Create the Shapefile</span>
 <span class="n">driver</span> <span class="o">=</span> <span class="n">ogr</span><span class="o">.</span><span class="n">GetDriverByName</span><span class="p">(</span><span class="s">&#39;ESRI Shapefile&#39;</span><span class="p">)</span>
 <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">output</span><span class="p">):</span>
         <span class="n">driver</span><span class="o">.</span><span class="n">DeleteDataSource</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
 <span class="n">ds</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">CreateDataSource</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
 <span class="n">layer</span> <span class="o">=</span> <span class="n">ds</span><span class="o">.</span><span class="n">CreateLayer</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">geom_type</span><span class="o">=</span><span class="n">ogr</span><span class="o">.</span><span class="n">wkbPolygon</span><span class="p">)</span>

 <span class="c"># Set up spatial reference systems</span>
 <span class="n">latlong</span> <span class="o">=</span> <span class="n">osr</span><span class="o">.</span><span class="n">SpatialReference</span><span class="p">()</span>
 <span class="n">ortho</span> <span class="o">=</span> <span class="n">osr</span><span class="o">.</span><span class="n">SpatialReference</span><span class="p">()</span>
 <span class="n">latlong</span><span class="o">.</span><span class="n">ImportFromProj4</span><span class="p">(</span><span class="s">&#39;+proj=latlong&#39;</span><span class="p">)</span>

 <span class="c"># For each grid point, reproject to ortho centered on itself,</span>
 <span class="c"># buffer by 640,000 meters, reproject back to latlong,</span>
 <span class="c"># and output the latlong ellipse to shapefile</span>
 <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">165</span><span class="p">,</span><span class="mi">180</span><span class="p">,</span><span class="mi">30</span><span class="p">):</span>
     <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span> <span class="p">(</span><span class="o">-</span><span class="mi">60</span><span class="p">,</span><span class="mi">90</span><span class="p">,</span><span class="mi">30</span><span class="p">):</span>
         <span class="n">f</span><span class="o">=</span> <span class="n">ogr</span><span class="o">.</span><span class="n">Feature</span><span class="p">(</span><span class="n">feature_def</span><span class="o">=</span><span class="n">layer</span><span class="o">.</span><span class="n">GetLayerDefn</span><span class="p">())</span>
         <span class="n">wkt</span> <span class="o">=</span> <span class="s">&#39;POINT(</span><span class="si">%f</span><span class="s"> </span><span class="si">%f</span><span class="s">)&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
         <span class="n">p</span> <span class="o">=</span> <span class="n">ogr</span><span class="o">.</span><span class="n">CreateGeometryFromWkt</span><span class="p">(</span><span class="n">wkt</span><span class="p">)</span>
         <span class="n">p</span><span class="o">.</span><span class="n">AssignSpatialReference</span><span class="p">(</span><span class="n">latlong</span><span class="p">)</span>
         <span class="n">proj</span> <span class="o">=</span> <span class="s">&#39;+proj=ortho +lon_0=</span><span class="si">%f</span><span class="s"> +lat_0=</span><span class="si">%f</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
         <span class="n">ortho</span><span class="o">.</span><span class="n">ImportFromProj4</span><span class="p">(</span><span class="n">proj</span><span class="p">)</span>
         <span class="n">p</span><span class="o">.</span><span class="n">TransformTo</span><span class="p">(</span><span class="n">ortho</span><span class="p">)</span>
         <span class="n">b</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">Buffer</span><span class="p">(</span><span class="mi">640000</span><span class="p">)</span>
         <span class="n">b</span><span class="o">.</span><span class="n">AssignSpatialReference</span><span class="p">(</span><span class="n">ortho</span><span class="p">)</span>
         <span class="n">b</span><span class="o">.</span><span class="n">TransformTo</span><span class="p">(</span><span class="n">latlong</span><span class="p">)</span>
         <span class="n">f</span><span class="o">.</span><span class="n">SetGeometryDirectly</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
         <span class="n">layer</span><span class="o">.</span><span class="n">CreateFeature</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
         <span class="n">f</span><span class="o">.</span><span class="n">Destroy</span><span class="p">()</span>

 <span class="n">ds</span><span class="o">.</span><span class="n">Destroy</span><span class="p">()</span>
</pre></div>";}i:105;a:6:{s:5:"title";s:24:"Processing S57 soundings";s:4:"link";s:49:"http://perrygeo.com/processing-s57-soundings.html";s:7:"updated";s:25:"2005-12-03T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:57:"tag:perrygeo.com,2005-12-03:processing-s57-soundings.html";s:7:"summary";s:2776:"<p>NOAA Electronic Navigational Charts (ENC) contain (among many other things) depth soundings that can be processed into raster bathymetry grids. The ENC files are available as a huge torrent from geotorrent.org (<a href="http://geotorrent.org/details.php?id=58">http://geotorrent.org/details.php?id=58</a>). </p>
<p>Download this torrent and check readme.txt to find the chart of interest:</p>
<blockquote>
<p>Port Hueneme to Santa Barbara|5|2005-10-03|2005-10-03|US5CA65M</p>
</blockquote>
<p>First check out the gdal documentation for s57 files at <a href="http://www.gdal.org/ogr/drv_s57.html">http://www.gdal.org/ogr/drv_s57.html</a>. </p>
<p>Change to the US5CA65M directory and you'll see a .000 file (and maybe .001, .002 etc). Run ogrinfo on the .000 file and you'll see ~ 61 layers, one of which ("SOUNDG") represents the soundings.  Let's start by examining the soundings layer:</p>
<div class="highlight"><pre>ogrinfo -summary US5CA65M.000 SOUNDG
</pre></div>


<p>We see that there are 43 "features" but since the features are multipoints, there are actually thousands of soundings. The multipoints are 3D so If we convert to a shapefile with ogr2ogr's default settings we loose the 3rd dimension. To solve this, we need to append "25D" to the layer type. Furthermore, the multipoint geometry confuses some applications so we want to split it into a layer with simple 3D point geometries. Luckily there is a SPLIT_MULITPOINT option that must be specified as an environment variable:</p>
<div class="highlight"><pre>export OGR_S57_OPTIONS=&quot;RETURN_PRIMITIVES=ON,RETURN_LINKAGES=ON,LNAM_REFS=ON,SPLIT_MULTIPOINT=ON,ADD_SOUNDG_DEPTH=ON&quot; 
ogr2ogr -nlt POINT25d test3.shp US5CA65M.000 SOUNDG
</pre></div>


<p>Now we get ~ 3000 3D points with the depth added as an attribute for good measure.</p>
<p>Now bring these into grass and create a raster:</p>
<div class="highlight"><pre>v.in.ogr -zo dsn=test3.shp output=soundg layer=test3
v.info soundg
g.region vect=soundg nsres=0.001 ewres=0.001
v.surf.rst input=soundg elev=bathy layer=0
r.info bathy
</pre></div>


<p>since depths actually show up as positive elevations, we want to multiply the grid by -1</p>
<div class="highlight"><pre>r.mapcalc sb_bathy=bathy*-1
</pre></div>


<p>And of course we want to make some nice shaded relief and contour maps for viewing with QGIS:</p>
<div class="highlight"><pre>r.shaded.relief map=sb_bathy shadedmap=sb_shade altitude=45 azimuth=315
r.contour input=sb_bathy output=sb_contour step=5
qgis &amp;
</pre></div>


<p><img alt="s57 results" src="/assets/img/s57.png" /></p>
<p>From the screenshot, we see the pits and spikes from potential outliers so we might want to go back and adjust the tension and smoothing on the raster creation (the v.surf.rst command).</p>";}i:106;a:6:{s:5:"title";s:12:"The new blog";s:4:"link";s:37:"http://perrygeo.com/the-new-blog.html";s:7:"updated";s:25:"2005-12-03T00:00:00-08:00";s:11:"author_name";s:16:"Matthew T. Perry";s:2:"id";s:45:"tag:perrygeo.com,2005-12-03:the-new-blog.html";s:7:"summary";s:245:"<p>Well I finally got around to installing some real blogging software. SimplePHP Blog was just not cutting it and WordPress looks like a healthy option. So far I've been really impressed! Let me know if you have any troubles accessing it...</p>";}}s:7:"channel";a:5:{s:5:"title";s:12:"perrygeo.com";s:4:"link";s:20:"http://perrygeo.com/";s:9:"link_self";s:28:"http://perrygeo.com/atom.xml";s:2:"id";s:20:"http://perrygeo.com/";s:7:"updated";s:25:"2015-10-10T00:00:00-07:00";}s:9:"textinput";a:0:{}s:5:"image";a:0:{}s:9:"feed_type";s:4:"Atom";s:12:"feed_version";N;s:5:"stack";a:0:{}s:9:"inchannel";b:0;s:6:"initem";b:0;s:9:"incontent";b:0;s:11:"intextinput";b:0;s:7:"inimage";b:0;s:13:"current_field";s:0:"";s:17:"current_namespace";b:0;s:5:"ERROR";s:0:"";s:19:"_CONTENT_CONSTRUCTS";a:6:{i:0;s:7:"content";i:1;s:7:"summary";i:2;s:4:"info";i:3;s:5:"title";i:4;s:7:"tagline";i:5;s:9:"copyright";}s:13:"last_modified";s:31:"Thu, 29 Oct 2015 15:35:15 GMT
";}