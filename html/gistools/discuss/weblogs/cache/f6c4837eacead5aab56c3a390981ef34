O:9:"MagpieRSS":19:{s:6:"parser";i:0;s:12:"current_item";a:0:{}s:5:"items";a:10:{i:0;a:9:{s:5:"title";s:30:"Building Ruby 1.9.1 on Windows";s:11:"description";s:3789:"<p>As <a href="http://www.infoq.com/news/2009/03/ruby-19-adoption"> 			noted</a> 			<a href="http://antoniocangiano.com/2009/03/23/rubys-biggest-challenge-for-2009/"> 			else</a> 			<a href="http://houseofpostmodern.wordpress.com/2009/02/06/the-push-to-ruby-19/"> 			where</a>, ruby 1.9.1 hasn't exactly bounded out of the gate.  			That's not particularly surprising, considering 1.9.1 has been  			available for only a couple of months and requires changes to  			existing code. In addition, there are a number of incompatible  			gems, giving rise to the <a href="http://isitruby19.com/">isitrub19y</a>  			website as a clearing house of information. So despite the  			great efforts from the Rails team, the rest of the community is  			still lagging behind.</p>
<p>That's particularly true on Windows, where a new one-click installer isn't    yet available. According to the latest market share   <a href="http://marketshare.hitslink.com/operating-system-market-share.aspx?qprid=8">   stats</a> from Net Applications, Windows controls 88% of the desktop market. I    have no idea how many Ruby installations exist, and how they are divided    by operating system. But looking at <a href="http://rubyforge.org/">   RubyForge</a>, by far and away the most popular download of all times is the    Windows one-click installer with over 3 million downloads.</p>
<p><a href="http://blog.mmediasys.com/">Luis Lavena</a> has taken over    stewardship of the one-click installer, and clearly needs a bit of help.    So although I have very little free time, I offered to pitch in as I could.    While Luis is concentrating on putting together a new version of the one-click    installer using Mingw and msys, I thought I could help out by putting 1.9.1    through its paces on Windows.</p>
<p>My basic approach was to simply start with the basics:</p>
<ul>
    <li>Build ruby with Visual Studio 2008</li>
    <li>Build the default extensions and libraries Ruby uses (zlib, iconv,  	openssl, etc)</li>
    <li>Run Ruby's unit tests</li>
</ul>
<p>That was almost a month ago. Thirty-nine patches later (I have no    doubt Nobu is getting sick of me), I just about have Ruby 1.9.1's test suite    running on Windows. There a still a few remaining issues, in particular    a couple of imap tests that hang.</p>
<p>As for Visual Studio, I'm using it for two reasons. First, it has a    lights-out debugger that makes it much easier to track down and fix problems.    Second, its lets you compile instrumented executable and libraries that can    detect incorrect API usage, heap corruption, stack corruption and mismatched    calling conventions.</p>
<p>It quickly became obvious that no one had ever done that with Ruby,    because it turned up a whole host of issues. For example, the dl    extension used the cdecl calling convention to call the Windows API instead of    stdcall. Or that there were a set of memory leaks in printf/sprintf.</p>
<p>The other thing that was bothersome was the huge number of compiler    warnings generated by building Ruby.   <a href="http://redmine.ruby-lang.org/issues/show/1254">See</a> for your self    - and then realize the original list doesn't include any of the warnings    generated by building Ruby's extensions. Cleaning up the warnings took a    number of patches, but at this point most of them have been fixed. And    all credit to Nobu for working through my patches, fixing them and applying    them since my knowledge of the Ruby runtime is fairly limited, thereby causing    most of my patches to not be quite right.</p>
<p>Anyway, since its not all that obvious how to build Ruby on Windows (with    Visual Studio or Mingw), I'll see if I can put together a few posts that    describe how to do it for anyone who wants to roll their own.</p>

";s:7:"pubdate";s:31:"Sat, 28 Mar 2009 22:29:00 -0000";s:4:"guid";s:45:"urn:uuid:5fc93acd-6756-4c01-a448-773e8f5f7908";s:8:"comments";s:75:"http://cfis.savagexi.com/2009/03/28/building-ruby-1-9-1-on-windows#comments";s:8:"category";s:4:"Ruby";s:9:"trackback";a:1:{s:4:"ping";s:50:"http://cfis.savagexi.com/trackbacks?article_id=508";}s:4:"link";s:66:"http://cfis.savagexi.com/2009/03/28/building-ruby-1-9-1-on-windows";s:7:"summary";s:3789:"<p>As <a href="http://www.infoq.com/news/2009/03/ruby-19-adoption"> 			noted</a> 			<a href="http://antoniocangiano.com/2009/03/23/rubys-biggest-challenge-for-2009/"> 			else</a> 			<a href="http://houseofpostmodern.wordpress.com/2009/02/06/the-push-to-ruby-19/"> 			where</a>, ruby 1.9.1 hasn't exactly bounded out of the gate.  			That's not particularly surprising, considering 1.9.1 has been  			available for only a couple of months and requires changes to  			existing code. In addition, there are a number of incompatible  			gems, giving rise to the <a href="http://isitruby19.com/">isitrub19y</a>  			website as a clearing house of information. So despite the  			great efforts from the Rails team, the rest of the community is  			still lagging behind.</p>
<p>That's particularly true on Windows, where a new one-click installer isn't    yet available. According to the latest market share   <a href="http://marketshare.hitslink.com/operating-system-market-share.aspx?qprid=8">   stats</a> from Net Applications, Windows controls 88% of the desktop market. I    have no idea how many Ruby installations exist, and how they are divided    by operating system. But looking at <a href="http://rubyforge.org/">   RubyForge</a>, by far and away the most popular download of all times is the    Windows one-click installer with over 3 million downloads.</p>
<p><a href="http://blog.mmediasys.com/">Luis Lavena</a> has taken over    stewardship of the one-click installer, and clearly needs a bit of help.    So although I have very little free time, I offered to pitch in as I could.    While Luis is concentrating on putting together a new version of the one-click    installer using Mingw and msys, I thought I could help out by putting 1.9.1    through its paces on Windows.</p>
<p>My basic approach was to simply start with the basics:</p>
<ul>
    <li>Build ruby with Visual Studio 2008</li>
    <li>Build the default extensions and libraries Ruby uses (zlib, iconv,  	openssl, etc)</li>
    <li>Run Ruby's unit tests</li>
</ul>
<p>That was almost a month ago. Thirty-nine patches later (I have no    doubt Nobu is getting sick of me), I just about have Ruby 1.9.1's test suite    running on Windows. There a still a few remaining issues, in particular    a couple of imap tests that hang.</p>
<p>As for Visual Studio, I'm using it for two reasons. First, it has a    lights-out debugger that makes it much easier to track down and fix problems.    Second, its lets you compile instrumented executable and libraries that can    detect incorrect API usage, heap corruption, stack corruption and mismatched    calling conventions.</p>
<p>It quickly became obvious that no one had ever done that with Ruby,    because it turned up a whole host of issues. For example, the dl    extension used the cdecl calling convention to call the Windows API instead of    stdcall. Or that there were a set of memory leaks in printf/sprintf.</p>
<p>The other thing that was bothersome was the huge number of compiler    warnings generated by building Ruby.   <a href="http://redmine.ruby-lang.org/issues/show/1254">See</a> for your self    - and then realize the original list doesn't include any of the warnings    generated by building Ruby's extensions. Cleaning up the warnings took a    number of patches, but at this point most of them have been fixed. And    all credit to Nobu for working through my patches, fixing them and applying    them since my knowledge of the Ruby runtime is fairly limited, thereby causing    most of my patches to not be quite right.</p>
<p>Anyway, since its not all that obvious how to build Ruby on Windows (with    Visual Studio or Mingw), I'll see if I can put together a few posts that    describe how to do it for anyone who wants to roll their own.</p>

";}i:1;a:9:{s:5:"title";s:40:"libxml-ruby 1.1.3 - Boosting Performance";s:11:"description";s:3342:"<p>I'm happy to announce the release of 			<a href="http://libxml.rubyforge.org/rdoc/index.html">libxml-ruby</a>  			1.1.3. Besides including the usual assortment of new features  			and bug <a href="http://libxml.rubyforge.org/rdoc/files/CHANGES.html">fixes</a>,  			this release also includes a speed boost of roughly 10% to 20%.</p>
<p>This resulted from 			<a href="http://www.rubyinside.com/ruby-xml-performance-benchmarks-1641.html"> 			RubyInside's</a> recent post summarizing the performance of Ruby  			parsers. As expected, <a href="http://libxml.rubyforge.org/"> 			libxml-ruby</a> blew away 			<a href="http://wiki.github.com/why/hpricot">Hpricot</a> and 			<a href="http://www.germane-software.com/software/rexml/">REXML</a>  			in pure parsing speed (which of course is a simplistic view of what  			is important in an xml processor, but nevertheless still important).  			But it consistently finished a bit behind 			<a href="http://github.com/tenderlove/nokogiri/tree/master">Nokogiri</a>.</p>
<p>I was a bit surprised by that since libxml-ruby and Nokogiri use the <a href="http://xmlsoft.org/"> 			libxml2</a> library as their parsing engine. Since the  			specific test cases almost exclusively tested parsing, the two  			extensions should have identical run times.</p>
<p style="width: 515px;">Since the times were different, then the  			obvious conclusion was that the two extensions were  			using different libxml2 APIs or using different settings. I  			suspected the second, but when  			investigating performance you never know beforehand.</p>
<p>Not to bore everyone with the nitty-gritty details of using  			libxml2, but when looking into the first test, parsing an in-memory  			string, it didn't look there was much difference in API calls.</p>
<p>For libxml-ruby:</p>
<p><font size="2">
<pre><tt>xmlCreateMemoryParserCtxt<br />xmlParseDocument</tt></pre>
<p>For Nokogiri:</p>
<pre><tt>xmlReadMemory<br />  -&gt; xmlCreateMemoryParserCtxt<br />  -&gt; xmlDoRead<br />     -&gt; xmlParseDocument</tt></pre>
</font></p>
<p>So that didn't solve the mystery.</p>
<p>The next possibility was xmlDoRead was modifying the libxml2  			parser context. Now a libxml2 parser context is a beast of a thing -  			for those brave souls who want to take a peek, its defined in  			libxml2's online 			<a href="http://xmlsoft.org/html/libxml-tree.html#xmlParserCtxt"> 			documentation</a>.</p>
<p>Working through the options one-by-one, I finally found the  			culprit, an obscure field in the structure:</p>
<pre><tt>int	dictNames	: Use dictionary names for the tree</tt></pre>
<p>What this setting controls is whether libxml2 uses a dictionary  			to cache strings it has previously parsed. Caching strings  			makes a big difference, so by default it should be enabled.  			That is now the case with libxml-ruby 1.1.3 and higher.</p>
<p>Rerunning the published benchmarks now shows libxml-ruby and Nokogiri to    have equivalent performance. If you run the tests yourself, beware though. The    order in which the extensions are tested changes the results. Whichever    extension is tested first will always be faster, at least on my Fedora 10 box.    I assume that's because the first parser has more memory available to it when    the test begins and therefore invokes Ruby's garbage collector a few times    less.</p>

";s:7:"pubdate";s:31:"Sat, 21 Mar 2009 23:19:00 -0000";s:4:"guid";s:45:"urn:uuid:03029801-9d84-486c-9260-81803237b7d1";s:8:"comments";s:83:"http://cfis.savagexi.com/2009/03/21/libxml-ruby-1-1-3-boosting-performance#comments";s:8:"category";s:4:"Ruby";s:9:"trackback";a:1:{s:4:"ping";s:50:"http://cfis.savagexi.com/trackbacks?article_id=507";}s:4:"link";s:74:"http://cfis.savagexi.com/2009/03/21/libxml-ruby-1-1-3-boosting-performance";s:7:"summary";s:3342:"<p>I'm happy to announce the release of 			<a href="http://libxml.rubyforge.org/rdoc/index.html">libxml-ruby</a>  			1.1.3. Besides including the usual assortment of new features  			and bug <a href="http://libxml.rubyforge.org/rdoc/files/CHANGES.html">fixes</a>,  			this release also includes a speed boost of roughly 10% to 20%.</p>
<p>This resulted from 			<a href="http://www.rubyinside.com/ruby-xml-performance-benchmarks-1641.html"> 			RubyInside's</a> recent post summarizing the performance of Ruby  			parsers. As expected, <a href="http://libxml.rubyforge.org/"> 			libxml-ruby</a> blew away 			<a href="http://wiki.github.com/why/hpricot">Hpricot</a> and 			<a href="http://www.germane-software.com/software/rexml/">REXML</a>  			in pure parsing speed (which of course is a simplistic view of what  			is important in an xml processor, but nevertheless still important).  			But it consistently finished a bit behind 			<a href="http://github.com/tenderlove/nokogiri/tree/master">Nokogiri</a>.</p>
<p>I was a bit surprised by that since libxml-ruby and Nokogiri use the <a href="http://xmlsoft.org/"> 			libxml2</a> library as their parsing engine. Since the  			specific test cases almost exclusively tested parsing, the two  			extensions should have identical run times.</p>
<p style="width: 515px;">Since the times were different, then the  			obvious conclusion was that the two extensions were  			using different libxml2 APIs or using different settings. I  			suspected the second, but when  			investigating performance you never know beforehand.</p>
<p>Not to bore everyone with the nitty-gritty details of using  			libxml2, but when looking into the first test, parsing an in-memory  			string, it didn't look there was much difference in API calls.</p>
<p>For libxml-ruby:</p>
<p><font size="2">
<pre><tt>xmlCreateMemoryParserCtxt<br />xmlParseDocument</tt></pre>
<p>For Nokogiri:</p>
<pre><tt>xmlReadMemory<br />  -&gt; xmlCreateMemoryParserCtxt<br />  -&gt; xmlDoRead<br />     -&gt; xmlParseDocument</tt></pre>
</font></p>
<p>So that didn't solve the mystery.</p>
<p>The next possibility was xmlDoRead was modifying the libxml2  			parser context. Now a libxml2 parser context is a beast of a thing -  			for those brave souls who want to take a peek, its defined in  			libxml2's online 			<a href="http://xmlsoft.org/html/libxml-tree.html#xmlParserCtxt"> 			documentation</a>.</p>
<p>Working through the options one-by-one, I finally found the  			culprit, an obscure field in the structure:</p>
<pre><tt>int	dictNames	: Use dictionary names for the tree</tt></pre>
<p>What this setting controls is whether libxml2 uses a dictionary  			to cache strings it has previously parsed. Caching strings  			makes a big difference, so by default it should be enabled.  			That is now the case with libxml-ruby 1.1.3 and higher.</p>
<p>Rerunning the published benchmarks now shows libxml-ruby and Nokogiri to    have equivalent performance. If you run the tests yourself, beware though. The    order in which the extensions are tested changes the results. Whichever    extension is tested first will always be faster, at least on my Fedora 10 box.    I assume that's because the first parser has more memory available to it when    the test begins and therefore invokes Ruby's garbage collector a few times    less.</p>

";}i:2;a:9:{s:5:"title";s:24:"libxml-ruby reaches 1.0!";s:11:"description";s:1449:"			<p>A mere seven years after its inception, libxml-ruby has finally reached version 1.0.
			  libxml-ruby provides ruby, via the
			<a href="http://www.xmlsoft.org/">libxml2</a> libary, the super fast, 
			  feature rich xml parser that is has sorely lacked.</p>
			<p>Last year I
			<a href="http://cfis.savagexi.com/2008/07/16/resurrecting-libxml-ruby">
			posted</a> about the resurrection of the project, and since then 
			we&#39;ve made enormous progress. The 1.0 release marks the culmination 
			of this work, and comes with tons of goodies:</p>
			<ul>
			  <li>Ruby 1.9.1 support</li>
			  <li>Out of the box support for OS X 10.5 and MacPorts</li>
			  <li>Greatly expanded 
			  <a href="http://libxml.rubyforge.org/rdoc/index.html">documentation</a></li>
			  <li>Much better test coverage</li>
			  <li>A nice, clean API that makes it easy to do simple things, but 
			  provides all the power of libxml2 if you need it </li>
			</ul>
			<p> Not to mention that libxml-ruby is blindingly fast and 
			incredibly feature rich (see my
			<a href="http://cfis.savagexi.com/2008/07/16/resurrecting-libxml-ruby">
			post</a> from last year for all the details), making it the choice 
			for a number of high-traffic websites.</p>
			<p>So give them a try - its as easy to install as: </p>
			<pre><tt>gem install libxml-ruby</tt></pre>
			<p>And if you feel like polishing your ruby, xml, or C skills, come 
			join the community! </p>


";s:7:"pubdate";s:31:"Tue, 10 Mar 2009 23:52:00 -0000";s:4:"guid";s:45:"urn:uuid:69e9097b-f9f5-4b4a-b231-4904b71dcee2";s:8:"comments";s:68:"http://cfis.savagexi.com/2009/03/10/libxml-ruby-reaches-1-0#comments";s:8:"category";s:4:"Ruby";s:9:"trackback";a:1:{s:4:"ping";s:50:"http://cfis.savagexi.com/trackbacks?article_id=506";}s:4:"link";s:59:"http://cfis.savagexi.com/2009/03/10/libxml-ruby-reaches-1-0";s:7:"summary";s:1449:"			<p>A mere seven years after its inception, libxml-ruby has finally reached version 1.0.
			  libxml-ruby provides ruby, via the
			<a href="http://www.xmlsoft.org/">libxml2</a> libary, the super fast, 
			  feature rich xml parser that is has sorely lacked.</p>
			<p>Last year I
			<a href="http://cfis.savagexi.com/2008/07/16/resurrecting-libxml-ruby">
			posted</a> about the resurrection of the project, and since then 
			we&#39;ve made enormous progress. The 1.0 release marks the culmination 
			of this work, and comes with tons of goodies:</p>
			<ul>
			  <li>Ruby 1.9.1 support</li>
			  <li>Out of the box support for OS X 10.5 and MacPorts</li>
			  <li>Greatly expanded 
			  <a href="http://libxml.rubyforge.org/rdoc/index.html">documentation</a></li>
			  <li>Much better test coverage</li>
			  <li>A nice, clean API that makes it easy to do simple things, but 
			  provides all the power of libxml2 if you need it </li>
			</ul>
			<p> Not to mention that libxml-ruby is blindingly fast and 
			incredibly feature rich (see my
			<a href="http://cfis.savagexi.com/2008/07/16/resurrecting-libxml-ruby">
			post</a> from last year for all the details), making it the choice 
			for a number of high-traffic websites.</p>
			<p>So give them a try - its as easy to install as: </p>
			<pre><tt>gem install libxml-ruby</tt></pre>
			<p>And if you feel like polishing your ruby, xml, or C skills, come 
			join the community! </p>


";}i:3;a:9:{s:5:"title";s:44:"Window Functions and the Connected Workspace";s:11:"description";s:6525:"<p>One of the great new features of the upcoming postgresql 8.4 release is  		the addition of window functions. Previously limited to enterprise  		databases such as Oracle and DB2, they open up a whole new world of  		functionality to sql queries.</p>
<p>Window functions are one of the more obscure parts of the 		<a href="http://en.wikipedia.org/wiki/SQL">sql</a> standard, so you may  		never have heard of them. In a nutshell, they let you perform calculations based  		on the current record and its set of related records. This turns out to be quite useful. A good place to find out more information is the postgresql documentation, which does a good job of 		<a href="http://developer.postgresql.org/pgdocs/postgres/tutorial-window.html"> 		explaining</a> some of the more common use cases.</p>
<h3>Workplace of the Future</h3>
<p>My introduction to window functions was almost five years ago while  		doing a project for <a href="http://www.ubisense.net/">Ubisense</a>. Ubisense sells indoor tracking  		systems, based on ultra-wideband, that can locate tags within 6  		inches.</p>
<p>For one of projects, we worked on Cisco's Connected Workspace. The  		Connected Workspace was designed to see if office space could be laid  		out in a way to increase worker happiness and productivity. To do  		this, Cisco took all the cubicles out of the main floor of one of its  		buildings and replaced it with a fairly radical design. Roughly half of the floor  		was made into a a large open open space with  		individual and group desks. The remainder of the floor was split  		between a large kitchen with a really nice eating room and offices that  		ranged in size from 1 to 12 people. Here is a picture of the main floor area (courtesy Cisco Systems):</p>
<p><img src="http://cfis.savagexi.com/files/cisco_connected_workspace.png" alt="Cisco Connected Workspace" /></p>
<p>For a few more pictures, check out Cisco's 		<a href="http://www.cisco.com/web/about/ciscoitatwork/downloads/ciscoitatwork/pdf/Cisco_IT_Case_Study_Connected_Workplace_POC_print.pdf"> 		presentation</a>.</p>
<p>The idea was that employees could sit wherever they wanted, there were  		no assigned seats. If employees needed to collaborate they could  		work in the open areas, if they needed privacy they could grab one of  		the smaller offices and if they needed to do a conference call they  		could grab one of the larger offices.</p>
<p>The other impetus behind the experiment was financial. Cisco has a  		huge campus in Santa Clara hundreds of buildings, each costing  		millions of dollars to maintain. Was it possible to pack more  		people into each building and maintain, or improve, their hapiness and productivity?</p>
<h3>The Experiment</h3>
<p>Ubisense was hired to figure out how well the different parts of the  		connect workspace were utilized. By giving each employee a tag, the system  		anonymously keep track of each time someone entered or left a room.  		This aggregate data could then be used to gain  		insight into the effectiveness of the new floor plan:</p>
<ul>
    <li>Did employees spend time in the open area?</li>
    <li>If so, in which parts of the open area (it was divided into 5  		  subdivisons)?</li>
    <li>How much were the individual offices being used? Were there  		  too many or too few?</li>
    <li>What about the larger conference room?</li>
    <li>How much was the kitchen and eating area utilized?</li>
</ul>
<p>To do this, I hooked into Ubisense's platform API to monitor each time a tag  		entered or left a room. That information was then entered into a  		Oracle database (without any user information, so the data was totally  		anonymous). Thus the Oracle table consisted of millions of rows  		of data - with each row representing an tag entering a room or leaving a  		room. For example, here is a simplified view of the data:</p>
<table style="width: 100%;">
    <tbody>
        <tr>
            <th>tag_id</th>
            <th>room_id</th>
            <th>event</th>
            <th>time</th>
        </tr>
        <tr>
            <td>1</td>
            <td>Conference #1</td>
            <td>Enter</td>
            <td>10:00am</td>
        </tr>
        <tr>
            <td>2</td>
            <td>Office #2</td>
            <td>Enter</td>
            <td>11:15am</td>
        </tr>
        <tr>
            <td>2</td>
            <td>Office #2</td>
            <td>Leave</td>
            <td>11:20am</td>
        </tr>
        <tr>
            <td>1</td>
            <td>Conference #1</td>
            <td>Leave</td>
            <td>11:30am</td>
        </tr>
    </tbody>
</table>
<h3>Window Functions to the Rescue</h3>
<p>The next trick was to analyze the data to answer the questions I  		posed above. To do that required figuring out how much time each  		tag spent in each room. So something like this:</p>
<table style="width: 100%;">
    <tbody>
        <tr>
            <th>room_id</th>
            <th>enter</th>
            <th>leave</th>
            <th>duration</th>
        </tr>
        <tr>
            <td>Conference #1</td>
            <td>10:00am</td>
            <td>11:30am</td>
            <td>1 hour 30 min</td>
        </tr>
        <tr>
            <td>Office #2</td>
            <td>11:15am</td>
            <td>11:20am</td>
            <td>5 min</td>
        </tr>
    </tbody>
</table>
<p></p>
<p>OObviously you could write a script in the language of your choice to  		process the raw data and populate this new table. But that adds  		another level of complexity to the system and makes it hard to do  		add-hoc queries.</p>
<p>And this is where window functions are so useful. Using window  		functions, you can implement the basic algorithm fully in &gt;</p>
<ol>
    <li>Sort the data by tag_id, room_id and id so that room enter records  		  for a tag are directly followed by room exit records</li>
    <li>Select the room exit records</li>
    <li>Use theUse the lag window function to pull the previous record, which is  		  the room enter record, and then subtract the two times to get the  		  duration</li>
    <li>Wrap this query up in a view, let's call it room_usage, that  		  can serve as the basis for add-hoc queries or reports.</li>
</ol>
<p>Without window functions, item #3 is impossible with sql because there  		is no way to relate a record to its surrounding records (ie., a window).</p>
<p>And thus window functions provide a great new data analysis tools which  		postgresql will make available to everyone at no-cost.</p>

";s:7:"pubdate";s:31:"Sat, 07 Mar 2009 18:20:00 -0000";s:4:"guid";s:45:"urn:uuid:faf73f9c-53c1-4481-8708-ca4dbccb7c99";s:8:"comments";s:89:"http://cfis.savagexi.com/2009/03/07/window-functions-and-the-connected-workspace#comments";s:8:"category";s:10:"Technology";s:9:"trackback";a:1:{s:4:"ping";s:50:"http://cfis.savagexi.com/trackbacks?article_id=505";}s:4:"link";s:80:"http://cfis.savagexi.com/2009/03/07/window-functions-and-the-connected-workspace";s:7:"summary";s:6525:"<p>One of the great new features of the upcoming postgresql 8.4 release is  		the addition of window functions. Previously limited to enterprise  		databases such as Oracle and DB2, they open up a whole new world of  		functionality to sql queries.</p>
<p>Window functions are one of the more obscure parts of the 		<a href="http://en.wikipedia.org/wiki/SQL">sql</a> standard, so you may  		never have heard of them. In a nutshell, they let you perform calculations based  		on the current record and its set of related records. This turns out to be quite useful. A good place to find out more information is the postgresql documentation, which does a good job of 		<a href="http://developer.postgresql.org/pgdocs/postgres/tutorial-window.html"> 		explaining</a> some of the more common use cases.</p>
<h3>Workplace of the Future</h3>
<p>My introduction to window functions was almost five years ago while  		doing a project for <a href="http://www.ubisense.net/">Ubisense</a>. Ubisense sells indoor tracking  		systems, based on ultra-wideband, that can locate tags within 6  		inches.</p>
<p>For one of projects, we worked on Cisco's Connected Workspace. The  		Connected Workspace was designed to see if office space could be laid  		out in a way to increase worker happiness and productivity. To do  		this, Cisco took all the cubicles out of the main floor of one of its  		buildings and replaced it with a fairly radical design. Roughly half of the floor  		was made into a a large open open space with  		individual and group desks. The remainder of the floor was split  		between a large kitchen with a really nice eating room and offices that  		ranged in size from 1 to 12 people. Here is a picture of the main floor area (courtesy Cisco Systems):</p>
<p><img src="http://cfis.savagexi.com/files/cisco_connected_workspace.png" alt="Cisco Connected Workspace" /></p>
<p>For a few more pictures, check out Cisco's 		<a href="http://www.cisco.com/web/about/ciscoitatwork/downloads/ciscoitatwork/pdf/Cisco_IT_Case_Study_Connected_Workplace_POC_print.pdf"> 		presentation</a>.</p>
<p>The idea was that employees could sit wherever they wanted, there were  		no assigned seats. If employees needed to collaborate they could  		work in the open areas, if they needed privacy they could grab one of  		the smaller offices and if they needed to do a conference call they  		could grab one of the larger offices.</p>
<p>The other impetus behind the experiment was financial. Cisco has a  		huge campus in Santa Clara hundreds of buildings, each costing  		millions of dollars to maintain. Was it possible to pack more  		people into each building and maintain, or improve, their hapiness and productivity?</p>
<h3>The Experiment</h3>
<p>Ubisense was hired to figure out how well the different parts of the  		connect workspace were utilized. By giving each employee a tag, the system  		anonymously keep track of each time someone entered or left a room.  		This aggregate data could then be used to gain  		insight into the effectiveness of the new floor plan:</p>
<ul>
    <li>Did employees spend time in the open area?</li>
    <li>If so, in which parts of the open area (it was divided into 5  		  subdivisons)?</li>
    <li>How much were the individual offices being used? Were there  		  too many or too few?</li>
    <li>What about the larger conference room?</li>
    <li>How much was the kitchen and eating area utilized?</li>
</ul>
<p>To do this, I hooked into Ubisense's platform API to monitor each time a tag  		entered or left a room. That information was then entered into a  		Oracle database (without any user information, so the data was totally  		anonymous). Thus the Oracle table consisted of millions of rows  		of data - with each row representing an tag entering a room or leaving a  		room. For example, here is a simplified view of the data:</p>
<table style="width: 100%;">
    <tbody>
        <tr>
            <th>tag_id</th>
            <th>room_id</th>
            <th>event</th>
            <th>time</th>
        </tr>
        <tr>
            <td>1</td>
            <td>Conference #1</td>
            <td>Enter</td>
            <td>10:00am</td>
        </tr>
        <tr>
            <td>2</td>
            <td>Office #2</td>
            <td>Enter</td>
            <td>11:15am</td>
        </tr>
        <tr>
            <td>2</td>
            <td>Office #2</td>
            <td>Leave</td>
            <td>11:20am</td>
        </tr>
        <tr>
            <td>1</td>
            <td>Conference #1</td>
            <td>Leave</td>
            <td>11:30am</td>
        </tr>
    </tbody>
</table>
<h3>Window Functions to the Rescue</h3>
<p>The next trick was to analyze the data to answer the questions I  		posed above. To do that required figuring out how much time each  		tag spent in each room. So something like this:</p>
<table style="width: 100%;">
    <tbody>
        <tr>
            <th>room_id</th>
            <th>enter</th>
            <th>leave</th>
            <th>duration</th>
        </tr>
        <tr>
            <td>Conference #1</td>
            <td>10:00am</td>
            <td>11:30am</td>
            <td>1 hour 30 min</td>
        </tr>
        <tr>
            <td>Office #2</td>
            <td>11:15am</td>
            <td>11:20am</td>
            <td>5 min</td>
        </tr>
    </tbody>
</table>
<p></p>
<p>OObviously you could write a script in the language of your choice to  		process the raw data and populate this new table. But that adds  		another level of complexity to the system and makes it hard to do  		add-hoc queries.</p>
<p>And this is where window functions are so useful. Using window  		functions, you can implement the basic algorithm fully in &gt;</p>
<ol>
    <li>Sort the data by tag_id, room_id and id so that room enter records  		  for a tag are directly followed by room exit records</li>
    <li>Select the room exit records</li>
    <li>Use theUse the lag window function to pull the previous record, which is  		  the room enter record, and then subtract the two times to get the  		  duration</li>
    <li>Wrap this query up in a view, let's call it room_usage, that  		  can serve as the basis for add-hoc queries or reports.</li>
</ol>
<p>Without window functions, item #3 is impossible with sql because there  		is no way to relate a record to its surrounding records (ie., a window).</p>
<p>And thus window functions provide a great new data analysis tools which  		postgresql will make available to everyone at no-cost.</p>

";}i:4;a:9:{s:5:"title";s:43:"Profiling Your Rails Application - Take Two";s:11:"description";s:7138:"<p>Last year I wrote about how to <a href="http://cfis.savagexi.com/2007/07/10/how-to-profile-your-rails-application">profile</a> your Rails application, which is a lot harder then it seems. Its not so much the profiling itself - its easy enough to create one-off results. Instead, its coming up with a reproducible process that lets you measure performance changes over time.</p>
<p>Some things that don't work over the long term:</p>
<ul>
    <li>Insert profiling code into your application code</li>
    <li>Use unit tests for profiling</li>
    <li>Use functional tests for profiling</li>
    <li>Use integration tests for profiling</li>
    <li>Modify standard rails environments (test, development, production for profiling)</li>
</ul>
<p>So the latest version of <a href="http://cfis.savagexi.com/2008/11/12/ruby-prof-0-7-0">ruby-prof</a> introduces a new approach to profiling  		your Ruby or Rails code that is heavily based on the excellent work <a href="http://bitsweat.net/">Jeremy</a>  		has done on the request profiler included in newer versions of Rails.</p>
<p>The basic idea is to extend Ruby's TestUnit library so that individual test  		cases are profiled by including a new RubyProf::Test module. When you include this module, ruby-prof will run each test once as a warm up  		and then ten more times to gather profiling data (using another new feature  		of the 0.7.0 release, the ability to pause and resume a profiling run).  Profile data is then output for each test.</p>
<p>Let's look at an example:</p>
<pre><tt><span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">class</span></span> ExampleTest <span style="color: rgb(153, 0, 0);">&lt;</span> Test<span style="color: rgb(153, 0, 0);">::</span>Unit<span style="color: rgb(153, 0, 0);">::</span>TestCase<br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">include</span></span> RubyProf<span style="color: rgb(153, 0, 0);">::</span>Test<br />  <br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">def</span></span> test_stuff<br />    puts <span style="color: rgb(255, 0, 0);">&quot;Test method&quot;</span><br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">end</span></span><br /><span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">end</span></span></tt></pre>
<p>The line <tt><span style="font-weight: bold;"> 		<span style="color: rgb(0, 0, 255);">include</span></span> RubyProf<span style="color: rgb(153, 0, 0);">::</span>Test</tt>  		turns the test case into a profiling test case. The same approach  		could be used for hooking into other testing frameworks - all patches are  		of course welcome!</p>
<h3>Using a Profile Environment for Rails</h3>
<p>Now lets talk about profiling Rails. There are two main issues that make it harder then it seems.</p>
<p>First, to get any useful data you need to profile a Rails app using the production environment settings in conjunction with a test database.  		Using the development environment doesn't work because the time it takes  		Rails to reload classes on each request drowns out any useful information.</p>
<p>Second, how should profile tests be written and where should they go?</p>
<p>The solution I've adopted is to use functional like-tests that use a  		PROFILE environment, and place them in a directory called test/profile.</p>
<p>Let's look at another example:</p>
<pre><tt><span style="font-weight: bold;"><span style="color: rgb(0, 0, 128);">require</span></span> File<span style="color: rgb(153, 0, 0);">.</span>dirname<span style="color: rgb(153, 0, 0);">(</span><span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">__FILE__</span></span><span style="color: rgb(153, 0, 0);">)</span> <span style="color: rgb(153, 0, 0);">+</span> <span style="color: rgb(255, 0, 0);">'/../profile_test_helper'</span><br /><br /><span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">class</span></span> MyControllerTest <span style="color: rgb(153, 0, 0);">&lt;</span> Test<span style="color: rgb(153, 0, 0);">::</span>Unit<span style="color: rgb(153, 0, 0);">::</span>TestCase<br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">include</span></span> RubyProf<span style="color: rgb(153, 0, 0);">::</span>Test<br /><br />  fixtures<span style="color: rgb(153, 0, 0);"> :my_fixture</span><br /><br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">def</span></span> setup<br />    <span style="color: rgb(0, 153, 0);">@controller</span> <span style="color: rgb(153, 0, 0);">=</span> MyController<span style="color: rgb(153, 0, 0);">.</span>new<br />    <span style="color: rgb(0, 153, 0);">@request</span>    <span style="color: rgb(153, 0, 0);">=</span> ActionController<span style="color: rgb(153, 0, 0);">::</span>TestRequest<span style="color: rgb(153, 0, 0);">.</span>new<br />    <span style="color: rgb(0, 153, 0);">@response</span>   <span style="color: rgb(153, 0, 0);">=</span> ActionController<span style="color: rgb(153, 0, 0);">::</span>TestResponse<span style="color: rgb(153, 0, 0);">.</span>new<br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">end</span></span><br /><br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">def</span></span> test_get<br />    get<span style="color: rgb(153, 0, 0);">(</span><span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">:index</span></span><span style="color: rgb(153, 0, 0);">)</span><br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">end</span></span><br /><span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">end</span></span></tt></pre>
<p>The only difference between a functional test and a profile test are  		the inclusion of the RubyProf::Test module and loading profile_test_helper.rb.  		profile_test_helper is unfortunately needed because the standard test_helper.rb  		file Rails uses loads the TEST environment. Hopefully future versions  		of Rails will fix this by allowing greater flexibility in specifying a test  		environment.</p>
<p>So to get started with profiling your Rails application:</p>
<ol>
    <li>Copy profile_test_helper.rb from the ruby-prof distribution to your  		  rails test directory</li>
    <li>Modify profile_test_helper.rb as needed to set ruby-prof's output  		  directory</li>
    <li>Create a profile.rb file in the environments directory</li>
    <li>Update your databases.yml file to include a profile database (just map it to your test database)</li>
    <li>Create a new directory test/profile</li>
    <li>Start writing profiling tests that look similar to the above example</li>
</ol>
<p>And now you'll have reproducible profiling tests cases.</p>
<p>So what's missing? A way of keeping track of how your  		applications performance changes over time. A quick hack is to use  		source control to keep profile tests results around. A more sophisticated  		solution would be to use ruby-prof's API to dump profile results into a  		database and then put a nice web front end onto it. Any takers?</p>

";s:7:"pubdate";s:31:"Thu, 13 Nov 2008 11:11:00 -0000";s:4:"guid";s:45:"urn:uuid:e7a00427-bd00-4c50-8066-fdf41ef25854";s:8:"comments";s:86:"http://cfis.savagexi.com/2008/11/13/profiling-your-rails-application-take-two#comments";s:8:"category";s:9:"ruby-prof";s:9:"trackback";a:1:{s:4:"ping";s:50:"http://cfis.savagexi.com/trackbacks?article_id=504";}s:4:"link";s:77:"http://cfis.savagexi.com/2008/11/13/profiling-your-rails-application-take-two";s:7:"summary";s:7138:"<p>Last year I wrote about how to <a href="http://cfis.savagexi.com/2007/07/10/how-to-profile-your-rails-application">profile</a> your Rails application, which is a lot harder then it seems. Its not so much the profiling itself - its easy enough to create one-off results. Instead, its coming up with a reproducible process that lets you measure performance changes over time.</p>
<p>Some things that don't work over the long term:</p>
<ul>
    <li>Insert profiling code into your application code</li>
    <li>Use unit tests for profiling</li>
    <li>Use functional tests for profiling</li>
    <li>Use integration tests for profiling</li>
    <li>Modify standard rails environments (test, development, production for profiling)</li>
</ul>
<p>So the latest version of <a href="http://cfis.savagexi.com/2008/11/12/ruby-prof-0-7-0">ruby-prof</a> introduces a new approach to profiling  		your Ruby or Rails code that is heavily based on the excellent work <a href="http://bitsweat.net/">Jeremy</a>  		has done on the request profiler included in newer versions of Rails.</p>
<p>The basic idea is to extend Ruby's TestUnit library so that individual test  		cases are profiled by including a new RubyProf::Test module. When you include this module, ruby-prof will run each test once as a warm up  		and then ten more times to gather profiling data (using another new feature  		of the 0.7.0 release, the ability to pause and resume a profiling run).  Profile data is then output for each test.</p>
<p>Let's look at an example:</p>
<pre><tt><span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">class</span></span> ExampleTest <span style="color: rgb(153, 0, 0);">&lt;</span> Test<span style="color: rgb(153, 0, 0);">::</span>Unit<span style="color: rgb(153, 0, 0);">::</span>TestCase<br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">include</span></span> RubyProf<span style="color: rgb(153, 0, 0);">::</span>Test<br />  <br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">def</span></span> test_stuff<br />    puts <span style="color: rgb(255, 0, 0);">&quot;Test method&quot;</span><br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">end</span></span><br /><span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">end</span></span></tt></pre>
<p>The line <tt><span style="font-weight: bold;"> 		<span style="color: rgb(0, 0, 255);">include</span></span> RubyProf<span style="color: rgb(153, 0, 0);">::</span>Test</tt>  		turns the test case into a profiling test case. The same approach  		could be used for hooking into other testing frameworks - all patches are  		of course welcome!</p>
<h3>Using a Profile Environment for Rails</h3>
<p>Now lets talk about profiling Rails. There are two main issues that make it harder then it seems.</p>
<p>First, to get any useful data you need to profile a Rails app using the production environment settings in conjunction with a test database.  		Using the development environment doesn't work because the time it takes  		Rails to reload classes on each request drowns out any useful information.</p>
<p>Second, how should profile tests be written and where should they go?</p>
<p>The solution I've adopted is to use functional like-tests that use a  		PROFILE environment, and place them in a directory called test/profile.</p>
<p>Let's look at another example:</p>
<pre><tt><span style="font-weight: bold;"><span style="color: rgb(0, 0, 128);">require</span></span> File<span style="color: rgb(153, 0, 0);">.</span>dirname<span style="color: rgb(153, 0, 0);">(</span><span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">__FILE__</span></span><span style="color: rgb(153, 0, 0);">)</span> <span style="color: rgb(153, 0, 0);">+</span> <span style="color: rgb(255, 0, 0);">'/../profile_test_helper'</span><br /><br /><span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">class</span></span> MyControllerTest <span style="color: rgb(153, 0, 0);">&lt;</span> Test<span style="color: rgb(153, 0, 0);">::</span>Unit<span style="color: rgb(153, 0, 0);">::</span>TestCase<br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">include</span></span> RubyProf<span style="color: rgb(153, 0, 0);">::</span>Test<br /><br />  fixtures<span style="color: rgb(153, 0, 0);"> :my_fixture</span><br /><br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">def</span></span> setup<br />    <span style="color: rgb(0, 153, 0);">@controller</span> <span style="color: rgb(153, 0, 0);">=</span> MyController<span style="color: rgb(153, 0, 0);">.</span>new<br />    <span style="color: rgb(0, 153, 0);">@request</span>    <span style="color: rgb(153, 0, 0);">=</span> ActionController<span style="color: rgb(153, 0, 0);">::</span>TestRequest<span style="color: rgb(153, 0, 0);">.</span>new<br />    <span style="color: rgb(0, 153, 0);">@response</span>   <span style="color: rgb(153, 0, 0);">=</span> ActionController<span style="color: rgb(153, 0, 0);">::</span>TestResponse<span style="color: rgb(153, 0, 0);">.</span>new<br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">end</span></span><br /><br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">def</span></span> test_get<br />    get<span style="color: rgb(153, 0, 0);">(</span><span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">:index</span></span><span style="color: rgb(153, 0, 0);">)</span><br />  <span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">end</span></span><br /><span style="font-weight: bold;"><span style="color: rgb(0, 0, 255);">end</span></span></tt></pre>
<p>The only difference between a functional test and a profile test are  		the inclusion of the RubyProf::Test module and loading profile_test_helper.rb.  		profile_test_helper is unfortunately needed because the standard test_helper.rb  		file Rails uses loads the TEST environment. Hopefully future versions  		of Rails will fix this by allowing greater flexibility in specifying a test  		environment.</p>
<p>So to get started with profiling your Rails application:</p>
<ol>
    <li>Copy profile_test_helper.rb from the ruby-prof distribution to your  		  rails test directory</li>
    <li>Modify profile_test_helper.rb as needed to set ruby-prof's output  		  directory</li>
    <li>Create a profile.rb file in the environments directory</li>
    <li>Update your databases.yml file to include a profile database (just map it to your test database)</li>
    <li>Create a new directory test/profile</li>
    <li>Start writing profiling tests that look similar to the above example</li>
</ol>
<p>And now you'll have reproducible profiling tests cases.</p>
<p>So what's missing? A way of keeping track of how your  		applications performance changes over time. A quick hack is to use  		source control to keep profile tests results around. A more sophisticated  		solution would be to use ruby-prof's API to dump profile results into a  		database and then put a nice web front end onto it. Any takers?</p>

";}i:5;a:9:{s:5:"title";s:15:"ruby-prof 0.7.0";s:11:"description";s:2800:"<p>I'm happy to announce the release of 		<a href="http://rubyforge.org/projects/ruby-prof">ruby-prof</a> 0.7.0, the  		superfast, open-source, Ruby profiler that helps you find bottlenecks in  		your Ruby code. This release was a joint effort, with major contributions  		from <a href="http://bitsweat.net/">Jeremy Kemper</a> (aka bitsweat) of  		Rails fame and <a href="http://www.linkedin.com/pub/0/567/a2">Hin Boen</a>  		from CodeGear. There are two major new features in this release, as well  		as a number of smaller enhancements and bug fixes. For a full list of changes,  		take a look at the 		<a href="http://rubyforge.org/forum/forum.php?forum_id=28366">release notes</a>.</p>
<p>The first major new feature is improved Rails profiling, which I'll talk  		about in a separate <a href="http://cfis.savagexi.com/2008/11/13/profiling-your-rails-application-take-two">post</a>.</p>
<p>The second major feature is significant internal changes that make it  		easier to integrate ruby-prof with IDEs. ruby-prof is already being used  		by Aptana's <a href="http://www.aptana.com/rails/">RadRails</a> and has  		been integrated into the next version of Code Gear's 		<a href="http://www.codegear.com/products/3rdrail">3rd Rail</a>. As part  		of this work, Hin has built a user interface for ruby-prof that lets a user  		inspect individual methods to see how much time they took as well as how  		they were called.</p>
<p>One big problem though, previous versions of ruby-prof only kept track  		of aggregate data. This made it impossible for Hin to create the user interface  		he wanted. For example, look at this call sequence:</p>
<pre><tt>     A<br />    / \<br />   B   K<br />  / \   \<br /> C   D   B<br />        / \<br />       C   D</tt></pre>
<p>With earlier versions of ruby-prof, there was no way to tell what percent  		of the time spent in method C was a result of the A -&gt; B -&gt; C call sequence  		versus the A -&gt; K -&gt; B -&gt; C call sequence. <br />
<br />
Or take another example:</p>
<pre><tt>  A    K<br />  |    |<br />  B    B<br />  |    |<br />  C    D	</tt></pre>
<p>In this case, if you tried to reconstruct the call sequence from ruby-prof  		you would end up with this incorrect result:</p>
<pre><tt>     A    K<br />     |  /<br />     B   <br />    / \ <br />  C    D	</tt></pre>
<p>So working with Hin, I rearchitected ruby-prof to keep track of full call  		sequences. Most likely you won't notice any difference - the changes will  		only affect you if you use ruby-prof's api to present results in a custom  		way. In that case, you'll have to update your code, which should only take  		a few minutes (to see the api in use, take a look at the various printer  		classes that ship with ruby-prof).</p>
<p>Enjoy, and all feedback is welcome.</p>

";s:7:"pubdate";s:31:"Wed, 12 Nov 2008 09:41:00 -0000";s:4:"guid";s:45:"urn:uuid:8201cb27-ae0d-4362-9e4c-f229565d12fb";s:8:"comments";s:60:"http://cfis.savagexi.com/2008/11/12/ruby-prof-0-7-0#comments";s:8:"category";s:9:"ruby-prof";s:9:"trackback";a:1:{s:4:"ping";s:50:"http://cfis.savagexi.com/trackbacks?article_id=503";}s:4:"link";s:51:"http://cfis.savagexi.com/2008/11/12/ruby-prof-0-7-0";s:7:"summary";s:2800:"<p>I'm happy to announce the release of 		<a href="http://rubyforge.org/projects/ruby-prof">ruby-prof</a> 0.7.0, the  		superfast, open-source, Ruby profiler that helps you find bottlenecks in  		your Ruby code. This release was a joint effort, with major contributions  		from <a href="http://bitsweat.net/">Jeremy Kemper</a> (aka bitsweat) of  		Rails fame and <a href="http://www.linkedin.com/pub/0/567/a2">Hin Boen</a>  		from CodeGear. There are two major new features in this release, as well  		as a number of smaller enhancements and bug fixes. For a full list of changes,  		take a look at the 		<a href="http://rubyforge.org/forum/forum.php?forum_id=28366">release notes</a>.</p>
<p>The first major new feature is improved Rails profiling, which I'll talk  		about in a separate <a href="http://cfis.savagexi.com/2008/11/13/profiling-your-rails-application-take-two">post</a>.</p>
<p>The second major feature is significant internal changes that make it  		easier to integrate ruby-prof with IDEs. ruby-prof is already being used  		by Aptana's <a href="http://www.aptana.com/rails/">RadRails</a> and has  		been integrated into the next version of Code Gear's 		<a href="http://www.codegear.com/products/3rdrail">3rd Rail</a>. As part  		of this work, Hin has built a user interface for ruby-prof that lets a user  		inspect individual methods to see how much time they took as well as how  		they were called.</p>
<p>One big problem though, previous versions of ruby-prof only kept track  		of aggregate data. This made it impossible for Hin to create the user interface  		he wanted. For example, look at this call sequence:</p>
<pre><tt>     A<br />    / \<br />   B   K<br />  / \   \<br /> C   D   B<br />        / \<br />       C   D</tt></pre>
<p>With earlier versions of ruby-prof, there was no way to tell what percent  		of the time spent in method C was a result of the A -&gt; B -&gt; C call sequence  		versus the A -&gt; K -&gt; B -&gt; C call sequence. <br />
<br />
Or take another example:</p>
<pre><tt>  A    K<br />  |    |<br />  B    B<br />  |    |<br />  C    D	</tt></pre>
<p>In this case, if you tried to reconstruct the call sequence from ruby-prof  		you would end up with this incorrect result:</p>
<pre><tt>     A    K<br />     |  /<br />     B   <br />    / \ <br />  C    D	</tt></pre>
<p>So working with Hin, I rearchitected ruby-prof to keep track of full call  		sequences. Most likely you won't notice any difference - the changes will  		only affect you if you use ruby-prof's api to present results in a custom  		way. In that case, you'll have to update your code, which should only take  		a few minutes (to see the api in use, take a look at the various printer  		classes that ship with ruby-prof).</p>
<p>Enjoy, and all feedback is welcome.</p>

";}i:6;a:8:{s:5:"title";s:38:"So This is What 100k People Look Like ";s:11:"description";s:2880:"<p>No doubt this post is two weeks past its prime, but better late than  		never, right? On Sunday, October 26th, Yue and I headed downtown to check  		out Barak Obama's campaign rally at Civic Center park in the heart of Denver.</p>
<p>By the time we arrived the place was packed. In fact, it turned out that  		over <a href="http://www.denverpost.com/breakingnews/ci_10821877">100,000</a>  		of our closest friends were there, making it Obama's largest crowd in the  		United States up to that point. And I think the second largest crowed I've  		ever been in, surpassed only by watching fireworks on the 4th of July from  		the National Mall in Washington, DC).</p>
<p>Wanting to at least be able to see Obama, we managed to be the last two  		people allowed into the center of the park (versus around the periphery).  		Once inside, we squirreled our way about half way to the stage. As you can  		see in the pictures, that wasn't all that close, but close enough to catch  		a glimpse of Obama. The first picture is looking west towards Denver's City  		hall. If you're interested, click the picture to get a bigger version, then  		find the tree in the center of the stage under the Colorado flag, and look  		right 3.5 columns to see Obama working the crowd:</p>
<p><a href="http://cfis.savagexi.com/files/Obama_Denver.jpg"> 		<img height="600" width="450" src="http://cfis.savagexi.com/files/Obama_Denver_Small.jpg" alt="Obama Denver Rally 2008" /></a>]</p>
<p>And here's the view looking back east, back towards the Colorado State  		Capital (supposedly Denver is the only city where the city hall faces the  		state Capital building, but I've never verified if that's true).</p>
<p><img src="http://cfis.savagexi.com/files/Crowd_Capital_Small.jpg" alt="Obama Denver Rally Capital" /></p>
<p>For the most part Obama stuck to his standard stump speech, but what  		struck me was its optimism and focus on working together.  		Nice words no doubt, but it was a nice change of pace from typical campaign  		bashing.</p>
<p>On the way out, there was a table for all the poor souls who lost their  		keys and cell phones that day:</p>
<p><img height="600" width="450" src="http://cfis.savagexi.com/files/Lost_Keys.jpg" alt="Lost Keys" /></p>
<p>And a couple pictures of Yue for good measure, that show what a beautiful day it was:</p>
<p><img height="600" width="450" src="http://cfis.savagexi.com/files/Yue_City_Hall.jpg" alt="Yue City Hall" /></p>
<p><img height="600" width="450" src="http://cfis.savagexi.com/files/Yue_Capital.jpg" alt="Yue Capital" /></p>
<p>Update: If you can't see Obama, check out Paul's <a href="http://blog.cleverelephant.ca/2008/11/on-guard.html">post</a>.  Paul also points out the snipers that are visible on top of City Hall.  And they weren't the only ones, there were plenty more to the north where Denver's taller buildings are located.</p>

";s:7:"pubdate";s:31:"Tue, 11 Nov 2008 11:15:00 -0000";s:4:"guid";s:45:"urn:uuid:4dfef351-738c-407f-b1ac-5857f979c47d";s:8:"comments";s:82:"http://cfis.savagexi.com/2008/11/11/so-this-is-what-100k-people-look-like#comments";s:9:"trackback";a:1:{s:4:"ping";s:50:"http://cfis.savagexi.com/trackbacks?article_id=502";}s:4:"link";s:73:"http://cfis.savagexi.com/2008/11/11/so-this-is-what-100k-people-look-like";s:7:"summary";s:2880:"<p>No doubt this post is two weeks past its prime, but better late than  		never, right? On Sunday, October 26th, Yue and I headed downtown to check  		out Barak Obama's campaign rally at Civic Center park in the heart of Denver.</p>
<p>By the time we arrived the place was packed. In fact, it turned out that  		over <a href="http://www.denverpost.com/breakingnews/ci_10821877">100,000</a>  		of our closest friends were there, making it Obama's largest crowd in the  		United States up to that point. And I think the second largest crowed I've  		ever been in, surpassed only by watching fireworks on the 4th of July from  		the National Mall in Washington, DC).</p>
<p>Wanting to at least be able to see Obama, we managed to be the last two  		people allowed into the center of the park (versus around the periphery).  		Once inside, we squirreled our way about half way to the stage. As you can  		see in the pictures, that wasn't all that close, but close enough to catch  		a glimpse of Obama. The first picture is looking west towards Denver's City  		hall. If you're interested, click the picture to get a bigger version, then  		find the tree in the center of the stage under the Colorado flag, and look  		right 3.5 columns to see Obama working the crowd:</p>
<p><a href="http://cfis.savagexi.com/files/Obama_Denver.jpg"> 		<img height="600" width="450" src="http://cfis.savagexi.com/files/Obama_Denver_Small.jpg" alt="Obama Denver Rally 2008" /></a>]</p>
<p>And here's the view looking back east, back towards the Colorado State  		Capital (supposedly Denver is the only city where the city hall faces the  		state Capital building, but I've never verified if that's true).</p>
<p><img src="http://cfis.savagexi.com/files/Crowd_Capital_Small.jpg" alt="Obama Denver Rally Capital" /></p>
<p>For the most part Obama stuck to his standard stump speech, but what  		struck me was its optimism and focus on working together.  		Nice words no doubt, but it was a nice change of pace from typical campaign  		bashing.</p>
<p>On the way out, there was a table for all the poor souls who lost their  		keys and cell phones that day:</p>
<p><img height="600" width="450" src="http://cfis.savagexi.com/files/Lost_Keys.jpg" alt="Lost Keys" /></p>
<p>And a couple pictures of Yue for good measure, that show what a beautiful day it was:</p>
<p><img height="600" width="450" src="http://cfis.savagexi.com/files/Yue_City_Hall.jpg" alt="Yue City Hall" /></p>
<p><img height="600" width="450" src="http://cfis.savagexi.com/files/Yue_Capital.jpg" alt="Yue Capital" /></p>
<p>Update: If you can't see Obama, check out Paul's <a href="http://blog.cleverelephant.ca/2008/11/on-guard.html">post</a>.  Paul also points out the snipers that are visible on top of City Hall.  And they weren't the only ones, there were plenty more to the north where Denver's taller buildings are located.</p>

";}i:7;a:8:{s:5:"title";s:29:"Rafting Down the Grand Canyon";s:11:"description";s:5681:"<p>Rafting down the Grand Canyon has been on my todo list for a long time.  		Over the years, I've rafted or canoed the James, Potomac, Rappahannock,  		Shenandoah, Arkansas, Taylor (well that's mostly a creek), Green and Colorado  		rivers. But never the Grand Canyon.</p>
<p>So this summer it was time. Seven of us - Haydon, Dave, Natasha, Brian,  		Lauren, Yue and myself - took the plunge and paddled down the 		<a href="http://www.outdoorsunlimited.com/grand-canyon/upper.html">upper  		part</a> of the Grand Canyon from Marble Canyon to the Bright Angel Trail.  		We went with 		<a href="http://www.outdoorsunlimited.com/grand-canyon/upper.html">Outdoors  		Unlimited</a>, which I highly recommend. They not only provided equipment,  		but also knowledgeable guides and great food.</p>
<p>Here's all of us by a grotto a few hundred feet above the Colorado River  		(from left to right is Dave, Haydon, Yue, myself, Brian, Natasha and Lauren  		- click the picture for a bigger version):</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Grotto.jpg"> 		<img height="431" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Grotto_Small.jpg" alt="Group" /></a></p>
<p>There are several different types of trips you can take down the canyon  		- we opted for a paddle trip. A paddle trip is just like it sounds - you  		get to paddle your way down the canyon using yellow, rubber boats, with  		six people per boat plus a guide. Depending on how much you like thrills,  		the best seats in the boat are the front two, where you get really wet from  		waves breaking over the bow when you hit a big rapid.</p>
<p>Yue, who isn't much of a camper, was a good sport about the whole thing  		once she discovered she could sleep in a tent versus sleeping under the  		stars. Here is our campground ffrom the third night, with yours truly sleeping  		outside:</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Tent.jpg"> 		<img height="337" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Tent_Small.jpg" alt="Tent" /></a></p>
<p>It took five days and ninety five miles to get to our drop-off point  		- the deepest part of the canyon at the bottom of the 		<a href="http://en.wikipedia.org/wiki/Bright_Angel_Trail">Bright Angel Trail</a>..  		From there its an eight mile hike, and 4,380 feet up, to get to the visitor  		center on the South Rim. I had hiked the very top bit of the trail twenty  		years ago, but hadn't been back since.</p>
<p>Its an absolutely beautiful trail, surprisingly cool on the bottom half  		(well, we did start at 7am) as it climbs up along a small creek. Here is  		what it looks like once you've hiked about two miles and reached the top  		of the inner gorge - the picture is looking south with the<a href="http://en.wikipedia.org/wiki/Great_Unconformity">  		Great Unconformity</a> in the foreground and the towering south wall in  		the background:</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Bright_Angel_Trail.jpg"> 		<img height="600" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Bright_Angel_Trail_Small.jpg" alt="Bright Angel Trail" /></a></p>
<p>Dave took the prize, hiking up in an amazing time of 2:45, followed by  		Lauren and Natasha at 3:15, and the rest of us at 3:45 (which by the way  		I was quite proud of).</p>
<p>Here the obligatory picture from the top:</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Rim_View.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Rim_View_Small.jpg" alt="Rim View" /></a></p>
<p>And here's Lauren, Natasha, Haydon and Brian a enjoying some well-deserved  		ice cream.</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_at_the_Top.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_at_the_Top_Small.jpg" alt="At the Top" /></a></p>
<p>And some of our better pictures:</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Group_Picture_1.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Group_Picture_Small.jpg" alt="Group" /></a></p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Brian_and_Yue.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Brian_and_Yue_Small.jpg" alt="Yue and Brian" /></a></p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Charlie_and_Dave.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Charlie_and_Dave_Small.jpg" alt="Dave and Charlie" /></a></p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Brian_Camp.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Brian_Camp_Small.jpg" alt="Brian's Camp" /></a></p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Haydon_Boat.jpg"> 		<img height="430" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Haydon_Boat_Small.jpg" alt="Haydon on Boat" /></a></p>
<p>&amp;</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Yue_Natasha.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Yue_Natasha_Small.jpg" alt="Yue and Natasha" /></a></p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Lauren_Brian_Yue_Charlie.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Lauren_Brian_Yue_Charlie_Small.jpg" alt="Lauren Brian Yue Charlie" /></a></p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Haydon_Brian_Lauren.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Haydon_Brian_Lauren_Small.jpg" alt="Haydon Brian Lauren" /></a></p>

";s:7:"pubdate";s:31:"Mon, 10 Nov 2008 20:24:00 -0000";s:4:"guid";s:45:"urn:uuid:a391fc79-e57d-4047-8cf8-0a1f32d52bdf";s:8:"comments";s:74:"http://cfis.savagexi.com/2008/11/10/rafting-down-the-grand-canyon#comments";s:9:"trackback";a:1:{s:4:"ping";s:50:"http://cfis.savagexi.com/trackbacks?article_id=501";}s:4:"link";s:65:"http://cfis.savagexi.com/2008/11/10/rafting-down-the-grand-canyon";s:7:"summary";s:5681:"<p>Rafting down the Grand Canyon has been on my todo list for a long time.  		Over the years, I've rafted or canoed the James, Potomac, Rappahannock,  		Shenandoah, Arkansas, Taylor (well that's mostly a creek), Green and Colorado  		rivers. But never the Grand Canyon.</p>
<p>So this summer it was time. Seven of us - Haydon, Dave, Natasha, Brian,  		Lauren, Yue and myself - took the plunge and paddled down the 		<a href="http://www.outdoorsunlimited.com/grand-canyon/upper.html">upper  		part</a> of the Grand Canyon from Marble Canyon to the Bright Angel Trail.  		We went with 		<a href="http://www.outdoorsunlimited.com/grand-canyon/upper.html">Outdoors  		Unlimited</a>, which I highly recommend. They not only provided equipment,  		but also knowledgeable guides and great food.</p>
<p>Here's all of us by a grotto a few hundred feet above the Colorado River  		(from left to right is Dave, Haydon, Yue, myself, Brian, Natasha and Lauren  		- click the picture for a bigger version):</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Grotto.jpg"> 		<img height="431" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Grotto_Small.jpg" alt="Group" /></a></p>
<p>There are several different types of trips you can take down the canyon  		- we opted for a paddle trip. A paddle trip is just like it sounds - you  		get to paddle your way down the canyon using yellow, rubber boats, with  		six people per boat plus a guide. Depending on how much you like thrills,  		the best seats in the boat are the front two, where you get really wet from  		waves breaking over the bow when you hit a big rapid.</p>
<p>Yue, who isn't much of a camper, was a good sport about the whole thing  		once she discovered she could sleep in a tent versus sleeping under the  		stars. Here is our campground ffrom the third night, with yours truly sleeping  		outside:</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Tent.jpg"> 		<img height="337" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Tent_Small.jpg" alt="Tent" /></a></p>
<p>It took five days and ninety five miles to get to our drop-off point  		- the deepest part of the canyon at the bottom of the 		<a href="http://en.wikipedia.org/wiki/Bright_Angel_Trail">Bright Angel Trail</a>..  		From there its an eight mile hike, and 4,380 feet up, to get to the visitor  		center on the South Rim. I had hiked the very top bit of the trail twenty  		years ago, but hadn't been back since.</p>
<p>Its an absolutely beautiful trail, surprisingly cool on the bottom half  		(well, we did start at 7am) as it climbs up along a small creek. Here is  		what it looks like once you've hiked about two miles and reached the top  		of the inner gorge - the picture is looking south with the<a href="http://en.wikipedia.org/wiki/Great_Unconformity">  		Great Unconformity</a> in the foreground and the towering south wall in  		the background:</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Bright_Angel_Trail.jpg"> 		<img height="600" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Bright_Angel_Trail_Small.jpg" alt="Bright Angel Trail" /></a></p>
<p>Dave took the prize, hiking up in an amazing time of 2:45, followed by  		Lauren and Natasha at 3:15, and the rest of us at 3:45 (which by the way  		I was quite proud of).</p>
<p>Here the obligatory picture from the top:</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Rim_View.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Rim_View_Small.jpg" alt="Rim View" /></a></p>
<p>And here's Lauren, Natasha, Haydon and Brian a enjoying some well-deserved  		ice cream.</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_at_the_Top.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_at_the_Top_Small.jpg" alt="At the Top" /></a></p>
<p>And some of our better pictures:</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Group_Picture_1.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Group_Picture_Small.jpg" alt="Group" /></a></p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Brian_and_Yue.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Brian_and_Yue_Small.jpg" alt="Yue and Brian" /></a></p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Charlie_and_Dave.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Charlie_and_Dave_Small.jpg" alt="Dave and Charlie" /></a></p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Brian_Camp.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Brian_Camp_Small.jpg" alt="Brian's Camp" /></a></p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Haydon_Boat.jpg"> 		<img height="430" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Haydon_Boat_Small.jpg" alt="Haydon on Boat" /></a></p>
<p>&amp;</p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Yue_Natasha.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Yue_Natasha_Small.jpg" alt="Yue and Natasha" /></a></p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Lauren_Brian_Yue_Charlie.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Lauren_Brian_Yue_Charlie_Small.jpg" alt="Lauren Brian Yue Charlie" /></a></p>
<p><a href="http://cfis.savagexi.com/files/Grand_Canyon_Haydon_Brian_Lauren.jpg"> 		<img height="338" width="450" src="http://cfis.savagexi.com/files/Grand_Canyon_Haydon_Brian_Lauren_Small.jpg" alt="Haydon Brian Lauren" /></a></p>

";}i:8;a:9:{s:5:"title";s:13:"DNC Event Map";s:11:"description";s:1486:"<p>One of the projects we've been working on for <a href="http://www.mapbuzz.com">MapBuzz </a>the last few weeks is building an interactive <a href="http://www.politicswest.com/mapbuzz">map </a>that shows all the events going on in Denver during the Democratic National Convention. Users can pick the event type and date they are interested in, and the map refreshes with icons for relevant events. By clicking on a given event, the user can see exactly where and when the event is taking place. I think the map turned out pretty well - its a good example of mashup pulling data from different sources.  In this case, base maps from Google, event information from Zvents, and all rendering/styling/page from MapBuzz.</p>
<p>It did clarify my thinking on a few points. First, Rails built-in page caching is really limited - it ignores query parameters and only works for html. So we had to hack around that, more info coming in a later post. Second, for building mashups xml really is superior to JSON simply because it supports namespaces (for all their pain points, namespaces really do facilitate merging of data from multiple sources). Third, when you need it, xslt is invaluable. Zvents serves its data using RSS, but our client only supports Atom. The simple solution was a quick xsl transformation to convert Zvent's rss feed over to Atom using libxslt (and thus MapBuzz's contribution back to the Ruby community to get the libxml and libxslt bindings back into good shape).</p>

";s:7:"pubdate";s:31:"Wed, 27 Aug 2008 12:55:00 -0000";s:4:"guid";s:45:"urn:uuid:927b124d-efdb-45cb-beff-2abd5c4e5e69";s:8:"comments";s:58:"http://cfis.savagexi.com/2008/08/27/dnc-event-map#comments";s:8:"category";s:6:"Design";s:9:"trackback";a:1:{s:4:"ping";s:50:"http://cfis.savagexi.com/trackbacks?article_id=500";}s:4:"link";s:49:"http://cfis.savagexi.com/2008/08/27/dnc-event-map";s:7:"summary";s:1486:"<p>One of the projects we've been working on for <a href="http://www.mapbuzz.com">MapBuzz </a>the last few weeks is building an interactive <a href="http://www.politicswest.com/mapbuzz">map </a>that shows all the events going on in Denver during the Democratic National Convention. Users can pick the event type and date they are interested in, and the map refreshes with icons for relevant events. By clicking on a given event, the user can see exactly where and when the event is taking place. I think the map turned out pretty well - its a good example of mashup pulling data from different sources.  In this case, base maps from Google, event information from Zvents, and all rendering/styling/page from MapBuzz.</p>
<p>It did clarify my thinking on a few points. First, Rails built-in page caching is really limited - it ignores query parameters and only works for html. So we had to hack around that, more info coming in a later post. Second, for building mashups xml really is superior to JSON simply because it supports namespaces (for all their pain points, namespaces really do facilitate merging of data from multiple sources). Third, when you need it, xslt is invaluable. Zvents serves its data using RSS, but our client only supports Atom. The simple solution was a quick xsl transformation to convert Zvent's rss feed over to Atom using libxslt (and thus MapBuzz's contribution back to the Ruby community to get the libxml and libxslt bindings back into good shape).</p>

";}i:9;a:9:{s:5:"title";s:24:"Resurrecting libxml-ruby";s:11:"description";s:7144:"          <p>There is general discontent with the state of XML processing in Ruby - see for example  <a href="http://www.tbray.org/ongoing/When/200x/2006/08/22/REXML">here</a> or <a href="http://enfranchisedmind.com/blog/2008/03/24/rexml-dynamic-typing-lose/">here</a>. An obvious solution is to use <a href="http://xmlsoft.org/">libxml</a>. However that has been a non-starter since the  <a href="http://libxml.rubyforge.org/">libxml</a> Ruby bindings have historically caused numerous segementation faults, don't run on  Windows and recently lost their current maintainer, Dan Janowski. Making it even more frustrating is that Dan had spent  the last year rearchitecting the bindings, successfully fixing the segmentation faults.</p>
          <p>Since <a href="http://www.mapbuzz.com">MapBuzz</a> heavily depends on libxml, it seemed time to step in and contribute.  Over the last two weeks  I've added support for Windows, cleaned out the bug database and patch list, resolved the few remaining segmentation issues, greatly improved the RDocs and  refactored large portions of the code base to conform with modern Ruby extension standards.</p>
          <p>After iterating through a couple of releases over the last two weeks, the Ruby libxml community is happy to announce the availability of  version 0.8.0,  which we believe is ready for prime time. It offers a great combination of speed, functionality and conformance (libxml  <a href="http://xmlsoft.org/">passes</a> all 1800+  tests in the <a href="http://www.oasis-open.org/committees/xml-conformance/">OASIS XML Tests  Suite</a>).</p>
          <p>So  give it a try - its as easy to install as: </p>
          <pre><tt></tt>gem install libxml-ruby</pre>
<p>If you're on Windows there may be an extra step if you haven't already installed libxml2.  If not, then the libxml-ruby distribution includes a prebuilt libxml2 dll in the libxml-ruby/mingw directory.  Copy the dll to libxml-ruby/lib, your Ruby bin directory, or somewhere on your path (basically put it someplace where Windows can find it). </p>
<p>Undoubtedly there are still some bugs left, so please  <a href="http://rubyforge.org/tracker/?atid=1971&amp;group_id=494&amp;func=browse">report</a> anything you find, so we can fix them in future releases. </p>
<h3>Blindingly Fast</h3>
<p>The major reason people consider using libxml-ruby is performance. Here are the results from running (on my laptop) a few simple benchmarks that have recently been blogged about on the Web (you can find them in the benchmark directory of  the libxml distribution).</p>
<p>From <a href="http://depixelate.com/2008/4/23/ruby-xml-parsing-benchmarks">Zack Chandler</a>:</p>
<pre><tt>              user     system      total        real
libxml    0.032000   0.000000   0.032000 (  0.031000)
Hpricot   0.640000   0.031000   0.671000 (  0.890000)
REXML     1.813000   0.047000   1.860000 (  2.031000)</tt></pre>
From <a href="https://svn.concord.org/svn/projects/trunk/common/ruby/xml_benchmarks/">Stephen Bannasch:</a>
<pre>
              user     system      total        real
libxml    0.641000   0.031000   0.672000 (  0.672000)
hpricot   5.359000   0.062000   5.421000 (  5.516000)
rexml    22.859000   0.047000  22.906000 ( 23.203000)
</pre>
<p>From <a href="http://yomi.at/archives/19">Andreas Meingast</a>: </p>
<pre><tt>LIBXML THROUGHPUT:
	10.2570516817665 MB/s
	10.2570830340359 MB/s
	12.6992253283934 MB/s
  10.2570516817665 MB/s
	8.51116888387252 MB/s
	10.2570830340359 MB/s

HPRICOT THROUGHPUT:
	0.211597647822036 MB/s
	0.202390771964726 MB/s
	0.180272812529665 MB/s
	0.198474511420818 MB/s
	0.198474499681793 MB/s
  0.180925089981179 MB/s

REXML THROUGHPUT:
	0.130301425548982 MB/s
	0.131630590068325 MB/s
	0.128316078417727 MB/s
	0.125203555921636 MB/s
	0.120181872867636 MB/s
	0.115330940074107 MB/s</tt></pre>
<p>I can't vouch for the appropriateness of the tests, but they show libxml clocking in at 10x hpricot and 30x to 60x REXML. I'd be happy to accept additional tests or more appropriate tests if you have any.</p>

<h3>An Embarrassment of Riches</h3>
          <p>In addition to performance, the libxml-ruby  bindings provide impressive  coverage of libxml's functionality. Goodies include:          </p>
          <ul>
            <li>SAX</li>
            <li>DOM</li>
            <li>XMLReader (streaming interface) </li>
            <li> XPath</li>
            <li>XPointer</li>
            <li>XML Schema</li>
            <li>DTDs </li>
            <li>XSLT (split into the <a href="http://rubyforge.org/projects/libxsl/">libxslt-ruby</a> bindings) </li>
        </ul>
          <p>Now, your first reaction might be that SAX, DOM and XPath are all you need, but validating parsers make it a whole lot easier to <a href="http://cfis.savagexi.com/articles/2007/02/08/a-sane-way-of-sanitizing-html">sanitize</a> user contributed content on web sites. And the XMLReader  offers a clever way of combining the DOM's ease of use (well, ok, compared to SAX at least) with SAX's memory and speed advantages. </p>
          <p>Better yet, most of this functionality is exposed via an easy-to-use, Ruby like API. There are still of course  some warts lurking in the code, where libxml's C api leaks through to Ruby, but they are being removed one by one. And for those of you who aren't C hackers, much of this work can be done in good old Ruby. </p>
          <h3>A Long History </h3>
          <p>For such a useful, and full-featured library, the libxml-ruby bindings have a star-crossed history. Out of curiosity, I went back and traced their  lineage. <a href="http://sean.chittenden.org/">Sean Chittenden</a> originally <a href="http://groups.google.com/group/comp.lang.ruby/browse_thread/thread/7b946bfb42564929/0f92dfeb951ed7d0?lnk=gst&amp;amp;q=libxml#0f92dfeb951ed7d0">wrote</a> them back in 2002. At the start of 2005,  Trans Onoma <a href="http://groups.google.com/group/comp.lang.ruby/browse_thread/thread/3bf6b57ec81198c/746badd2919c859b?lnk=gst&amp;q=trans+libxml#746badd2919c859b">adopted</a> the project after Sean had moved on, and at the end of 2005 the bindings found their current <a href="http://libxml.rubyforge.org/">home</a> on Ruby Forge. At that point Ross Bamford took <a href="http://groups.google.com/group/comp.lang.ruby/browse_thread/thread/50c380881c5faff8/21e98aa900a96ef0?lnk=gst&amp;amp;q=libxml#">over</a> maintenance and  worked on the bindings for roughly a year, until early 2007, when then the bindings  again became unmaintained. Dan Janowski <a href="http://rubyforge.org/pipermail/libxml-devel/2007-August/000430.html">picked</a> up the ball in 2007 and completely overhauled the binding's memory model. Sadly,  Dan had to <a href="http://rubyforge.org/pipermail/libxml-devel/2008-March/000744.html">give</a> up active support this spring. </p>
          <p>But on the bright side, Trans, Dan and Sean are all once again active on the mailing list, providing valuable experience and insight. From my point of view, with the renewed push towards a production quality release, and bringing in new users, the libxml-ruby community is as healthy as it has been in a long while.</p>


";s:7:"pubdate";s:31:"Wed, 16 Jul 2008 10:38:00 -0000";s:4:"guid";s:45:"urn:uuid:b0cd4b59-6bdc-464c-8211-17cf59c98973";s:8:"comments";s:69:"http://cfis.savagexi.com/2008/07/16/resurrecting-libxml-ruby#comments";s:8:"category";s:4:"Ruby";s:9:"trackback";a:1:{s:4:"ping";s:50:"http://cfis.savagexi.com/trackbacks?article_id=499";}s:4:"link";s:60:"http://cfis.savagexi.com/2008/07/16/resurrecting-libxml-ruby";s:7:"summary";s:7144:"          <p>There is general discontent with the state of XML processing in Ruby - see for example  <a href="http://www.tbray.org/ongoing/When/200x/2006/08/22/REXML">here</a> or <a href="http://enfranchisedmind.com/blog/2008/03/24/rexml-dynamic-typing-lose/">here</a>. An obvious solution is to use <a href="http://xmlsoft.org/">libxml</a>. However that has been a non-starter since the  <a href="http://libxml.rubyforge.org/">libxml</a> Ruby bindings have historically caused numerous segementation faults, don't run on  Windows and recently lost their current maintainer, Dan Janowski. Making it even more frustrating is that Dan had spent  the last year rearchitecting the bindings, successfully fixing the segmentation faults.</p>
          <p>Since <a href="http://www.mapbuzz.com">MapBuzz</a> heavily depends on libxml, it seemed time to step in and contribute.  Over the last two weeks  I've added support for Windows, cleaned out the bug database and patch list, resolved the few remaining segmentation issues, greatly improved the RDocs and  refactored large portions of the code base to conform with modern Ruby extension standards.</p>
          <p>After iterating through a couple of releases over the last two weeks, the Ruby libxml community is happy to announce the availability of  version 0.8.0,  which we believe is ready for prime time. It offers a great combination of speed, functionality and conformance (libxml  <a href="http://xmlsoft.org/">passes</a> all 1800+  tests in the <a href="http://www.oasis-open.org/committees/xml-conformance/">OASIS XML Tests  Suite</a>).</p>
          <p>So  give it a try - its as easy to install as: </p>
          <pre><tt></tt>gem install libxml-ruby</pre>
<p>If you're on Windows there may be an extra step if you haven't already installed libxml2.  If not, then the libxml-ruby distribution includes a prebuilt libxml2 dll in the libxml-ruby/mingw directory.  Copy the dll to libxml-ruby/lib, your Ruby bin directory, or somewhere on your path (basically put it someplace where Windows can find it). </p>
<p>Undoubtedly there are still some bugs left, so please  <a href="http://rubyforge.org/tracker/?atid=1971&amp;group_id=494&amp;func=browse">report</a> anything you find, so we can fix them in future releases. </p>
<h3>Blindingly Fast</h3>
<p>The major reason people consider using libxml-ruby is performance. Here are the results from running (on my laptop) a few simple benchmarks that have recently been blogged about on the Web (you can find them in the benchmark directory of  the libxml distribution).</p>
<p>From <a href="http://depixelate.com/2008/4/23/ruby-xml-parsing-benchmarks">Zack Chandler</a>:</p>
<pre><tt>              user     system      total        real
libxml    0.032000   0.000000   0.032000 (  0.031000)
Hpricot   0.640000   0.031000   0.671000 (  0.890000)
REXML     1.813000   0.047000   1.860000 (  2.031000)</tt></pre>
From <a href="https://svn.concord.org/svn/projects/trunk/common/ruby/xml_benchmarks/">Stephen Bannasch:</a>
<pre>
              user     system      total        real
libxml    0.641000   0.031000   0.672000 (  0.672000)
hpricot   5.359000   0.062000   5.421000 (  5.516000)
rexml    22.859000   0.047000  22.906000 ( 23.203000)
</pre>
<p>From <a href="http://yomi.at/archives/19">Andreas Meingast</a>: </p>
<pre><tt>LIBXML THROUGHPUT:
	10.2570516817665 MB/s
	10.2570830340359 MB/s
	12.6992253283934 MB/s
  10.2570516817665 MB/s
	8.51116888387252 MB/s
	10.2570830340359 MB/s

HPRICOT THROUGHPUT:
	0.211597647822036 MB/s
	0.202390771964726 MB/s
	0.180272812529665 MB/s
	0.198474511420818 MB/s
	0.198474499681793 MB/s
  0.180925089981179 MB/s

REXML THROUGHPUT:
	0.130301425548982 MB/s
	0.131630590068325 MB/s
	0.128316078417727 MB/s
	0.125203555921636 MB/s
	0.120181872867636 MB/s
	0.115330940074107 MB/s</tt></pre>
<p>I can't vouch for the appropriateness of the tests, but they show libxml clocking in at 10x hpricot and 30x to 60x REXML. I'd be happy to accept additional tests or more appropriate tests if you have any.</p>

<h3>An Embarrassment of Riches</h3>
          <p>In addition to performance, the libxml-ruby  bindings provide impressive  coverage of libxml's functionality. Goodies include:          </p>
          <ul>
            <li>SAX</li>
            <li>DOM</li>
            <li>XMLReader (streaming interface) </li>
            <li> XPath</li>
            <li>XPointer</li>
            <li>XML Schema</li>
            <li>DTDs </li>
            <li>XSLT (split into the <a href="http://rubyforge.org/projects/libxsl/">libxslt-ruby</a> bindings) </li>
        </ul>
          <p>Now, your first reaction might be that SAX, DOM and XPath are all you need, but validating parsers make it a whole lot easier to <a href="http://cfis.savagexi.com/articles/2007/02/08/a-sane-way-of-sanitizing-html">sanitize</a> user contributed content on web sites. And the XMLReader  offers a clever way of combining the DOM's ease of use (well, ok, compared to SAX at least) with SAX's memory and speed advantages. </p>
          <p>Better yet, most of this functionality is exposed via an easy-to-use, Ruby like API. There are still of course  some warts lurking in the code, where libxml's C api leaks through to Ruby, but they are being removed one by one. And for those of you who aren't C hackers, much of this work can be done in good old Ruby. </p>
          <h3>A Long History </h3>
          <p>For such a useful, and full-featured library, the libxml-ruby bindings have a star-crossed history. Out of curiosity, I went back and traced their  lineage. <a href="http://sean.chittenden.org/">Sean Chittenden</a> originally <a href="http://groups.google.com/group/comp.lang.ruby/browse_thread/thread/7b946bfb42564929/0f92dfeb951ed7d0?lnk=gst&amp;amp;q=libxml#0f92dfeb951ed7d0">wrote</a> them back in 2002. At the start of 2005,  Trans Onoma <a href="http://groups.google.com/group/comp.lang.ruby/browse_thread/thread/3bf6b57ec81198c/746badd2919c859b?lnk=gst&amp;q=trans+libxml#746badd2919c859b">adopted</a> the project after Sean had moved on, and at the end of 2005 the bindings found their current <a href="http://libxml.rubyforge.org/">home</a> on Ruby Forge. At that point Ross Bamford took <a href="http://groups.google.com/group/comp.lang.ruby/browse_thread/thread/50c380881c5faff8/21e98aa900a96ef0?lnk=gst&amp;amp;q=libxml#">over</a> maintenance and  worked on the bindings for roughly a year, until early 2007, when then the bindings  again became unmaintained. Dan Janowski <a href="http://rubyforge.org/pipermail/libxml-devel/2007-August/000430.html">picked</a> up the ball in 2007 and completely overhauled the binding's memory model. Sadly,  Dan had to <a href="http://rubyforge.org/pipermail/libxml-devel/2008-March/000744.html">give</a> up active support this spring. </p>
          <p>But on the bright side, Trans, Dan and Sean are all once again active on the mailing list, providing valuable experience and insight. From my point of view, with the renewed push towards a production quality release, and bringing in new users, the libxml-ruby community is as healthy as it has been in a long while.</p>


";}}s:7:"channel";a:6:{s:5:"title";s:4:"cfis";s:4:"link";s:24:"http://cfis.savagexi.com";s:8:"language";s:5:"en-us";s:3:"ttl";s:2:"40";s:11:"description";s:21:"Charlie Savage's Blog";s:7:"tagline";s:21:"Charlie Savage's Blog";}s:9:"textinput";a:0:{}s:5:"image";a:0:{}s:9:"feed_type";s:3:"RSS";s:12:"feed_version";s:3:"2.0";s:5:"stack";a:0:{}s:9:"inchannel";b:0;s:6:"initem";b:0;s:9:"incontent";b:0;s:11:"intextinput";b:0;s:7:"inimage";b:0;s:13:"current_field";s:0:"";s:17:"current_namespace";b:0;s:5:"ERROR";s:0:"";s:19:"_CONTENT_CONSTRUCTS";a:6:{i:0;s:7:"content";i:1;s:7:"summary";i:2;s:4:"info";i:3;s:5:"title";i:4;s:7:"tagline";i:5;s:9:"copyright";}s:4:"etag";s:36:""2f4d238754166c417fe0f4894c0123d6"
";}